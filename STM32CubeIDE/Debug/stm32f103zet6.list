
stm32f103zet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08008cd4  08008cd4  00018cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008df0  08008df0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008df0  08008df0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008df0  08008df0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008df0  08008df0  00018df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008df4  08008df4  00018df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012cc  200001e0  08008fd8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014ac  08008fd8  000214ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001907f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004303  00000000  00000000  00039288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  0003d590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  0003e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de3f  00000000  00000000  0003f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151ff  00000000  00000000  0005d087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097512  00000000  00000000  00072286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109798  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004114  00000000  00000000  001097ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	00000000 	.word	0x00000000
 8000204:	08008cbc 	.word	0x08008cbc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001e4 	.word	0x200001e4
 8000220:	08008cbc 	.word	0x08008cbc

08000224 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <MX_CRC_Init+0x20>)
 800022a:	4a07      	ldr	r2, [pc, #28]	; (8000248 <MX_CRC_Init+0x24>)
 800022c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <MX_CRC_Init+0x20>)
 8000230:	f001 f92f 	bl	8001492 <HAL_CRC_Init>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800023a:	f000 f93b 	bl	80004b4 <Error_Handler>
  }

}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	2000043c 	.word	0x2000043c
 8000248:	40023000 	.word	0x40023000

0800024c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a09      	ldr	r2, [pc, #36]	; (8000280 <HAL_CRC_MspInit+0x34>)
 800025a:	4293      	cmp	r3, r2
 800025c:	d10b      	bne.n	8000276 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <HAL_CRC_MspInit+0x38>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	4a08      	ldr	r2, [pc, #32]	; (8000284 <HAL_CRC_MspInit+0x38>)
 8000264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000268:	6153      	str	r3, [r2, #20]
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_CRC_MspInit+0x38>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000272:	60fb      	str	r3, [r7, #12]
 8000274:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40023000 	.word	0x40023000
 8000284:	40021000 	.word	0x40021000

08000288 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b08a      	sub	sp, #40	; 0x28
 800028c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800029c:	4b3e      	ldr	r3, [pc, #248]	; (8000398 <MX_GPIO_Init+0x110>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a3d      	ldr	r2, [pc, #244]	; (8000398 <MX_GPIO_Init+0x110>)
 80002a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b3b      	ldr	r3, [pc, #236]	; (8000398 <MX_GPIO_Init+0x110>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002b0:	617b      	str	r3, [r7, #20]
 80002b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b4:	4b38      	ldr	r3, [pc, #224]	; (8000398 <MX_GPIO_Init+0x110>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a37      	ldr	r2, [pc, #220]	; (8000398 <MX_GPIO_Init+0x110>)
 80002ba:	f043 0310 	orr.w	r3, r3, #16
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b35      	ldr	r3, [pc, #212]	; (8000398 <MX_GPIO_Init+0x110>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0310 	and.w	r3, r3, #16
 80002c8:	613b      	str	r3, [r7, #16]
 80002ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	4b32      	ldr	r3, [pc, #200]	; (8000398 <MX_GPIO_Init+0x110>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a31      	ldr	r2, [pc, #196]	; (8000398 <MX_GPIO_Init+0x110>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <MX_GPIO_Init+0x110>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0304 	and.w	r3, r3, #4
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e4:	4b2c      	ldr	r3, [pc, #176]	; (8000398 <MX_GPIO_Init+0x110>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a2b      	ldr	r2, [pc, #172]	; (8000398 <MX_GPIO_Init+0x110>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b29      	ldr	r3, [pc, #164]	; (8000398 <MX_GPIO_Init+0x110>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b26      	ldr	r3, [pc, #152]	; (8000398 <MX_GPIO_Init+0x110>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a25      	ldr	r2, [pc, #148]	; (8000398 <MX_GPIO_Init+0x110>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <MX_GPIO_Init+0x110>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2120      	movs	r1, #32
 8000318:	4820      	ldr	r0, [pc, #128]	; (800039c <MX_GPIO_Init+0x114>)
 800031a:	f001 fb8a 	bl	8001a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800031e:	2201      	movs	r2, #1
 8000320:	2120      	movs	r1, #32
 8000322:	481f      	ldr	r0, [pc, #124]	; (80003a0 <MX_GPIO_Init+0x118>)
 8000324:	f001 fb85 	bl	8001a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8000328:	2318      	movs	r3, #24
 800032a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800032c:	2300      	movs	r3, #0
 800032e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000330:	2301      	movs	r3, #1
 8000332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000334:	f107 0318 	add.w	r3, r7, #24
 8000338:	4619      	mov	r1, r3
 800033a:	4818      	ldr	r0, [pc, #96]	; (800039c <MX_GPIO_Init+0x114>)
 800033c:	f001 f9ce 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000340:	2320      	movs	r3, #32
 8000342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000348:	2301      	movs	r3, #1
 800034a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2302      	movs	r3, #2
 800034e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0318 	add.w	r3, r7, #24
 8000354:	4619      	mov	r1, r3
 8000356:	4811      	ldr	r0, [pc, #68]	; (800039c <MX_GPIO_Init+0x114>)
 8000358:	f001 f9c0 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Key_y1_Pin|Key_y2_Pin|Key_y3_Pin|Key_y4_Pin
 800035c:	23ff      	movs	r3, #255	; 0xff
 800035e:	61bb      	str	r3, [r7, #24]
                          |Key_x1_Pin|Key_x2_Pin|Key_x3_Pin|Key_x4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000360:	2300      	movs	r3, #0
 8000362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000368:	f107 0318 	add.w	r3, r7, #24
 800036c:	4619      	mov	r1, r3
 800036e:	480d      	ldr	r0, [pc, #52]	; (80003a4 <MX_GPIO_Init+0x11c>)
 8000370:	f001 f9b4 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000374:	2320      	movs	r3, #32
 8000376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000378:	2301      	movs	r3, #1
 800037a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800037c:	2301      	movs	r3, #1
 800037e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000380:	2302      	movs	r3, #2
 8000382:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000384:	f107 0318 	add.w	r3, r7, #24
 8000388:	4619      	mov	r1, r3
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_GPIO_Init+0x118>)
 800038c:	f001 f9a6 	bl	80016dc <HAL_GPIO_Init>

}
 8000390:	bf00      	nop
 8000392:	3728      	adds	r7, #40	; 0x28
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40021000 	.word	0x40021000
 800039c:	40011800 	.word	0x40011800
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	40011400 	.word	0x40011400

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 fede 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f824 	bl	80003fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f7ff ff68 	bl	8000288 <MX_GPIO_Init>
  MX_CRC_Init();
 80003b8:	f7ff ff34 	bl	8000224 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80003bc:	f000 f99c 	bl	80006f8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80003c0:	f000 fa50 	bl	8000864 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80003c4:	2120      	movs	r1, #32
 80003c6:	480a      	ldr	r0, [pc, #40]	; (80003f0 <main+0x48>)
 80003c8:	f001 fb4b 	bl	8001a62 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80003cc:	2120      	movs	r1, #32
 80003ce:	4809      	ldr	r0, [pc, #36]	; (80003f4 <main+0x4c>)
 80003d0:	f001 fb47 	bl	8001a62 <HAL_GPIO_TogglePin>
  HAL_Delay(5000);
 80003d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80003d8:	f000 ff2a 	bl	8001230 <HAL_Delay>

  Multi_Timer_Init();
 80003dc:	f007 fbe6 	bl	8007bac <Multi_Timer_Init>
  Multi_Button_Init();
 80003e0:	f007 fc24 	bl	8007c2c <Multi_Button_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("start\r\n");
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <main+0x50>)
 80003e6:	f008 f815 	bl	8008414 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  timer_loop();
 80003ea:	f007 ff25 	bl	8008238 <timer_loop>
 80003ee:	e7fc      	b.n	80003ea <main+0x42>
 80003f0:	40010c00 	.word	0x40010c00
 80003f4:	40011800 	.word	0x40011800
 80003f8:	08008cd4 	.word	0x08008cd4

080003fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b096      	sub	sp, #88	; 0x58
 8000400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000402:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000406:	2228      	movs	r2, #40	; 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f007 ff8c 	bl	8008328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000410:	f107 031c 	add.w	r3, r7, #28
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]
 800042e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000430:	2301      	movs	r3, #1
 8000432:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000438:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043e:	2301      	movs	r3, #1
 8000440:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000450:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000456:	4618      	mov	r0, r3
 8000458:	f002 feae 	bl	80031b8 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000462:	f000 f827 	bl	80004b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046a:	2302      	movs	r3, #2
 800046c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047c:	f107 031c 	add.w	r3, r7, #28
 8000480:	2102      	movs	r1, #2
 8000482:	4618      	mov	r0, r3
 8000484:	f003 f918 	bl	80036b8 <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800048e:	f000 f811 	bl	80004b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000492:	2310      	movs	r3, #16
 8000494:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4618      	mov	r0, r3
 800049e:	f003 faa5 	bl	80039ec <HAL_RCCEx_PeriphCLKConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80004a8:	f000 f804 	bl	80004b4 <Error_Handler>
  }
}
 80004ac:	bf00      	nop
 80004ae:	3758      	adds	r7, #88	; 0x58
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	e7fe      	b.n	80004bc <Error_Handler+0x8>
	...

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a14      	ldr	r2, [pc, #80]	; (800051c <HAL_MspInit+0x5c>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <HAL_MspInit+0x5c>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <HAL_MspInit+0x60>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_MspInit+0x60>)
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000
 8000520:	40010000 	.word	0x40010000

08000524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <NMI_Handler+0x4>

0800052a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <HardFault_Handler+0x4>

08000530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <MemManage_Handler+0x4>

08000536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <BusFault_Handler+0x4>

0800053c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <UsageFault_Handler+0x4>

08000542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr

08000566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056a:	f000 fe45 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_Handler_Callback();
 800056e:	f007 faff 	bl	8007b70 <SysTick_Handler_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800057e:	f001 fbba 	bl	8001cf6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20001140 	.word	0x20001140

0800058c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000592:	f001 fbb0 	bl	8001cf6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20001140 	.word	0x20001140

080005a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <USART1_IRQHandler+0x14>)
 80005a6:	f003 fbb7 	bl	8003d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  SysTick_Handler_Callback();
 80005aa:	f007 fae1 	bl	8007b70 <SysTick_Handler_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000046c 	.word	0x2000046c

080005b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	e00a      	b.n	80005e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ca:	f3af 8000 	nop.w
 80005ce:	4601      	mov	r1, r0
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	60ba      	str	r2, [r7, #8]
 80005d6:	b2ca      	uxtb	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf0      	blt.n	80005ca <_read+0x12>
	}

return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e009      	b.n	8000618 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	60ba      	str	r2, [r7, #8]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f8f1 	bl	80007f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbf1      	blt.n	8000604 <_write+0x12>
	}
	return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_close>:

int _close(int file)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	return -1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000650:	605a      	str	r2, [r3, #4]
	return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <_isatty>:

int _isatty(int file)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
	return 1;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000672:	b480      	push	{r7}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
	return 0;
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
	...

0800068c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <_sbrk+0x5c>)
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <_sbrk+0x60>)
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d102      	bne.n	80006ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <_sbrk+0x64>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <_sbrk+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <_sbrk+0x64>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d207      	bcs.n	80006cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006bc:	f007 fe0a 	bl	80082d4 <__errno>
 80006c0:	4603      	mov	r3, r0
 80006c2:	220c      	movs	r2, #12
 80006c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	e009      	b.n	80006e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <_sbrk+0x64>)
 80006dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20010000 	.word	0x20010000
 80006ec:	00000400 	.word	0x00000400
 80006f0:	200001fc 	.word	0x200001fc
 80006f4:	200014b0 	.word	0x200014b0

080006f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_USART1_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000730:	f003 fa12 	bl	8003b58 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f7ff febb 	bl	80004b4 <Error_Handler>
  }

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000046c 	.word	0x2000046c
 8000748:	40013800 	.word	0x40013800

0800074c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <HAL_UART_MspInit+0x9c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d139      	bne.n	80007e0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <HAL_UART_MspInit+0xa0>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <HAL_UART_MspInit+0xa0>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_UART_MspInit+0xa0>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_UART_MspInit+0xa0>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a18      	ldr	r2, [pc, #96]	; (80007ec <HAL_UART_MspInit+0xa0>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <HAL_UART_MspInit+0xa0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800079c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	4619      	mov	r1, r3
 80007b0:	480f      	ldr	r0, [pc, #60]	; (80007f0 <HAL_UART_MspInit+0xa4>)
 80007b2:	f000 ff93 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_UART_MspInit+0xa4>)
 80007cc:	f000 ff86 	bl	80016dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2025      	movs	r0, #37	; 0x25
 80007d6:	f000 fe26 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007da:	2025      	movs	r0, #37	; 0x25
 80007dc:	f000 fe3f 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40013800 	.word	0x40013800
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40010800 	.word	0x40010800

080007f4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 80007fc:	1d39      	adds	r1, r7, #4
 80007fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000802:	2201      	movs	r2, #1
 8000804:	4803      	ldr	r0, [pc, #12]	; (8000814 <__io_putchar+0x20>)
 8000806:	f003 f9f4 	bl	8003bf2 <HAL_UART_Transmit>
	return ch;
 800080a:	687b      	ldr	r3, [r7, #4]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000046c 	.word	0x2000046c

08000818 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000818:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800081a:	e003      	b.n	8000824 <LoopCopyDataInit>

0800081c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800081e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000820:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000822:	3104      	adds	r1, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000824:	480a      	ldr	r0, [pc, #40]	; (8000850 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000828:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800082c:	d3f6      	bcc.n	800081c <CopyDataInit>
  ldr r2, =_sbss
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000830:	e002      	b.n	8000838 <LoopFillZerobss>

08000832 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000834:	f842 3b04 	str.w	r3, [r2], #4

08000838 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800083c:	d3f9      	bcc.n	8000832 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800083e:	f000 fc8f 	bl	8001160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f007 fd4d 	bl	80082e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fdaf 	bl	80003a8 <main>
  bx lr
 800084a:	4770      	bx	lr
  ldr r3, =_sidata
 800084c:	08008df8 	.word	0x08008df8
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000854:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000858:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 800085c:	200014ac 	.word	0x200014ac

08000860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_2_IRQHandler>
	...

08000864 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000868:	2200      	movs	r2, #0
 800086a:	4912      	ldr	r1, [pc, #72]	; (80008b4 <MX_USB_DEVICE_Init+0x50>)
 800086c:	4812      	ldr	r0, [pc, #72]	; (80008b8 <MX_USB_DEVICE_Init+0x54>)
 800086e:	f006 f8b9 	bl	80069e4 <USBD_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000878:	f7ff fe1c 	bl	80004b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800087c:	490f      	ldr	r1, [pc, #60]	; (80008bc <MX_USB_DEVICE_Init+0x58>)
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_USB_DEVICE_Init+0x54>)
 8000880:	f006 f8db 	bl	8006a3a <USBD_RegisterClass>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800088a:	f7ff fe13 	bl	80004b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800088e:	490c      	ldr	r1, [pc, #48]	; (80008c0 <MX_USB_DEVICE_Init+0x5c>)
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MX_USB_DEVICE_Init+0x54>)
 8000892:	f006 f83b 	bl	800690c <USBD_CDC_RegisterInterface>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800089c:	f7ff fe0a 	bl	80004b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USB_DEVICE_Init+0x54>)
 80008a2:	f006 f8e3 	bl	8006a6c <USBD_Start>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80008ac:	f7ff fe02 	bl	80004b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000010 	.word	0x20000010
 80008b8:	200004ac 	.word	0x200004ac
 80008bc:	20000078 	.word	0x20000078
 80008c0:	20000000 	.word	0x20000000

080008c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	4905      	ldr	r1, [pc, #20]	; (80008e0 <CDC_Init_FS+0x1c>)
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <CDC_Init_FS+0x20>)
 80008ce:	f006 f833 	bl	8006938 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80008d2:	4905      	ldr	r1, [pc, #20]	; (80008e8 <CDC_Init_FS+0x24>)
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <CDC_Init_FS+0x20>)
 80008d6:	f006 f848 	bl	800696a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80008da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80008dc:	4618      	mov	r0, r3
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000b58 	.word	0x20000b58
 80008e4:	200004ac 	.word	0x200004ac
 80008e8:	20000770 	.word	0x20000770

080008ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80008f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
	...

080008fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	4613      	mov	r3, r2
 800090a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b23      	cmp	r3, #35	; 0x23
 8000910:	d84a      	bhi.n	80009a8 <CDC_Control_FS+0xac>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <CDC_Control_FS+0x1c>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	080009a9 	.word	0x080009a9
 800091c:	080009a9 	.word	0x080009a9
 8000920:	080009a9 	.word	0x080009a9
 8000924:	080009a9 	.word	0x080009a9
 8000928:	080009a9 	.word	0x080009a9
 800092c:	080009a9 	.word	0x080009a9
 8000930:	080009a9 	.word	0x080009a9
 8000934:	080009a9 	.word	0x080009a9
 8000938:	080009a9 	.word	0x080009a9
 800093c:	080009a9 	.word	0x080009a9
 8000940:	080009a9 	.word	0x080009a9
 8000944:	080009a9 	.word	0x080009a9
 8000948:	080009a9 	.word	0x080009a9
 800094c:	080009a9 	.word	0x080009a9
 8000950:	080009a9 	.word	0x080009a9
 8000954:	080009a9 	.word	0x080009a9
 8000958:	080009a9 	.word	0x080009a9
 800095c:	080009a9 	.word	0x080009a9
 8000960:	080009a9 	.word	0x080009a9
 8000964:	080009a9 	.word	0x080009a9
 8000968:	080009a9 	.word	0x080009a9
 800096c:	080009a9 	.word	0x080009a9
 8000970:	080009a9 	.word	0x080009a9
 8000974:	080009a9 	.word	0x080009a9
 8000978:	080009a9 	.word	0x080009a9
 800097c:	080009a9 	.word	0x080009a9
 8000980:	080009a9 	.word	0x080009a9
 8000984:	080009a9 	.word	0x080009a9
 8000988:	080009a9 	.word	0x080009a9
 800098c:	080009a9 	.word	0x080009a9
 8000990:	080009a9 	.word	0x080009a9
 8000994:	080009a9 	.word	0x080009a9
 8000998:	080009a9 	.word	0x080009a9
 800099c:	080009a9 	.word	0x080009a9
 80009a0:	080009a9 	.word	0x080009a9
 80009a4:	080009a9 	.word	0x080009a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80009a8:	bf00      	nop
  }

  return (USBD_OK);
 80009aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <CDC_Receive_FS+0x24>)
 80009c6:	f005 ffd0 	bl	800696a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <CDC_Receive_FS+0x24>)
 80009cc:	f005 ffe0 	bl	8006990 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80009d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200004ac 	.word	0x200004ac

080009e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2212      	movs	r2, #18
 80009f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80009f2:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <USBD_FS_DeviceDescriptor+0x20>)
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	2000002c 	.word	0x2000002c

08000a04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2204      	movs	r2, #4
 8000a14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8000a16:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000040 	.word	0x20000040

08000a28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d105      	bne.n	8000a46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	4907      	ldr	r1, [pc, #28]	; (8000a5c <USBD_FS_ProductStrDescriptor+0x34>)
 8000a3e:	4808      	ldr	r0, [pc, #32]	; (8000a60 <USBD_FS_ProductStrDescriptor+0x38>)
 8000a40:	f006 ff8c 	bl	800795c <USBD_GetString>
 8000a44:	e004      	b.n	8000a50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	4904      	ldr	r1, [pc, #16]	; (8000a5c <USBD_FS_ProductStrDescriptor+0x34>)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <USBD_FS_ProductStrDescriptor+0x38>)
 8000a4c:	f006 ff86 	bl	800795c <USBD_GetString>
  }
  return USBD_StrDesc;
 8000a50:	4b02      	ldr	r3, [pc, #8]	; (8000a5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000f40 	.word	0x20000f40
 8000a60:	08008cdc 	.word	0x08008cdc

08000a64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	4904      	ldr	r1, [pc, #16]	; (8000a84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8000a76:	f006 ff71 	bl	800795c <USBD_GetString>
  return USBD_StrDesc;
 8000a7a:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000f40 	.word	0x20000f40
 8000a88:	08008cf4 	.word	0x08008cf4

08000a8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	221a      	movs	r2, #26
 8000a9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000a9e:	f000 f843 	bl	8000b28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8000aa2:	4b02      	ldr	r3, [pc, #8]	; (8000aac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000044 	.word	0x20000044

08000ab0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d105      	bne.n	8000ace <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000ac6:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8000ac8:	f006 ff48 	bl	800795c <USBD_GetString>
 8000acc:	e004      	b.n	8000ad8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	4904      	ldr	r1, [pc, #16]	; (8000ae4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8000ad4:	f006 ff42 	bl	800795c <USBD_GetString>
  }
  return USBD_StrDesc;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000f40 	.word	0x20000f40
 8000ae8:	08008d08 	.word	0x08008d08

08000aec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d105      	bne.n	8000b0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000b02:	4808      	ldr	r0, [pc, #32]	; (8000b24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000b04:	f006 ff2a 	bl	800795c <USBD_GetString>
 8000b08:	e004      	b.n	8000b14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	4904      	ldr	r1, [pc, #16]	; (8000b20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000b10:	f006 ff24 	bl	800795c <USBD_GetString>
  }
  return USBD_StrDesc;
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000f40 	.word	0x20000f40
 8000b24:	08008d14 	.word	0x08008d14

08000b28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <Get_SerialNum+0x44>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <Get_SerialNum+0x48>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <Get_SerialNum+0x4c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d009      	beq.n	8000b62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000b4e:	2208      	movs	r2, #8
 8000b50:	4909      	ldr	r1, [pc, #36]	; (8000b78 <Get_SerialNum+0x50>)
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f000 f814 	bl	8000b80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000b58:	2204      	movs	r2, #4
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <Get_SerialNum+0x54>)
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f000 f80f 	bl	8000b80 <IntToUnicode>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	1ffff7e8 	.word	0x1ffff7e8
 8000b70:	1ffff7ec 	.word	0x1ffff7ec
 8000b74:	1ffff7f0 	.word	0x1ffff7f0
 8000b78:	20000046 	.word	0x20000046
 8000b7c:	20000056 	.word	0x20000056

08000b80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	75fb      	strb	r3, [r7, #23]
 8000b96:	e027      	b.n	8000be8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	0f1b      	lsrs	r3, r3, #28
 8000b9c:	2b09      	cmp	r3, #9
 8000b9e:	d80b      	bhi.n	8000bb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	0f1b      	lsrs	r3, r3, #28
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4619      	mov	r1, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	440b      	add	r3, r1
 8000bb0:	3230      	adds	r2, #48	; 0x30
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e00a      	b.n	8000bce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	0f1b      	lsrs	r3, r3, #28
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	440b      	add	r3, r1
 8000bc8:	3237      	adds	r2, #55	; 0x37
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	3301      	adds	r3, #1
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	4413      	add	r3, r2
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
 8000be4:	3301      	adds	r3, #1
 8000be6:	75fb      	strb	r3, [r7, #23]
 8000be8:	7dfa      	ldrb	r2, [r7, #23]
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d3d3      	bcc.n	8000b98 <IntToUnicode+0x18>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a11      	ldr	r2, [pc, #68]	; (8000c50 <HAL_PCD_MspInit+0x54>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d11b      	bne.n	8000c46 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_PCD_MspInit+0x58>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_PCD_MspInit+0x58>)
 8000c14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_PCD_MspInit+0x58>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2013      	movs	r0, #19
 8000c2c:	f000 fbfb 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000c30:	2013      	movs	r0, #19
 8000c32:	f000 fc14 	bl	800145e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2014      	movs	r0, #20
 8000c3c:	f000 fbf3 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000c40:	2014      	movs	r0, #20
 8000c42:	f000 fc0c 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40005c00 	.word	0x40005c00
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4610      	mov	r0, r2
 8000c70:	f005 ff44 	bl	8006afc <USBD_LL_SetupStage>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f005 ff76 	bl	8006b96 <USBD_LL_DataOutStage>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8000cc4:	78fa      	ldrb	r2, [r7, #3]
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	440b      	add	r3, r1
 8000cd2:	333c      	adds	r3, #60	; 0x3c
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f005 ffcd 	bl	8006c78 <USBD_LL_DataInStage>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f006 f8dd 	bl	8006eb4 <USBD_LL_SOF>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d001      	beq.n	8000d1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8000d16:	f7ff fbcd 	bl	80004b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8000d20:	7bfa      	ldrb	r2, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f006 f88d 	bl	8006e44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8000d30:	4618      	mov	r0, r3
 8000d32:	f006 f846 	bl	8006dc2 <USBD_LL_Reset>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f006 f887 	bl	8006e62 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d005      	beq.n	8000d68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_PCD_SuspendCallback+0x30>)
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <HAL_PCD_SuspendCallback+0x30>)
 8000d62:	f043 0306 	orr.w	r3, r3, #6
 8000d66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8000d82:	4618      	mov	r0, r3
 8000d84:	f006 f881 	bl	8006e8a <USBD_LL_Resume>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8000d98:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <USBD_LL_Init+0xac>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a26      	ldr	r2, [pc, #152]	; (8000e3c <USBD_LL_Init+0xac>)
 8000da4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <USBD_LL_Init+0xac>)
 8000daa:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <USBD_LL_Init+0xb0>)
 8000dac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000dae:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <USBD_LL_Init+0xac>)
 8000db0:	2208      	movs	r2, #8
 8000db2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <USBD_LL_Init+0xac>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <USBD_LL_Init+0xac>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <USBD_LL_Init+0xac>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <USBD_LL_Init+0xac>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <USBD_LL_Init+0xac>)
 8000dce:	f000 fe61 	bl	8001a94 <HAL_PCD_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8000dd8:	f7ff fb6c 	bl	80004b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000de2:	2318      	movs	r3, #24
 8000de4:	2200      	movs	r2, #0
 8000de6:	2100      	movs	r1, #0
 8000de8:	f002 f9a3 	bl	8003132 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000df2:	2358      	movs	r3, #88	; 0x58
 8000df4:	2200      	movs	r2, #0
 8000df6:	2180      	movs	r1, #128	; 0x80
 8000df8:	f002 f99b 	bl	8003132 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000e02:	23c0      	movs	r3, #192	; 0xc0
 8000e04:	2200      	movs	r2, #0
 8000e06:	2181      	movs	r1, #129	; 0x81
 8000e08:	f002 f993 	bl	8003132 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000e12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000e16:	2200      	movs	r2, #0
 8000e18:	2101      	movs	r1, #1
 8000e1a:	f002 f98a 	bl	8003132 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2182      	movs	r1, #130	; 0x82
 8000e2c:	f002 f981 	bl	8003132 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20001140 	.word	0x20001140
 8000e40:	40005c00 	.word	0x40005c00

08000e44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 ff25 	bl	8001caa <HAL_PCD_Start>
 8000e60:	4603      	mov	r3, r0
 8000e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f94e 	bl	8001108 <USBD_Get_USB_Status>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8000e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	4608      	mov	r0, r1
 8000e84:	4611      	mov	r1, r2
 8000e86:	461a      	mov	r2, r3
 8000e88:	4603      	mov	r3, r0
 8000e8a:	70fb      	strb	r3, [r7, #3]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70bb      	strb	r3, [r7, #2]
 8000e90:	4613      	mov	r3, r2
 8000e92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8000ea2:	78bb      	ldrb	r3, [r7, #2]
 8000ea4:	883a      	ldrh	r2, [r7, #0]
 8000ea6:	78f9      	ldrb	r1, [r7, #3]
 8000ea8:	f001 f89f 	bl	8001fea <HAL_PCD_EP_Open>
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f928 	bl	8001108 <USBD_Get_USB_Status>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8000ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000ee0:	78fa      	ldrb	r2, [r7, #3]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 f8e6 	bl	80020b6 <HAL_PCD_EP_Close>
 8000eea:	4603      	mov	r3, r0
 8000eec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f909 	bl	8001108 <USBD_Get_USB_Status>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8000efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000f1e:	78fa      	ldrb	r2, [r7, #3]
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 f9a6 	bl	8002274 <HAL_PCD_EP_SetStall>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f8ea 	bl	8001108 <USBD_Get_USB_Status>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000f5c:	78fa      	ldrb	r2, [r7, #3]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 f9e7 	bl	8002334 <HAL_PCD_EP_ClrStall>
 8000f66:	4603      	mov	r3, r0
 8000f68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f8cb 	bl	8001108 <USBD_Get_USB_Status>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000f92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8000f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da0c      	bge.n	8000fb6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fa2:	68f9      	ldr	r1, [r7, #12]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	440b      	add	r3, r1
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	e00b      	b.n	8000fce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000fbc:	68f9      	ldr	r1, [r7, #12]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8000fcc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8000ff2:	78fa      	ldrb	r2, [r7, #3]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 ffd2 	bl	8001fa0 <HAL_PCD_SetAddress>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f880 	bl	8001108 <USBD_Get_USB_Status>
 8001008:	4603      	mov	r3, r0
 800100a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800100c:	7bbb      	ldrb	r3, [r7, #14]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	461a      	mov	r2, r3
 8001022:	460b      	mov	r3, r1
 8001024:	72fb      	strb	r3, [r7, #11]
 8001026:	4613      	mov	r3, r2
 8001028:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8001038:	893b      	ldrh	r3, [r7, #8]
 800103a:	7af9      	ldrb	r1, [r7, #11]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	f001 f8d6 	bl	80021ee <HAL_PCD_EP_Transmit>
 8001042:	4603      	mov	r3, r0
 8001044:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f85d 	bl	8001108 <USBD_Get_USB_Status>
 800104e:	4603      	mov	r3, r0
 8001050:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001052:	7dbb      	ldrb	r3, [r7, #22]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	461a      	mov	r2, r3
 8001068:	460b      	mov	r3, r1
 800106a:	72fb      	strb	r3, [r7, #11]
 800106c:	4613      	mov	r3, r2
 800106e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800107e:	893b      	ldrh	r3, [r7, #8]
 8001080:	7af9      	ldrb	r1, [r7, #11]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	f001 f85f 	bl	8002146 <HAL_PCD_EP_Receive>
 8001088:	4603      	mov	r3, r0
 800108a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f83a 	bl	8001108 <USBD_Get_USB_Status>
 8001094:	4603      	mov	r3, r0
 8001096:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001098:	7dbb      	ldrb	r3, [r7, #22]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80010b4:	78fa      	ldrb	r2, [r7, #3]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 f881 	bl	80021c0 <HAL_PCD_EP_GetRxCount>
 80010be:	4603      	mov	r3, r0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80010d0:	4b02      	ldr	r3, [pc, #8]	; (80010dc <USBD_static_malloc+0x14>)
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	20000200 	.word	0x20000200

080010e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b03      	cmp	r3, #3
 800111a:	d817      	bhi.n	800114c <USBD_Get_USB_Status+0x44>
 800111c:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <USBD_Get_USB_Status+0x1c>)
 800111e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001122:	bf00      	nop
 8001124:	08001135 	.word	0x08001135
 8001128:	0800113b 	.word	0x0800113b
 800112c:	08001141 	.word	0x08001141
 8001130:	08001147 	.word	0x08001147
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]
    break;
 8001138:	e00b      	b.n	8001152 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800113a:	2302      	movs	r3, #2
 800113c:	73fb      	strb	r3, [r7, #15]
    break;
 800113e:	e008      	b.n	8001152 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
    break;
 8001144:	e005      	b.n	8001152 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001146:	2302      	movs	r3, #2
 8001148:	73fb      	strb	r3, [r7, #15]
    break;
 800114a:	e002      	b.n	8001152 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800114c:	2302      	movs	r3, #2
 800114e:	73fb      	strb	r3, [r7, #15]
    break;
 8001150:	bf00      	nop
  }
  return usb_status;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop

08001160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x28>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f947 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff f99a 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f95f 	bl	800147a <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f927 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000060 	.word	0x20000060
 80011f0:	20000068 	.word	0x20000068
 80011f4:	20000064 	.word	0x20000064

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x1c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x20>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a03      	ldr	r2, [pc, #12]	; (8001218 <HAL_IncTick+0x20>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000068 	.word	0x20000068
 8001218:	2000142c 	.word	0x2000142c

0800121c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <HAL_GetTick+0x10>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	2000142c 	.word	0x2000142c

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff fff0 	bl	800121c <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffe0 	bl	800121c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000068 	.word	0x20000068

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4906      	ldr	r1, [pc, #24]	; (8001310 <__NVIC_EnableIRQ+0x34>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff90 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff2d 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff42 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff90 	bl	8001368 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5f 	bl	8001314 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff35 	bl	80012dc <__NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ffa2 	bl	80013cc <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e00e      	b.n	80014c2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	795b      	ldrb	r3, [r3, #5]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7fe fec9 	bl	800024c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d005      	beq.n	80014ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2204      	movs	r2, #4
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e0d6      	b.n	800169c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 020e 	bic.w	r2, r2, #14
 80014fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <HAL_DMA_Abort_IT+0x1dc>)
 8001516:	429a      	cmp	r2, r3
 8001518:	d958      	bls.n	80015cc <HAL_DMA_Abort_IT+0x100>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a63      	ldr	r2, [pc, #396]	; (80016ac <HAL_DMA_Abort_IT+0x1e0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d04f      	beq.n	80015c4 <HAL_DMA_Abort_IT+0xf8>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a61      	ldr	r2, [pc, #388]	; (80016b0 <HAL_DMA_Abort_IT+0x1e4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d048      	beq.n	80015c0 <HAL_DMA_Abort_IT+0xf4>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a60      	ldr	r2, [pc, #384]	; (80016b4 <HAL_DMA_Abort_IT+0x1e8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d040      	beq.n	80015ba <HAL_DMA_Abort_IT+0xee>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a5e      	ldr	r2, [pc, #376]	; (80016b8 <HAL_DMA_Abort_IT+0x1ec>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d038      	beq.n	80015b4 <HAL_DMA_Abort_IT+0xe8>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a5d      	ldr	r2, [pc, #372]	; (80016bc <HAL_DMA_Abort_IT+0x1f0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d030      	beq.n	80015ae <HAL_DMA_Abort_IT+0xe2>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a5b      	ldr	r2, [pc, #364]	; (80016c0 <HAL_DMA_Abort_IT+0x1f4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d028      	beq.n	80015a8 <HAL_DMA_Abort_IT+0xdc>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a53      	ldr	r2, [pc, #332]	; (80016a8 <HAL_DMA_Abort_IT+0x1dc>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d020      	beq.n	80015a2 <HAL_DMA_Abort_IT+0xd6>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a57      	ldr	r2, [pc, #348]	; (80016c4 <HAL_DMA_Abort_IT+0x1f8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d019      	beq.n	800159e <HAL_DMA_Abort_IT+0xd2>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a56      	ldr	r2, [pc, #344]	; (80016c8 <HAL_DMA_Abort_IT+0x1fc>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d012      	beq.n	800159a <HAL_DMA_Abort_IT+0xce>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a54      	ldr	r2, [pc, #336]	; (80016cc <HAL_DMA_Abort_IT+0x200>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00a      	beq.n	8001594 <HAL_DMA_Abort_IT+0xc8>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a53      	ldr	r2, [pc, #332]	; (80016d0 <HAL_DMA_Abort_IT+0x204>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d102      	bne.n	800158e <HAL_DMA_Abort_IT+0xc2>
 8001588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158c:	e01b      	b.n	80015c6 <HAL_DMA_Abort_IT+0xfa>
 800158e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001592:	e018      	b.n	80015c6 <HAL_DMA_Abort_IT+0xfa>
 8001594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001598:	e015      	b.n	80015c6 <HAL_DMA_Abort_IT+0xfa>
 800159a:	2310      	movs	r3, #16
 800159c:	e013      	b.n	80015c6 <HAL_DMA_Abort_IT+0xfa>
 800159e:	2301      	movs	r3, #1
 80015a0:	e011      	b.n	80015c6 <HAL_DMA_Abort_IT+0xfa>
 80015a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015a6:	e00e      	b.n	80015c6 <HAL_DMA_Abort_IT+0xfa>
 80015a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015ac:	e00b      	b.n	80015c6 <HAL_DMA_Abort_IT+0xfa>
 80015ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b2:	e008      	b.n	80015c6 <HAL_DMA_Abort_IT+0xfa>
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	e005      	b.n	80015c6 <HAL_DMA_Abort_IT+0xfa>
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	e002      	b.n	80015c6 <HAL_DMA_Abort_IT+0xfa>
 80015c0:	2310      	movs	r3, #16
 80015c2:	e000      	b.n	80015c6 <HAL_DMA_Abort_IT+0xfa>
 80015c4:	2301      	movs	r3, #1
 80015c6:	4a43      	ldr	r2, [pc, #268]	; (80016d4 <HAL_DMA_Abort_IT+0x208>)
 80015c8:	6053      	str	r3, [r2, #4]
 80015ca:	e057      	b.n	800167c <HAL_DMA_Abort_IT+0x1b0>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a36      	ldr	r2, [pc, #216]	; (80016ac <HAL_DMA_Abort_IT+0x1e0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d04f      	beq.n	8001676 <HAL_DMA_Abort_IT+0x1aa>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a35      	ldr	r2, [pc, #212]	; (80016b0 <HAL_DMA_Abort_IT+0x1e4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d048      	beq.n	8001672 <HAL_DMA_Abort_IT+0x1a6>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a33      	ldr	r2, [pc, #204]	; (80016b4 <HAL_DMA_Abort_IT+0x1e8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d040      	beq.n	800166c <HAL_DMA_Abort_IT+0x1a0>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <HAL_DMA_Abort_IT+0x1ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d038      	beq.n	8001666 <HAL_DMA_Abort_IT+0x19a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a30      	ldr	r2, [pc, #192]	; (80016bc <HAL_DMA_Abort_IT+0x1f0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d030      	beq.n	8001660 <HAL_DMA_Abort_IT+0x194>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a2f      	ldr	r2, [pc, #188]	; (80016c0 <HAL_DMA_Abort_IT+0x1f4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d028      	beq.n	800165a <HAL_DMA_Abort_IT+0x18e>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <HAL_DMA_Abort_IT+0x1dc>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d020      	beq.n	8001654 <HAL_DMA_Abort_IT+0x188>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a2b      	ldr	r2, [pc, #172]	; (80016c4 <HAL_DMA_Abort_IT+0x1f8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d019      	beq.n	8001650 <HAL_DMA_Abort_IT+0x184>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a29      	ldr	r2, [pc, #164]	; (80016c8 <HAL_DMA_Abort_IT+0x1fc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d012      	beq.n	800164c <HAL_DMA_Abort_IT+0x180>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a28      	ldr	r2, [pc, #160]	; (80016cc <HAL_DMA_Abort_IT+0x200>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00a      	beq.n	8001646 <HAL_DMA_Abort_IT+0x17a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a26      	ldr	r2, [pc, #152]	; (80016d0 <HAL_DMA_Abort_IT+0x204>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d102      	bne.n	8001640 <HAL_DMA_Abort_IT+0x174>
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	e01b      	b.n	8001678 <HAL_DMA_Abort_IT+0x1ac>
 8001640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001644:	e018      	b.n	8001678 <HAL_DMA_Abort_IT+0x1ac>
 8001646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164a:	e015      	b.n	8001678 <HAL_DMA_Abort_IT+0x1ac>
 800164c:	2310      	movs	r3, #16
 800164e:	e013      	b.n	8001678 <HAL_DMA_Abort_IT+0x1ac>
 8001650:	2301      	movs	r3, #1
 8001652:	e011      	b.n	8001678 <HAL_DMA_Abort_IT+0x1ac>
 8001654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001658:	e00e      	b.n	8001678 <HAL_DMA_Abort_IT+0x1ac>
 800165a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800165e:	e00b      	b.n	8001678 <HAL_DMA_Abort_IT+0x1ac>
 8001660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001664:	e008      	b.n	8001678 <HAL_DMA_Abort_IT+0x1ac>
 8001666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166a:	e005      	b.n	8001678 <HAL_DMA_Abort_IT+0x1ac>
 800166c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001670:	e002      	b.n	8001678 <HAL_DMA_Abort_IT+0x1ac>
 8001672:	2310      	movs	r3, #16
 8001674:	e000      	b.n	8001678 <HAL_DMA_Abort_IT+0x1ac>
 8001676:	2301      	movs	r3, #1
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_DMA_Abort_IT+0x20c>)
 800167a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
    } 
  }
  return status;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40020080 	.word	0x40020080
 80016ac:	40020008 	.word	0x40020008
 80016b0:	4002001c 	.word	0x4002001c
 80016b4:	40020030 	.word	0x40020030
 80016b8:	40020044 	.word	0x40020044
 80016bc:	40020058 	.word	0x40020058
 80016c0:	4002006c 	.word	0x4002006c
 80016c4:	40020408 	.word	0x40020408
 80016c8:	4002041c 	.word	0x4002041c
 80016cc:	40020430 	.word	0x40020430
 80016d0:	40020444 	.word	0x40020444
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40020000 	.word	0x40020000

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b08b      	sub	sp, #44	; 0x2c
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e179      	b.n	80019e4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f0:	2201      	movs	r2, #1
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	429a      	cmp	r2, r3
 800170a:	f040 8168 	bne.w	80019de <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4aa0      	ldr	r2, [pc, #640]	; (8001994 <HAL_GPIO_Init+0x2b8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d05e      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001718:	4a9e      	ldr	r2, [pc, #632]	; (8001994 <HAL_GPIO_Init+0x2b8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d875      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800171e:	4a9e      	ldr	r2, [pc, #632]	; (8001998 <HAL_GPIO_Init+0x2bc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d058      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001724:	4a9c      	ldr	r2, [pc, #624]	; (8001998 <HAL_GPIO_Init+0x2bc>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d86f      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800172a:	4a9c      	ldr	r2, [pc, #624]	; (800199c <HAL_GPIO_Init+0x2c0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d052      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001730:	4a9a      	ldr	r2, [pc, #616]	; (800199c <HAL_GPIO_Init+0x2c0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d869      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001736:	4a9a      	ldr	r2, [pc, #616]	; (80019a0 <HAL_GPIO_Init+0x2c4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d04c      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 800173c:	4a98      	ldr	r2, [pc, #608]	; (80019a0 <HAL_GPIO_Init+0x2c4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d863      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001742:	4a98      	ldr	r2, [pc, #608]	; (80019a4 <HAL_GPIO_Init+0x2c8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d046      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001748:	4a96      	ldr	r2, [pc, #600]	; (80019a4 <HAL_GPIO_Init+0x2c8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d85d      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800174e:	2b12      	cmp	r3, #18
 8001750:	d82a      	bhi.n	80017a8 <HAL_GPIO_Init+0xcc>
 8001752:	2b12      	cmp	r3, #18
 8001754:	d859      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <HAL_GPIO_Init+0x80>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	080017d7 	.word	0x080017d7
 8001760:	080017b1 	.word	0x080017b1
 8001764:	080017c3 	.word	0x080017c3
 8001768:	08001805 	.word	0x08001805
 800176c:	0800180b 	.word	0x0800180b
 8001770:	0800180b 	.word	0x0800180b
 8001774:	0800180b 	.word	0x0800180b
 8001778:	0800180b 	.word	0x0800180b
 800177c:	0800180b 	.word	0x0800180b
 8001780:	0800180b 	.word	0x0800180b
 8001784:	0800180b 	.word	0x0800180b
 8001788:	0800180b 	.word	0x0800180b
 800178c:	0800180b 	.word	0x0800180b
 8001790:	0800180b 	.word	0x0800180b
 8001794:	0800180b 	.word	0x0800180b
 8001798:	0800180b 	.word	0x0800180b
 800179c:	0800180b 	.word	0x0800180b
 80017a0:	080017b9 	.word	0x080017b9
 80017a4:	080017cd 	.word	0x080017cd
 80017a8:	4a7f      	ldr	r2, [pc, #508]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ae:	e02c      	b.n	800180a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	623b      	str	r3, [r7, #32]
          break;
 80017b6:	e029      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	3304      	adds	r3, #4
 80017be:	623b      	str	r3, [r7, #32]
          break;
 80017c0:	e024      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	3308      	adds	r3, #8
 80017c8:	623b      	str	r3, [r7, #32]
          break;
 80017ca:	e01f      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	330c      	adds	r3, #12
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	e01a      	b.n	800180c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017de:	2304      	movs	r3, #4
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e013      	b.n	800180c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ec:	2308      	movs	r3, #8
 80017ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	611a      	str	r2, [r3, #16]
          break;
 80017f6:	e009      	b.n	800180c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f8:	2308      	movs	r3, #8
 80017fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	615a      	str	r2, [r3, #20]
          break;
 8001802:	e003      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
          break;
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x130>
          break;
 800180a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	d801      	bhi.n	8001816 <HAL_GPIO_Init+0x13a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	e001      	b.n	800181a <HAL_GPIO_Init+0x13e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3304      	adds	r3, #4
 800181a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2bff      	cmp	r3, #255	; 0xff
 8001820:	d802      	bhi.n	8001828 <HAL_GPIO_Init+0x14c>
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x152>
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	3b08      	subs	r3, #8
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	210f      	movs	r1, #15
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	401a      	ands	r2, r3
 8001840:	6a39      	ldr	r1, [r7, #32]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	431a      	orrs	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80c1 	beq.w	80019de <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001874:	4a4e      	ldr	r2, [pc, #312]	; (80019b0 <HAL_GPIO_Init+0x2d4>)
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001880:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a46      	ldr	r2, [pc, #280]	; (80019b4 <HAL_GPIO_Init+0x2d8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d01f      	beq.n	80018e0 <HAL_GPIO_Init+0x204>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a45      	ldr	r2, [pc, #276]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d019      	beq.n	80018dc <HAL_GPIO_Init+0x200>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a44      	ldr	r2, [pc, #272]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_GPIO_Init+0x1fc>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a43      	ldr	r2, [pc, #268]	; (80019c0 <HAL_GPIO_Init+0x2e4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00d      	beq.n	80018d4 <HAL_GPIO_Init+0x1f8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a42      	ldr	r2, [pc, #264]	; (80019c4 <HAL_GPIO_Init+0x2e8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x1f4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a41      	ldr	r2, [pc, #260]	; (80019c8 <HAL_GPIO_Init+0x2ec>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_GPIO_Init+0x1f0>
 80018c8:	2305      	movs	r3, #5
 80018ca:	e00a      	b.n	80018e2 <HAL_GPIO_Init+0x206>
 80018cc:	2306      	movs	r3, #6
 80018ce:	e008      	b.n	80018e2 <HAL_GPIO_Init+0x206>
 80018d0:	2304      	movs	r3, #4
 80018d2:	e006      	b.n	80018e2 <HAL_GPIO_Init+0x206>
 80018d4:	2303      	movs	r3, #3
 80018d6:	e004      	b.n	80018e2 <HAL_GPIO_Init+0x206>
 80018d8:	2302      	movs	r3, #2
 80018da:	e002      	b.n	80018e2 <HAL_GPIO_Init+0x206>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_GPIO_Init+0x206>
 80018e0:	2300      	movs	r3, #0
 80018e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e4:	f002 0203 	and.w	r2, r2, #3
 80018e8:	0092      	lsls	r2, r2, #2
 80018ea:	4093      	lsls	r3, r2
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018f2:	492f      	ldr	r1, [pc, #188]	; (80019b0 <HAL_GPIO_Init+0x2d4>)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	492e      	ldr	r1, [pc, #184]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800191a:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	492a      	ldr	r1, [pc, #168]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001924:	4013      	ands	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4924      	ldr	r1, [pc, #144]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	4920      	ldr	r1, [pc, #128]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 800194c:	4013      	ands	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	491a      	ldr	r1, [pc, #104]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	608b      	str	r3, [r1, #8]
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	43db      	mvns	r3, r3
 8001972:	4916      	ldr	r1, [pc, #88]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001974:	4013      	ands	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d025      	beq.n	80019d0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	4910      	ldr	r1, [pc, #64]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	60cb      	str	r3, [r1, #12]
 8001990:	e025      	b.n	80019de <HAL_GPIO_Init+0x302>
 8001992:	bf00      	nop
 8001994:	10320000 	.word	0x10320000
 8001998:	10310000 	.word	0x10310000
 800199c:	10220000 	.word	0x10220000
 80019a0:	10210000 	.word	0x10210000
 80019a4:	10120000 	.word	0x10120000
 80019a8:	10110000 	.word	0x10110000
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010000 	.word	0x40010000
 80019b4:	40010800 	.word	0x40010800
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	40011000 	.word	0x40011000
 80019c0:	40011400 	.word	0x40011400
 80019c4:	40011800 	.word	0x40011800
 80019c8:	40011c00 	.word	0x40011c00
 80019cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_GPIO_Init+0x324>)
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	4909      	ldr	r1, [pc, #36]	; (8001a00 <HAL_GPIO_Init+0x324>)
 80019da:	4013      	ands	r3, r2
 80019dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	3301      	adds	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f47f ae7e 	bne.w	80016f0 <HAL_GPIO_Init+0x14>
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	372c      	adds	r7, #44	; 0x2c
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e001      	b.n	8001a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	807b      	strh	r3, [r7, #2]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a42:	787b      	ldrb	r3, [r7, #1]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a48:	887a      	ldrh	r2, [r7, #2]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a4e:	e003      	b.n	8001a58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	041a      	lsls	r2, r3, #16
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a74:	887a      	ldrh	r2, [r7, #2]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	041a      	lsls	r2, r3, #16
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	400b      	ands	r3, r1
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	611a      	str	r2, [r3, #16]
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a96:	b08b      	sub	sp, #44	; 0x2c
 8001a98:	af06      	add	r7, sp, #24
 8001a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0fd      	b.n	8001ca2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff f89e 	bl	8000bfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fc55 	bl	800437c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	687e      	ldr	r6, [r7, #4]
 8001ada:	466d      	mov	r5, sp
 8001adc:	f106 0410 	add.w	r4, r6, #16
 8001ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	602b      	str	r3, [r5, #0]
 8001ae8:	1d33      	adds	r3, r6, #4
 8001aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aec:	6838      	ldr	r0, [r7, #0]
 8001aee:	f002 fc1f 	bl	8004330 <USB_CoreInit>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0ce      	b.n	8001ca2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fc50 	bl	80043b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e04c      	b.n	8001bb0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	3301      	adds	r3, #1
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	b298      	uxth	r0, r3
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	3336      	adds	r3, #54	; 0x36
 8001b54:	4602      	mov	r2, r0
 8001b56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	3303      	adds	r3, #3
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3338      	adds	r3, #56	; 0x38
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	333c      	adds	r3, #60	; 0x3c
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3340      	adds	r3, #64	; 0x40
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	3301      	adds	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3ad      	bcc.n	8001b16 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e044      	b.n	8001c4a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bd6:	7bfa      	ldrb	r2, [r7, #15]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	3301      	adds	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d3b5      	bcc.n	8001bc0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	687e      	ldr	r6, [r7, #4]
 8001c5c:	466d      	mov	r5, sp
 8001c5e:	f106 0410 	add.w	r4, r6, #16
 8001c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	602b      	str	r3, [r5, #0]
 8001c6a:	1d33      	adds	r3, r6, #4
 8001c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c6e:	6838      	ldr	r0, [r7, #0]
 8001c70:	f002 fbaa 	bl	80043c8 <USB_DevInit>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00d      	b.n	8001ca2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 fb44 	bl	8006328 <USB_DevDisconnect>

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001caa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_PCD_Start+0x16>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e016      	b.n	8001cee <HAL_PCD_Start+0x44>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fb3f 	bl	8004350 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fa0c 	bl	80010f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fb18 	bl	8006314 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b088      	sub	sp, #32
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 fb1a 	bl	800633c <USB_ReadInterrupts>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d12:	d102      	bne.n	8001d1a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fb61 	bl	80023dc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 fb0c 	bl	800633c <USB_ReadInterrupts>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2e:	d112      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d42:	b292      	uxth	r2, r2
 8001d44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe ffda 	bl	8000d02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f925 	bl	8001fa0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 faee 	bl	800633c <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d6a:	d10b      	bne.n	8001d84 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 fad7 	bl	800633c <USB_ReadInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d98:	d10b      	bne.n	8001db2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dac:	b292      	uxth	r2, r2
 8001dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f004 fac0 	bl	800633c <USB_ReadInterrupts>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc6:	d126      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0204 	bic.w	r2, r2, #4
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0208 	bic.w	r2, r2, #8
 8001df2:	b292      	uxth	r2, r2
 8001df4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7fe ffbb 	bl	8000d74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e10:	b292      	uxth	r2, r2
 8001e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 fa8e 	bl	800633c <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e2a:	f040 8084 	bne.w	8001f36 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	77fb      	strb	r3, [r7, #31]
 8001e32:	e011      	b.n	8001e58 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	7ffb      	ldrb	r3, [r7, #31]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	441a      	add	r2, r3
 8001e40:	7ffb      	ldrb	r3, [r7, #31]
 8001e42:	8812      	ldrh	r2, [r2, #0]
 8001e44:	b292      	uxth	r2, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	f107 0120 	add.w	r1, r7, #32
 8001e4c:	440b      	add	r3, r1
 8001e4e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001e52:	7ffb      	ldrb	r3, [r7, #31]
 8001e54:	3301      	adds	r3, #1
 8001e56:	77fb      	strb	r3, [r7, #31]
 8001e58:	7ffb      	ldrb	r3, [r7, #31]
 8001e5a:	2b07      	cmp	r3, #7
 8001e5c:	d9ea      	bls.n	8001e34 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	b292      	uxth	r2, r2
 8001e72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0201 	bic.w	r2, r2, #1
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001e8e:	bf00      	nop
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f6      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	77fb      	strb	r3, [r7, #31]
 8001ebe:	e010      	b.n	8001ee2 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ec0:	7ffb      	ldrb	r3, [r7, #31]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	7ffa      	ldrb	r2, [r7, #31]
 8001eca:	0092      	lsls	r2, r2, #2
 8001ecc:	440a      	add	r2, r1
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	f107 0120 	add.w	r1, r7, #32
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001eda:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001edc:	7ffb      	ldrb	r3, [r7, #31]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	77fb      	strb	r3, [r7, #31]
 8001ee2:	7ffb      	ldrb	r3, [r7, #31]
 8001ee4:	2b07      	cmp	r3, #7
 8001ee6:	d9eb      	bls.n	8001ec0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0208 	orr.w	r2, r2, #8
 8001efa:	b292      	uxth	r2, r2
 8001efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f12:	b292      	uxth	r2, r2
 8001f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0204 	orr.w	r2, r2, #4
 8001f2a:	b292      	uxth	r2, r2
 8001f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7fe ff05 	bl	8000d40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 f9fe 	bl	800633c <USB_ReadInterrupts>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f4a:	d10e      	bne.n	8001f6a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7fe febe 	bl	8000ce6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 f9e4 	bl	800633c <USB_ReadInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f7e:	d10b      	bne.n	8001f98 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f92:	b292      	uxth	r2, r2
 8001f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_PCD_SetAddress+0x1a>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e013      	b.n	8001fe2 <HAL_PCD_SetAddress+0x42>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 f98b 	bl	80062ee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	4608      	mov	r0, r1
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	70fb      	strb	r3, [r7, #3]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	803b      	strh	r3, [r7, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da0e      	bge.n	800202e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	705a      	strb	r2, [r3, #1]
 800202c:	e00e      	b.n	800204c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	f003 0207 	and.w	r2, r3, #7
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	b2da      	uxtb	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002058:	883a      	ldrh	r2, [r7, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	78ba      	ldrb	r2, [r7, #2]
 8002062:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002076:	78bb      	ldrb	r3, [r7, #2]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d102      	bne.n	8002082 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_PCD_EP_Open+0xa6>
 800208c:	2302      	movs	r3, #2
 800208e:	e00e      	b.n	80020ae <HAL_PCD_EP_Open+0xc4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68f9      	ldr	r1, [r7, #12]
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 f9b2 	bl	8004408 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020ac:	7afb      	ldrb	r3, [r7, #11]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	da0e      	bge.n	80020e8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	705a      	strb	r2, [r3, #1]
 80020e6:	e00e      	b.n	8002106 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	f003 0207 	and.w	r2, r3, #7
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	b2da      	uxtb	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_PCD_EP_Close+0x6a>
 800211c:	2302      	movs	r3, #2
 800211e:	e00e      	b.n	800213e <HAL_PCD_EP_Close+0x88>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68f9      	ldr	r1, [r7, #12]
 800212e:	4618      	mov	r0, r3
 8002130:	f002 fcd4 	bl	8004adc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	460b      	mov	r3, r1
 8002154:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002156:	7afb      	ldrb	r3, [r7, #11]
 8002158:	f003 0207 	and.w	r2, r3, #7
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2200      	movs	r2, #0
 800217e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2200      	movs	r2, #0
 8002184:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002186:	7afb      	ldrb	r3, [r7, #11]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	b2da      	uxtb	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	2b00      	cmp	r3, #0
 800219a:	d106      	bne.n	80021aa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6979      	ldr	r1, [r7, #20]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fe86 	bl	8004eb4 <USB_EPStartXfer>
 80021a8:	e005      	b.n	80021b6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6979      	ldr	r1, [r7, #20]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fe7f 	bl	8004eb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	f003 0207 	and.w	r2, r3, #7
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	460b      	mov	r3, r1
 80021fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4413      	add	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2200      	movs	r2, #0
 8002232:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2201      	movs	r2, #1
 8002238:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800223a:	7afb      	ldrb	r3, [r7, #11]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	b2da      	uxtb	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002246:	7afb      	ldrb	r3, [r7, #11]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6979      	ldr	r1, [r7, #20]
 8002256:	4618      	mov	r0, r3
 8002258:	f002 fe2c 	bl	8004eb4 <USB_EPStartXfer>
 800225c:	e005      	b.n	800226a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6979      	ldr	r1, [r7, #20]
 8002264:	4618      	mov	r0, r3
 8002266:	f002 fe25 	bl	8004eb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	f003 0207 	and.w	r2, r3, #7
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	429a      	cmp	r2, r3
 800228c:	d901      	bls.n	8002292 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e04c      	b.n	800232c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002296:	2b00      	cmp	r3, #0
 8002298:	da0e      	bge.n	80022b8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	705a      	strb	r2, [r3, #1]
 80022b6:	e00c      	b.n	80022d2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_PCD_EP_SetStall+0x7e>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e01c      	b.n	800232c <HAL_PCD_EP_SetStall+0xb8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	4618      	mov	r0, r3
 8002302:	f003 fef7 	bl	80060f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	2b00      	cmp	r3, #0
 800230e:	d108      	bne.n	8002322 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f004 f81c 	bl	800635a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d901      	bls.n	8002352 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e040      	b.n	80023d4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002356:	2b00      	cmp	r3, #0
 8002358:	da0e      	bge.n	8002378 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	705a      	strb	r2, [r3, #1]
 8002376:	e00e      	b.n	8002396 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f003 0207 	and.w	r2, r3, #7
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_PCD_EP_ClrStall+0x82>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e00e      	b.n	80023d4 <HAL_PCD_EP_ClrStall+0xa0>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68f9      	ldr	r1, [r7, #12]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 fee5 	bl	8006194 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08e      	sub	sp, #56	; 0x38
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023e4:	e2df      	b.n	80029a6 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80023fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 8158 	bne.w	80026b6 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002406:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d152      	bne.n	80024b6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800241c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002420:	81fb      	strh	r3, [r7, #14]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	89fb      	ldrh	r3, [r7, #14]
 8002428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002430:	b29b      	uxth	r3, r3
 8002432:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3328      	adds	r3, #40	; 0x28
 8002438:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	3302      	adds	r3, #2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	441a      	add	r2, r3
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002474:	2100      	movs	r1, #0
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fc1b 	bl	8000cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 828e 	beq.w	80029a6 <PCD_EP_ISR_Handler+0x5ca>
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f040 8289 	bne.w	80029a6 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b292      	uxth	r2, r2
 80024a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024b4:	e277      	b.n	80029a6 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d034      	beq.n	800253a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d8:	b29b      	uxth	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	3306      	adds	r3, #6
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800250e:	b29b      	uxth	r3, r3
 8002510:	f003 ff73 	bl	80063fa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b29a      	uxth	r2, r3
 800251c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002520:	4013      	ands	r3, r2
 8002522:	823b      	strh	r3, [r7, #16]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	8a3a      	ldrh	r2, [r7, #16]
 800252a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800252e:	b292      	uxth	r2, r2
 8002530:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fb90 	bl	8000c58 <HAL_PCD_SetupStageCallback>
 8002538:	e235      	b.n	80029a6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800253a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800253e:	2b00      	cmp	r3, #0
 8002540:	f280 8231 	bge.w	80029a6 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	b29a      	uxth	r2, r3
 800254c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002550:	4013      	ands	r3, r2
 8002552:	83bb      	strh	r3, [r7, #28]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	8bba      	ldrh	r2, [r7, #28]
 800255a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800255e:	b292      	uxth	r2, r2
 8002560:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256a:	b29b      	uxth	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	3306      	adds	r3, #6
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	4413      	add	r3, r2
 8002580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d019      	beq.n	80025ca <PCD_EP_ISR_Handler+0x1ee>
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d015      	beq.n	80025ca <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	6959      	ldr	r1, [r3, #20]
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f003 ff23 	bl	80063fa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	441a      	add	r2, r3
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025c2:	2100      	movs	r1, #0
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7fe fb59 	bl	8000c7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d8:	b29b      	uxth	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4413      	add	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d112      	bne.n	8002618 <PCD_EP_ISR_Handler+0x23c>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	801a      	strh	r2, [r3, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800260c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002610:	b29a      	uxth	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	801a      	strh	r2, [r3, #0]
 8002616:	e02f      	b.n	8002678 <PCD_EP_ISR_Handler+0x29c>
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b3e      	cmp	r3, #62	; 0x3e
 800261e:	d813      	bhi.n	8002648 <PCD_EP_ISR_Handler+0x26c>
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <PCD_EP_ISR_Handler+0x25e>
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	3301      	adds	r3, #1
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	b29b      	uxth	r3, r3
 800263e:	029b      	lsls	r3, r3, #10
 8002640:	b29a      	uxth	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	e017      	b.n	8002678 <PCD_EP_ISR_Handler+0x29c>
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <PCD_EP_ISR_Handler+0x286>
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	3b01      	subs	r3, #1
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	b29b      	uxth	r3, r3
 8002666:	029b      	lsls	r3, r3, #10
 8002668:	b29b      	uxth	r3, r3
 800266a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800266e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002672:	b29a      	uxth	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002688:	827b      	strh	r3, [r7, #18]
 800268a:	8a7b      	ldrh	r3, [r7, #18]
 800268c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002690:	827b      	strh	r3, [r7, #18]
 8002692:	8a7b      	ldrh	r3, [r7, #18]
 8002694:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002698:	827b      	strh	r3, [r7, #18]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	8a7b      	ldrh	r3, [r7, #18]
 80026a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	8013      	strh	r3, [r2, #0]
 80026b4:	e177      	b.n	80029a6 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026c8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f280 80ea 	bge.w	80028a6 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026e8:	4013      	ands	r3, r2
 80026ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002700:	b292      	uxth	r2, r2
 8002702:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002704:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4413      	add	r3, r2
 8002718:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	7b1b      	ldrb	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d122      	bne.n	8002768 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	3306      	adds	r3, #6
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800274c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8087 	beq.w	8002862 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	6959      	ldr	r1, [r3, #20]
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	88da      	ldrh	r2, [r3, #6]
 8002760:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002762:	f003 fe4a 	bl	80063fa <USB_ReadPMA>
 8002766:	e07c      	b.n	8002862 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	78db      	ldrb	r3, [r3, #3]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d108      	bne.n	8002782 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002770:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002772:	461a      	mov	r2, r3
 8002774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f923 	bl	80029c2 <HAL_PCD_EP_DB_Receive>
 800277c:	4603      	mov	r3, r0
 800277e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002780:	e06f      	b.n	8002862 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279c:	847b      	strh	r3, [r7, #34]	; 0x22
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	441a      	add	r2, r3
 80027ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027be:	b29b      	uxth	r3, r3
 80027c0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d021      	beq.n	8002820 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	3302      	adds	r3, #2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002804:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002806:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002808:	2b00      	cmp	r3, #0
 800280a:	d02a      	beq.n	8002862 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	6959      	ldr	r1, [r3, #20]
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	891a      	ldrh	r2, [r3, #8]
 8002818:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800281a:	f003 fdee 	bl	80063fa <USB_ReadPMA>
 800281e:	e020      	b.n	8002862 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	3306      	adds	r3, #6
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002848:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800284a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	6959      	ldr	r1, [r3, #20]
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	895a      	ldrh	r2, [r3, #10]
 800285c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800285e:	f003 fdcc 	bl	80063fa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002868:	441a      	add	r2, r3
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002874:	441a      	add	r2, r3
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <PCD_EP_ISR_Handler+0x4b0>
 8002882:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	429a      	cmp	r2, r3
 800288a:	d206      	bcs.n	800289a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe f9f2 	bl	8000c7c <HAL_PCD_DataOutStageCallback>
 8002898:	e005      	b.n	80028a6 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 fb07 	bl	8004eb4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d07a      	beq.n	80029a6 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80028b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	843b      	strh	r3, [r7, #32]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	441a      	add	r2, r3
 80028ee:	8c3b      	ldrh	r3, [r7, #32]
 80028f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	78db      	ldrb	r3, [r3, #3]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d108      	bne.n	8002916 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002908:	2b02      	cmp	r3, #2
 800290a:	d146      	bne.n	800299a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800290c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d141      	bne.n	800299a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291e:	b29b      	uxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	3302      	adds	r3, #2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	4413      	add	r3, r2
 8002934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	699a      	ldr	r2, [r3, #24]
 8002944:	8bfb      	ldrh	r3, [r7, #30]
 8002946:	429a      	cmp	r2, r3
 8002948:	d906      	bls.n	8002958 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	8bfb      	ldrh	r3, [r7, #30]
 8002950:	1ad2      	subs	r2, r2, r3
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	619a      	str	r2, [r3, #24]
 8002956:	e002      	b.n	800295e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	2200      	movs	r2, #0
 800295c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7fe f9a0 	bl	8000cb2 <HAL_PCD_DataInStageCallback>
 8002972:	e018      	b.n	80029a6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	8bfb      	ldrh	r3, [r7, #30]
 800297a:	441a      	add	r2, r3
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	8bfb      	ldrh	r3, [r7, #30]
 8002986:	441a      	add	r2, r3
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002992:	4618      	mov	r0, r3
 8002994:	f002 fa8e 	bl	8004eb4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002998:	e005      	b.n	80029a6 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800299a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800299c:	461a      	mov	r2, r3
 800299e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f91b 	bl	8002bdc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f6ff ad17 	blt.w	80023e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3738      	adds	r7, #56	; 0x38
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b088      	sub	sp, #32
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	4613      	mov	r3, r2
 80029ce:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d07e      	beq.n	8002ad8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	3302      	adds	r3, #2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a02:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	8b7b      	ldrh	r3, [r7, #26]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d306      	bcc.n	8002a1c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	8b7b      	ldrh	r3, [r7, #26]
 8002a14:	1ad2      	subs	r2, r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	619a      	str	r2, [r3, #24]
 8002a1a:	e002      	b.n	8002a22 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d123      	bne.n	8002a72 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a44:	833b      	strh	r3, [r7, #24]
 8002a46:	8b3b      	ldrh	r3, [r7, #24]
 8002a48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a4c:	833b      	strh	r3, [r7, #24]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	441a      	add	r2, r3
 8002a5c:	8b3b      	ldrh	r3, [r7, #24]
 8002a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01f      	beq.n	8002abc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a96:	82fb      	strh	r3, [r7, #22]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	441a      	add	r2, r3
 8002aa6:	8afb      	ldrh	r3, [r7, #22]
 8002aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002abc:	8b7b      	ldrh	r3, [r7, #26]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8087 	beq.w	8002bd2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	6959      	ldr	r1, [r3, #20]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	891a      	ldrh	r2, [r3, #8]
 8002ad0:	8b7b      	ldrh	r3, [r7, #26]
 8002ad2:	f003 fc92 	bl	80063fa <USB_ReadPMA>
 8002ad6:	e07c      	b.n	8002bd2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	3306      	adds	r3, #6
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b00:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	699a      	ldr	r2, [r3, #24]
 8002b06:	8b7b      	ldrh	r3, [r7, #26]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d306      	bcc.n	8002b1a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	8b7b      	ldrh	r3, [r7, #26]
 8002b12:	1ad2      	subs	r2, r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	619a      	str	r2, [r3, #24]
 8002b18:	e002      	b.n	8002b20 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d123      	bne.n	8002b70 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	83fb      	strh	r3, [r7, #30]
 8002b44:	8bfb      	ldrh	r3, [r7, #30]
 8002b46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b4a:	83fb      	strh	r3, [r7, #30]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	441a      	add	r2, r3
 8002b5a:	8bfb      	ldrh	r3, [r7, #30]
 8002b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11f      	bne.n	8002bba <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b94:	83bb      	strh	r3, [r7, #28]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	441a      	add	r2, r3
 8002ba4:	8bbb      	ldrh	r3, [r7, #28]
 8002ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bba:	8b7b      	ldrh	r3, [r7, #26]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	6959      	ldr	r1, [r3, #20]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	895a      	ldrh	r2, [r3, #10]
 8002bcc:	8b7b      	ldrh	r3, [r7, #26]
 8002bce:	f003 fc14 	bl	80063fa <USB_ReadPMA>
    }
  }

  return count;
 8002bd2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b094      	sub	sp, #80	; 0x50
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8138 	beq.w	8002e66 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d907      	bls.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c36:	1ad2      	subs	r2, r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	619a      	str	r2, [r3, #24]
 8002c3c:	e002      	b.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d12c      	bne.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7fe f82d 	bl	8000cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 823a 	beq.w	80030d8 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7e:	82fb      	strh	r3, [r7, #22]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	441a      	add	r2, r3
 8002c8e:	8afb      	ldrh	r3, [r7, #22]
 8002c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	8013      	strh	r3, [r2, #0]
 8002ca4:	e218      	b.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01f      	beq.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cca:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	441a      	add	r2, r3
 8002cda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	f040 81ee 	bne.w	80030d8 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d04:	441a      	add	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d12:	441a      	add	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d309      	bcc.n	8002d38 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	6a1a      	ldr	r2, [r3, #32]
 8002d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d30:	1ad2      	subs	r2, r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	621a      	str	r2, [r3, #32]
 8002d36:	e015      	b.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002d40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d44:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d4e:	e009      	b.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2200      	movs	r2, #0
 8002d62:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	785b      	ldrb	r3, [r3, #1]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d155      	bne.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x23c>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	011a      	lsls	r2, r3, #4
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d112      	bne.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	801a      	strh	r2, [r3, #0]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	e047      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x274>
 8002dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc2:	2b3e      	cmp	r3, #62	; 0x3e
 8002dc4:	d811      	bhi.n	8002dea <HAL_PCD_EP_DB_Transmit+0x20e>
 8002dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc8:	085b      	lsrs	r3, r3, #1
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_PCD_EP_DB_Transmit+0x200>
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	3301      	adds	r3, #1
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	029b      	lsls	r3, r3, #10
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	801a      	strh	r2, [r3, #0]
 8002de8:	e032      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x274>
 8002dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x224>
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	029b      	lsls	r3, r3, #10
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	e01b      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d117      	bne.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	4413      	add	r3, r2
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	011a      	lsls	r2, r3, #4
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	4413      	add	r3, r2
 8002e42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6959      	ldr	r1, [r3, #20]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	891a      	ldrh	r2, [r3, #8]
 8002e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f003 fa86 	bl	8006370 <USB_WritePMA>
 8002e64:	e138      	b.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3306      	adds	r3, #6
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d307      	bcc.n	8002eae <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ea6:	1ad2      	subs	r2, r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	619a      	str	r2, [r3, #24]
 8002eac:	e002      	b.n	8002eb4 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d12e      	bne.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7fd fef5 	bl	8000cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 8102 	bne.w	80030d8 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	441a      	add	r2, r3
 8002f00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	8013      	strh	r3, [r2, #0]
 8002f18:	e0de      	b.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d11f      	bne.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	867b      	strh	r3, [r7, #50]	; 0x32
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	441a      	add	r2, r3
 8002f4e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	f040 80b4 	bne.w	80030d8 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f78:	441a      	add	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f86:	441a      	add	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6a1a      	ldr	r2, [r3, #32]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d309      	bcc.n	8002fac <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa4:	1ad2      	subs	r2, r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	621a      	str	r2, [r3, #32]
 8002faa:	e015      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002fb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fb8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fc2:	e009      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d155      	bne.n	8003092 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	4413      	add	r3, r2
 8002ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	011a      	lsls	r2, r3, #4
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003006:	4413      	add	r3, r2
 8003008:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
 800300e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003010:	2b00      	cmp	r3, #0
 8003012:	d112      	bne.n	800303a <HAL_PCD_EP_DB_Transmit+0x45e>
 8003014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800301e:	b29a      	uxth	r2, r3
 8003020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003022:	801a      	strh	r2, [r3, #0]
 8003024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800302e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003032:	b29a      	uxth	r2, r3
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	e044      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800303a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303c:	2b3e      	cmp	r3, #62	; 0x3e
 800303e:	d811      	bhi.n	8003064 <HAL_PCD_EP_DB_Transmit+0x488>
 8003040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003052:	3301      	adds	r3, #1
 8003054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003058:	b29b      	uxth	r3, r3
 800305a:	029b      	lsls	r3, r3, #10
 800305c:	b29a      	uxth	r2, r3
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003060:	801a      	strh	r2, [r3, #0]
 8003062:	e02f      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800306a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <HAL_PCD_EP_DB_Transmit+0x49e>
 8003074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003076:	3b01      	subs	r3, #1
 8003078:	64fb      	str	r3, [r7, #76]	; 0x4c
 800307a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307c:	b29b      	uxth	r3, r3
 800307e:	029b      	lsls	r3, r3, #10
 8003080:	b29b      	uxth	r3, r3
 8003082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308a:	b29a      	uxth	r2, r3
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	801a      	strh	r2, [r3, #0]
 8003090:	e018      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	785b      	ldrb	r3, [r3, #1]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d114      	bne.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a8:	4413      	add	r3, r2
 80030aa:	643b      	str	r3, [r7, #64]	; 0x40
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	011a      	lsls	r2, r3, #4
 80030b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b4:	4413      	add	r3, r2
 80030b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030be:	b29a      	uxth	r2, r3
 80030c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6959      	ldr	r1, [r3, #20]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	895a      	ldrh	r2, [r3, #10]
 80030d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f003 f94c 	bl	8006370 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030f2:	82bb      	strh	r3, [r7, #20]
 80030f4:	8abb      	ldrh	r3, [r7, #20]
 80030f6:	f083 0310 	eor.w	r3, r3, #16
 80030fa:	82bb      	strh	r3, [r7, #20]
 80030fc:	8abb      	ldrh	r3, [r7, #20]
 80030fe:	f083 0320 	eor.w	r3, r3, #32
 8003102:	82bb      	strh	r3, [r7, #20]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	8abb      	ldrh	r3, [r7, #20]
 8003114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800311c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003124:	b29b      	uxth	r3, r3
 8003126:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3750      	adds	r7, #80	; 0x50
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003132:	b480      	push	{r7}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	817b      	strh	r3, [r7, #10]
 8003140:	4613      	mov	r3, r2
 8003142:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003144:	897b      	ldrh	r3, [r7, #10]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003150:	897b      	ldrh	r3, [r7, #10]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e009      	b.n	800317c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003168:	897a      	ldrh	r2, [r7, #10]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800317c:	893b      	ldrh	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	b29a      	uxth	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	80da      	strh	r2, [r3, #6]
 8003190:	e00b      	b.n	80031aa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2201      	movs	r2, #1
 8003196:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	b29a      	uxth	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	0c1b      	lsrs	r3, r3, #16
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e26c      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8087 	beq.w	80032e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031d8:	4b92      	ldr	r3, [pc, #584]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d00c      	beq.n	80031fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031e4:	4b8f      	ldr	r3, [pc, #572]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d112      	bne.n	8003216 <HAL_RCC_OscConfig+0x5e>
 80031f0:	4b8c      	ldr	r3, [pc, #560]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d10b      	bne.n	8003216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fe:	4b89      	ldr	r3, [pc, #548]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d06c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x12c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d168      	bne.n	80032e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e246      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x76>
 8003220:	4b80      	ldr	r3, [pc, #512]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a7f      	ldr	r2, [pc, #508]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	e02e      	b.n	800328c <HAL_RCC_OscConfig+0xd4>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x98>
 8003236:	4b7b      	ldr	r3, [pc, #492]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a7a      	ldr	r2, [pc, #488]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800323c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4b78      	ldr	r3, [pc, #480]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a77      	ldr	r2, [pc, #476]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e01d      	b.n	800328c <HAL_RCC_OscConfig+0xd4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0xbc>
 800325a:	4b72      	ldr	r3, [pc, #456]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a71      	ldr	r2, [pc, #452]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b6f      	ldr	r3, [pc, #444]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6e      	ldr	r2, [pc, #440]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0xd4>
 8003274:	4b6b      	ldr	r3, [pc, #428]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a6a      	ldr	r2, [pc, #424]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b68      	ldr	r3, [pc, #416]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a67      	ldr	r2, [pc, #412]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fd ffc2 	bl	800121c <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800329c:	f7fd ffbe 	bl	800121c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1fa      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	4b5d      	ldr	r3, [pc, #372]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0xe4>
 80032ba:	e014      	b.n	80032e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fd ffae 	bl	800121c <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fd ffaa 	bl	800121c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e1e6      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x10c>
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d063      	beq.n	80033ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f2:	4b4c      	ldr	r3, [pc, #304]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032fe:	4b49      	ldr	r3, [pc, #292]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b08      	cmp	r3, #8
 8003308:	d11c      	bne.n	8003344 <HAL_RCC_OscConfig+0x18c>
 800330a:	4b46      	ldr	r3, [pc, #280]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d116      	bne.n	8003344 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003316:	4b43      	ldr	r3, [pc, #268]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_RCC_OscConfig+0x176>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d001      	beq.n	800332e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e1ba      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332e:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4939      	ldr	r1, [pc, #228]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003342:	e03a      	b.n	80033ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d020      	beq.n	800338e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800334c:	4b36      	ldr	r3, [pc, #216]	; (8003428 <HAL_RCC_OscConfig+0x270>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fd ff63 	bl	800121c <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335a:	f7fd ff5f 	bl	800121c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e19b      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336c:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003378:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4927      	ldr	r1, [pc, #156]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]
 800338c:	e015      	b.n	80033ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338e:	4b26      	ldr	r3, [pc, #152]	; (8003428 <HAL_RCC_OscConfig+0x270>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fd ff42 	bl	800121c <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339c:	f7fd ff3e 	bl	800121c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e17a      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ae:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d03a      	beq.n	800343c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d019      	beq.n	8003402 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <HAL_RCC_OscConfig+0x274>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d4:	f7fd ff22 	bl	800121c <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033dc:	f7fd ff1e 	bl	800121c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e15a      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ee:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033fa:	2001      	movs	r0, #1
 80033fc:	f000 fad8 	bl	80039b0 <RCC_Delay>
 8003400:	e01c      	b.n	800343c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003408:	f7fd ff08 	bl	800121c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340e:	e00f      	b.n	8003430 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003410:	f7fd ff04 	bl	800121c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d908      	bls.n	8003430 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e140      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	42420000 	.word	0x42420000
 800342c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	4b9e      	ldr	r3, [pc, #632]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e9      	bne.n	8003410 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80a6 	beq.w	8003596 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344e:	4b97      	ldr	r3, [pc, #604]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	4b94      	ldr	r3, [pc, #592]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	4a93      	ldr	r2, [pc, #588]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	61d3      	str	r3, [r2, #28]
 8003466:	4b91      	ldr	r3, [pc, #580]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b8e      	ldr	r3, [pc, #568]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4b8b      	ldr	r3, [pc, #556]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a8a      	ldr	r2, [pc, #552]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fd fec5 	bl	800121c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fd fec1 	bl	800121c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b64      	cmp	r3, #100	; 0x64
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0fd      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	4b81      	ldr	r3, [pc, #516]	; (80036b0 <HAL_RCC_OscConfig+0x4f8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x312>
 80034bc:	4b7b      	ldr	r3, [pc, #492]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	4a7a      	ldr	r2, [pc, #488]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6213      	str	r3, [r2, #32]
 80034c8:	e02d      	b.n	8003526 <HAL_RCC_OscConfig+0x36e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x334>
 80034d2:	4b76      	ldr	r3, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a75      	ldr	r2, [pc, #468]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6213      	str	r3, [r2, #32]
 80034de:	4b73      	ldr	r3, [pc, #460]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a72      	ldr	r2, [pc, #456]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6213      	str	r3, [r2, #32]
 80034ea:	e01c      	b.n	8003526 <HAL_RCC_OscConfig+0x36e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d10c      	bne.n	800350e <HAL_RCC_OscConfig+0x356>
 80034f4:	4b6d      	ldr	r3, [pc, #436]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4a6c      	ldr	r2, [pc, #432]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	f043 0304 	orr.w	r3, r3, #4
 80034fe:	6213      	str	r3, [r2, #32]
 8003500:	4b6a      	ldr	r3, [pc, #424]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4a69      	ldr	r2, [pc, #420]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6213      	str	r3, [r2, #32]
 800350c:	e00b      	b.n	8003526 <HAL_RCC_OscConfig+0x36e>
 800350e:	4b67      	ldr	r3, [pc, #412]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a66      	ldr	r2, [pc, #408]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	6213      	str	r3, [r2, #32]
 800351a:	4b64      	ldr	r3, [pc, #400]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4a63      	ldr	r2, [pc, #396]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003520:	f023 0304 	bic.w	r3, r3, #4
 8003524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d015      	beq.n	800355a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fd fe75 	bl	800121c <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fd fe71 	bl	800121c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0ab      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354c:	4b57      	ldr	r3, [pc, #348]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0ee      	beq.n	8003536 <HAL_RCC_OscConfig+0x37e>
 8003558:	e014      	b.n	8003584 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355a:	f7fd fe5f 	bl	800121c <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fd fe5b 	bl	800121c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e095      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003578:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ee      	bne.n	8003562 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d105      	bne.n	8003596 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358a:	4b48      	ldr	r3, [pc, #288]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	4a47      	ldr	r2, [pc, #284]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8081 	beq.w	80036a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a0:	4b42      	ldr	r3, [pc, #264]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d061      	beq.n	8003670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d146      	bne.n	8003642 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <HAL_RCC_OscConfig+0x4fc>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ba:	f7fd fe2f 	bl	800121c <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fd fe2b 	bl	800121c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e067      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d4:	4b35      	ldr	r3, [pc, #212]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d108      	bne.n	80035fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ea:	4b30      	ldr	r3, [pc, #192]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	492d      	ldr	r1, [pc, #180]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fc:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a19      	ldr	r1, [r3, #32]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	430b      	orrs	r3, r1
 800360e:	4927      	ldr	r1, [pc, #156]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <HAL_RCC_OscConfig+0x4fc>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7fd fdff 	bl	800121c <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003622:	f7fd fdfb 	bl	800121c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e037      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x46a>
 8003640:	e02f      	b.n	80036a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <HAL_RCC_OscConfig+0x4fc>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fd fde8 	bl	800121c <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fd fde4 	bl	800121c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e020      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x498>
 800366e:	e018      	b.n	80036a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e013      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_OscConfig+0x4f4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	429a      	cmp	r2, r3
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40007000 	.word	0x40007000
 80036b4:	42420060 	.word	0x42420060

080036b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0d0      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036cc:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d910      	bls.n	80036fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b67      	ldr	r3, [pc, #412]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 0207 	bic.w	r2, r3, #7
 80036e2:	4965      	ldr	r1, [pc, #404]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b63      	ldr	r3, [pc, #396]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0b8      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003714:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4a58      	ldr	r2, [pc, #352]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800371e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800372c:	4b53      	ldr	r3, [pc, #332]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4a52      	ldr	r2, [pc, #328]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003736:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003738:	4b50      	ldr	r3, [pc, #320]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	494d      	ldr	r1, [pc, #308]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d040      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d115      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e07f      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	4b41      	ldr	r3, [pc, #260]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e073      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003786:	4b3d      	ldr	r3, [pc, #244]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e06b      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003796:	4b39      	ldr	r3, [pc, #228]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f023 0203 	bic.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4936      	ldr	r1, [pc, #216]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a8:	f7fd fd38 	bl	800121c <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fd fd34 	bl	800121c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e053      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	4b2d      	ldr	r3, [pc, #180]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 020c 	and.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d1eb      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d210      	bcs.n	8003808 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b24      	ldr	r3, [pc, #144]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 0207 	bic.w	r2, r3, #7
 80037ee:	4922      	ldr	r1, [pc, #136]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e032      	b.n	800386e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4916      	ldr	r1, [pc, #88]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	490e      	ldr	r1, [pc, #56]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003846:	f000 f821 	bl	800388c <HAL_RCC_GetSysClockFreq>
 800384a:	4602      	mov	r2, r0
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	490a      	ldr	r1, [pc, #40]	; (8003880 <HAL_RCC_ClockConfig+0x1c8>)
 8003858:	5ccb      	ldrb	r3, [r1, r3]
 800385a:	fa22 f303 	lsr.w	r3, r2, r3
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <HAL_RCC_ClockConfig+0x1cc>)
 8003860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <HAL_RCC_ClockConfig+0x1d0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd fc96 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40022000 	.word	0x40022000
 800387c:	40021000 	.word	0x40021000
 8003880:	08008d74 	.word	0x08008d74
 8003884:	20000060 	.word	0x20000060
 8003888:	20000064 	.word	0x20000064

0800388c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800388c:	b490      	push	{r4, r7}
 800388e:	b08a      	sub	sp, #40	; 0x28
 8003890:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003892:	4b2a      	ldr	r3, [pc, #168]	; (800393c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003894:	1d3c      	adds	r4, r7, #4
 8003896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800389c:	f240 2301 	movw	r3, #513	; 0x201
 80038a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038b6:	4b22      	ldr	r3, [pc, #136]	; (8003940 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d002      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x40>
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_GetSysClockFreq+0x46>
 80038ca:	e02d      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ce:	623b      	str	r3, [r7, #32]
      break;
 80038d0:	e02d      	b.n	800392e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	0c9b      	lsrs	r3, r3, #18
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038de:	4413      	add	r3, r2
 80038e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038f0:	4b13      	ldr	r3, [pc, #76]	; (8003940 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	0c5b      	lsrs	r3, r3, #17
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038fe:	4413      	add	r3, r2
 8003900:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003904:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 800390a:	fb02 f203 	mul.w	r2, r2, r3
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	e004      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <HAL_RCC_GetSysClockFreq+0xbc>)
 800391c:	fb02 f303 	mul.w	r3, r2, r3
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	623b      	str	r3, [r7, #32]
      break;
 8003926:	e002      	b.n	800392e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 800392a:	623b      	str	r3, [r7, #32]
      break;
 800392c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392e:	6a3b      	ldr	r3, [r7, #32]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3728      	adds	r7, #40	; 0x28
 8003934:	46bd      	mov	sp, r7
 8003936:	bc90      	pop	{r4, r7}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	08008d24 	.word	0x08008d24
 8003940:	40021000 	.word	0x40021000
 8003944:	007a1200 	.word	0x007a1200
 8003948:	003d0900 	.word	0x003d0900

0800394c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003950:	4b02      	ldr	r3, [pc, #8]	; (800395c <HAL_RCC_GetHCLKFreq+0x10>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	20000060 	.word	0x20000060

08003960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003964:	f7ff fff2 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4903      	ldr	r1, [pc, #12]	; (8003984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	08008d84 	.word	0x08008d84

08003988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800398c:	f7ff ffde 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	0adb      	lsrs	r3, r3, #11
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4903      	ldr	r1, [pc, #12]	; (80039ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	08008d84 	.word	0x08008d84

080039b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <RCC_Delay+0x34>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <RCC_Delay+0x38>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	0a5b      	lsrs	r3, r3, #9
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039cc:	bf00      	nop
  }
  while (Delay --);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1e5a      	subs	r2, r3, #1
 80039d2:	60fa      	str	r2, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f9      	bne.n	80039cc <RCC_Delay+0x1c>
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	20000060 	.word	0x20000060
 80039e8:	10624dd3 	.word	0x10624dd3

080039ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d07d      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0c:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10d      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a18:	4b4c      	ldr	r3, [pc, #304]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4a4b      	ldr	r2, [pc, #300]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a22:	61d3      	str	r3, [r2, #28]
 8003a24:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a30:	2301      	movs	r3, #1
 8003a32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d118      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a40:	4b43      	ldr	r3, [pc, #268]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a42      	ldr	r2, [pc, #264]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4c:	f7fd fbe6 	bl	800121c <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a52:	e008      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a54:	f7fd fbe2 	bl	800121c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e06d      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a66:	4b3a      	ldr	r3, [pc, #232]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d02e      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d027      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a90:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa0:	4b2c      	ldr	r3, [pc, #176]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003aa6:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d014      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fd fbb1 	bl	800121c <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003abe:	f7fd fbad 	bl	800121c <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e036      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0ee      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4917      	ldr	r1, [pc, #92]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af8:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	490b      	ldr	r1, [pc, #44]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	4904      	ldr	r1, [pc, #16]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40007000 	.word	0x40007000
 8003b54:	42420440 	.word	0x42420440

08003b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e03f      	b.n	8003bea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fc fde4 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	; 0x24
 8003b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fb39 	bl	8004214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b08a      	sub	sp, #40	; 0x28
 8003bf6:	af02      	add	r7, sp, #8
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d17c      	bne.n	8003d0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_UART_Transmit+0x2c>
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e075      	b.n	8003d0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_UART_Transmit+0x3e>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e06e      	b.n	8003d0e <HAL_UART_Transmit+0x11c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2221      	movs	r2, #33	; 0x21
 8003c42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c46:	f7fd fae9 	bl	800121c <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	88fa      	ldrh	r2, [r7, #6]
 8003c56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c60:	d108      	bne.n	8003c74 <HAL_UART_Transmit+0x82>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	e003      	b.n	8003c7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003c84:	e02a      	b.n	8003cdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2180      	movs	r1, #128	; 0x80
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f95c 	bl	8003f4e <UART_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e036      	b.n	8003d0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10b      	bne.n	8003cbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	3302      	adds	r3, #2
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	e007      	b.n	8003cce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	781a      	ldrb	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1cf      	bne.n	8003c86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2140      	movs	r1, #64	; 0x40
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f92c 	bl	8003f4e <UART_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e006      	b.n	8003d0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e000      	b.n	8003d0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d0c:	2302      	movs	r3, #2
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10d      	bne.n	8003d6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_UART_IRQHandler+0x52>
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f9d5 	bl	8004112 <UART_Receive_IT>
      return;
 8003d68:	e0d0      	b.n	8003f0c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80b0 	beq.w	8003ed2 <HAL_UART_IRQHandler+0x1ba>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <HAL_UART_IRQHandler+0x70>
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80a5 	beq.w	8003ed2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_UART_IRQHandler+0x90>
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	f043 0201 	orr.w	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_UART_IRQHandler+0xb0>
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc0:	f043 0202 	orr.w	r2, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_UART_IRQHandler+0xd0>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	f043 0204 	orr.w	r2, r3, #4
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00f      	beq.n	8003e12 <HAL_UART_IRQHandler+0xfa>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d104      	bne.n	8003e06 <HAL_UART_IRQHandler+0xee>
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	f043 0208 	orr.w	r2, r3, #8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d077      	beq.n	8003f0a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_UART_IRQHandler+0x11c>
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f96f 	bl	8004112 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf14      	ite	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	2300      	moveq	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <HAL_UART_IRQHandler+0x144>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d031      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f8c0 	bl	8003fe2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d023      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8c:	4a21      	ldr	r2, [pc, #132]	; (8003f14 <HAL_UART_IRQHandler+0x1fc>)
 8003e8e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd fb19 	bl	80014cc <HAL_DMA_Abort_IT>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d016      	beq.n	8003ece <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eae:	e00e      	b.n	8003ece <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f843 	bl	8003f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb6:	e00a      	b.n	8003ece <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f83f 	bl	8003f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebe:	e006      	b.n	8003ece <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f83b 	bl	8003f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003ecc:	e01d      	b.n	8003f0a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ece:	bf00      	nop
    return;
 8003ed0:	e01b      	b.n	8003f0a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_UART_IRQHandler+0x1d6>
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8ac 	bl	8004044 <UART_Transmit_IT>
    return;
 8003eec:	e00e      	b.n	8003f0c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_UART_IRQHandler+0x1f4>
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8ed 	bl	80040e2 <UART_EndTransmit_IT>
    return;
 8003f08:	e000      	b.n	8003f0c <HAL_UART_IRQHandler+0x1f4>
    return;
 8003f0a:	bf00      	nop
  }
}
 8003f0c:	3720      	adds	r7, #32
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	0800401d 	.word	0x0800401d

08003f18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5e:	e02c      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d028      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f6e:	f7fd f955 	bl	800121c <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d21d      	bcs.n	8003fba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f8c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e00f      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	bf0c      	ite	eq
 8003fca:	2301      	moveq	r3, #1
 8003fcc:	2300      	movne	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d0c3      	beq.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ff8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff ff80 	bl	8003f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b21      	cmp	r3, #33	; 0x21
 8004056:	d13e      	bne.n	80040d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004060:	d114      	bne.n	800408c <UART_Transmit_IT+0x48>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d110      	bne.n	800408c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800407e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	1c9a      	adds	r2, r3, #2
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	621a      	str	r2, [r3, #32]
 800408a:	e008      	b.n	800409e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	1c59      	adds	r1, r3, #1
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6211      	str	r1, [r2, #32]
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4619      	mov	r1, r3
 80040ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10f      	bne.n	80040d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr

080040e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ff08 	bl	8003f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b22      	cmp	r3, #34	; 0x22
 8004124:	d170      	bne.n	8004208 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412e:	d117      	bne.n	8004160 <UART_Receive_IT+0x4e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d113      	bne.n	8004160 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	b29b      	uxth	r3, r3
 800414a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414e:	b29a      	uxth	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	1c9a      	adds	r2, r3, #2
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	629a      	str	r2, [r3, #40]	; 0x28
 800415e:	e026      	b.n	80041ae <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	d007      	beq.n	8004184 <UART_Receive_IT+0x72>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <UART_Receive_IT+0x80>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	b2da      	uxtb	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e008      	b.n	80041a4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4619      	mov	r1, r3
 80041bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d120      	bne.n	8004204 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0220 	bic.w	r2, r2, #32
 80041d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fe95 	bl	8003f2a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e002      	b.n	800420a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800424e:	f023 030c 	bic.w	r3, r3, #12
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	430b      	orrs	r3, r1
 800425a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <UART_SetConfig+0x114>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d103      	bne.n	8004284 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800427c:	f7ff fb84 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	e002      	b.n	800428a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004284:	f7ff fb6c 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8004288:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009a      	lsls	r2, r3, #2
 8004294:	441a      	add	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	4a22      	ldr	r2, [pc, #136]	; (800432c <UART_SetConfig+0x118>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	0119      	lsls	r1, r3, #4
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	009a      	lsls	r2, r3, #2
 80042b4:	441a      	add	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <UART_SetConfig+0x118>)
 80042c2:	fba3 0302 	umull	r0, r3, r3, r2
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	2064      	movs	r0, #100	; 0x64
 80042ca:	fb00 f303 	mul.w	r3, r0, r3
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	3332      	adds	r3, #50	; 0x32
 80042d4:	4a15      	ldr	r2, [pc, #84]	; (800432c <UART_SetConfig+0x118>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e0:	4419      	add	r1, r3
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	009a      	lsls	r2, r3, #2
 80042ec:	441a      	add	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <UART_SetConfig+0x118>)
 80042fa:	fba3 0302 	umull	r0, r3, r3, r2
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	2064      	movs	r0, #100	; 0x64
 8004302:	fb00 f303 	mul.w	r3, r0, r3
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	3332      	adds	r3, #50	; 0x32
 800430c:	4a07      	ldr	r2, [pc, #28]	; (800432c <UART_SetConfig+0x118>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	f003 020f 	and.w	r2, r3, #15
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	440a      	add	r2, r1
 800431e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40013800 	.word	0x40013800
 800432c:	51eb851f 	.word	0x51eb851f

08004330 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004330:	b084      	sub	sp, #16
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	f107 0014 	add.w	r0, r7, #20
 800433e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	b004      	add	sp, #16
 800434e:	4770      	bx	lr

08004350 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004360:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004364:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	b29a      	uxth	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004384:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004388:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	b29b      	uxth	r3, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	b29b      	uxth	r3, r3
 800439a:	4013      	ands	r3, r2
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80043c8:	b084      	sub	sp, #16
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	f107 0014 	add.w	r0, r7, #20
 80043d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	b004      	add	sp, #16
 8004406:	4770      	bx	lr

08004408 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004408:	b480      	push	{r7}
 800440a:	b09b      	sub	sp, #108	; 0x6c
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	78db      	ldrb	r3, [r3, #3]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d81f      	bhi.n	800447a <USB_ActivateEndpoint+0x72>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <USB_ActivateEndpoint+0x38>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004451 	.word	0x08004451
 8004444:	0800446d 	.word	0x0800446d
 8004448:	08004483 	.word	0x08004483
 800444c:	0800445f 	.word	0x0800445f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004450:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004458:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800445c:	e012      	b.n	8004484 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800445e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004462:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004466:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800446a:	e00b      	b.n	8004484 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800446c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004474:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004478:	e004      	b.n	8004484 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004480:	e000      	b.n	8004484 <USB_ActivateEndpoint+0x7c>
      break;
 8004482:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	441a      	add	r2, r3
 800448e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800449e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044bc:	b29a      	uxth	r2, r3
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80044d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	7b1b      	ldrb	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 8149 	bne.w	8004788 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8084 	beq.w	8004608 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800450a:	b29b      	uxth	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4413      	add	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	011a      	lsls	r2, r3, #4
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	88db      	ldrh	r3, [r3, #6]
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	b29b      	uxth	r3, r3
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	81fb      	strh	r3, [r7, #14]
 8004542:	89fb      	ldrh	r3, [r7, #14]
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <USB_ActivateEndpoint+0x17c>
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	81bb      	strh	r3, [r7, #12]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	89bb      	ldrh	r3, [r7, #12]
 8004570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004580:	b29b      	uxth	r3, r3
 8004582:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	78db      	ldrb	r3, [r3, #3]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d020      	beq.n	80045ce <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a2:	813b      	strh	r3, [r7, #8]
 80045a4:	893b      	ldrh	r3, [r7, #8]
 80045a6:	f083 0320 	eor.w	r3, r3, #32
 80045aa:	813b      	strh	r3, [r7, #8]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	893b      	ldrh	r3, [r7, #8]
 80045b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8013      	strh	r3, [r2, #0]
 80045cc:	e27f      	b.n	8004ace <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e4:	817b      	strh	r3, [r7, #10]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	441a      	add	r2, r3
 80045f0:	897b      	ldrh	r3, [r7, #10]
 80045f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004602:	b29b      	uxth	r3, r3
 8004604:	8013      	strh	r3, [r2, #0]
 8004606:	e262      	b.n	8004ace <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004612:	b29b      	uxth	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	4413      	add	r3, r2
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	011a      	lsls	r2, r3, #4
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	4413      	add	r3, r2
 8004626:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	88db      	ldrh	r3, [r3, #6]
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	b29b      	uxth	r3, r3
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004646:	b29b      	uxth	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	4413      	add	r3, r2
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	011a      	lsls	r2, r3, #4
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	4413      	add	r3, r2
 800465a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800465e:	623b      	str	r3, [r7, #32]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d112      	bne.n	800468e <USB_ActivateEndpoint+0x286>
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004672:	b29a      	uxth	r2, r3
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	801a      	strh	r2, [r3, #0]
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004686:	b29a      	uxth	r2, r3
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	801a      	strh	r2, [r3, #0]
 800468c:	e02f      	b.n	80046ee <USB_ActivateEndpoint+0x2e6>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b3e      	cmp	r3, #62	; 0x3e
 8004694:	d813      	bhi.n	80046be <USB_ActivateEndpoint+0x2b6>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	663b      	str	r3, [r7, #96]	; 0x60
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <USB_ActivateEndpoint+0x2a8>
 80046aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ac:	3301      	adds	r3, #1
 80046ae:	663b      	str	r3, [r7, #96]	; 0x60
 80046b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	029b      	lsls	r3, r3, #10
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	e017      	b.n	80046ee <USB_ActivateEndpoint+0x2e6>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	663b      	str	r3, [r7, #96]	; 0x60
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d102      	bne.n	80046d8 <USB_ActivateEndpoint+0x2d0>
 80046d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046d4:	3b01      	subs	r3, #1
 80046d6:	663b      	str	r3, [r7, #96]	; 0x60
 80046d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046da:	b29b      	uxth	r3, r3
 80046dc:	029b      	lsls	r3, r3, #10
 80046de:	b29b      	uxth	r3, r3
 80046e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	83fb      	strh	r3, [r7, #30]
 80046fc:	8bfb      	ldrh	r3, [r7, #30]
 80046fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01b      	beq.n	800473e <USB_ActivateEndpoint+0x336>
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471c:	83bb      	strh	r3, [r7, #28]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	8bbb      	ldrh	r3, [r7, #28]
 800472a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473a:	b29b      	uxth	r3, r3
 800473c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	837b      	strh	r3, [r7, #26]
 8004756:	8b7b      	ldrh	r3, [r7, #26]
 8004758:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800475c:	837b      	strh	r3, [r7, #26]
 800475e:	8b7b      	ldrh	r3, [r7, #26]
 8004760:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004764:	837b      	strh	r3, [r7, #26]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	8b7b      	ldrh	r3, [r7, #26]
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]
 8004786:	e1a2      	b.n	8004ace <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	441a      	add	r2, r3
 80047ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80047b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047d4:	4413      	add	r3, r2
 80047d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	011a      	lsls	r2, r3, #4
 80047de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047e6:	657b      	str	r3, [r7, #84]	; 0x54
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	891b      	ldrh	r3, [r3, #8]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	653b      	str	r3, [r7, #80]	; 0x50
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004802:	b29b      	uxth	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004808:	4413      	add	r3, r2
 800480a:	653b      	str	r3, [r7, #80]	; 0x50
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	011a      	lsls	r2, r3, #4
 8004812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004814:	4413      	add	r3, r2
 8004816:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	895b      	ldrh	r3, [r3, #10]
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	b29b      	uxth	r3, r3
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	785b      	ldrb	r3, [r3, #1]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f040 8091 	bne.w	8004958 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004844:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01b      	beq.n	8004886 <USB_ActivateEndpoint+0x47e>
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004864:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	441a      	add	r2, r3
 8004870:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800487e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004882:	b29b      	uxth	r3, r3
 8004884:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	873b      	strh	r3, [r7, #56]	; 0x38
 8004894:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01b      	beq.n	80048d6 <USB_ActivateEndpoint+0x4ce>
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800490a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491a:	b29b      	uxth	r3, r3
 800491c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004934:	867b      	strh	r3, [r7, #50]	; 0x32
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]
 8004956:	e0ba      	b.n	8004ace <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004968:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800496c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01d      	beq.n	80049b0 <USB_ActivateEndpoint+0x5a8>
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800499c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80049c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01d      	beq.n	8004a08 <USB_ActivateEndpoint+0x600>
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	441a      	add	r2, r3
 80049f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80049f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	78db      	ldrb	r3, [r3, #3]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d024      	beq.n	8004a5a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a2e:	f083 0320 	eor.w	r3, r3, #32
 8004a32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	8013      	strh	r3, [r2, #0]
 8004a58:	e01d      	b.n	8004a96 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	441a      	add	r2, r3
 8004a7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004ace:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	376c      	adds	r7, #108	; 0x6c
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b08d      	sub	sp, #52	; 0x34
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	7b1b      	ldrb	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 808e 	bne.w	8004c0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d044      	beq.n	8004b82 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	81bb      	strh	r3, [r7, #12]
 8004b06:	89bb      	ldrh	r3, [r7, #12]
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <USB_DeactivateEndpoint+0x6c>
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	817b      	strh	r3, [r7, #10]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	897b      	ldrh	r3, [r7, #10]
 8004b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5e:	813b      	strh	r3, [r7, #8]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	893b      	ldrh	r3, [r7, #8]
 8004b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	8013      	strh	r3, [r2, #0]
 8004b80:	e192      	b.n	8004ea8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	827b      	strh	r3, [r7, #18]
 8004b90:	8a7b      	ldrh	r3, [r7, #18]
 8004b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01b      	beq.n	8004bd2 <USB_DeactivateEndpoint+0xf6>
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb0:	823b      	strh	r3, [r7, #16]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	8a3b      	ldrh	r3, [r7, #16]
 8004bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be8:	81fb      	strh	r3, [r7, #14]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	89fb      	ldrh	r3, [r7, #14]
 8004bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	8013      	strh	r3, [r2, #0]
 8004c0a:	e14d      	b.n	8004ea8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	785b      	ldrb	r3, [r3, #1]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f040 80a5 	bne.w	8004d60 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	843b      	strh	r3, [r7, #32]
 8004c24:	8c3b      	ldrh	r3, [r7, #32]
 8004c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01b      	beq.n	8004c66 <USB_DeactivateEndpoint+0x18a>
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c44:	83fb      	strh	r3, [r7, #30]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	441a      	add	r2, r3
 8004c50:	8bfb      	ldrh	r3, [r7, #30]
 8004c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	83bb      	strh	r3, [r7, #28]
 8004c74:	8bbb      	ldrh	r3, [r7, #28]
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01b      	beq.n	8004cb6 <USB_DeactivateEndpoint+0x1da>
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c94:	837b      	strh	r3, [r7, #26]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	8b7b      	ldrh	r3, [r7, #26]
 8004ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ccc:	833b      	strh	r3, [r7, #24]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	441a      	add	r2, r3
 8004cd8:	8b3b      	ldrh	r3, [r7, #24]
 8004cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d04:	82fb      	strh	r3, [r7, #22]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	441a      	add	r2, r3
 8004d10:	8afb      	ldrh	r3, [r7, #22]
 8004d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3c:	82bb      	strh	r3, [r7, #20]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	441a      	add	r2, r3
 8004d48:	8abb      	ldrh	r3, [r7, #20]
 8004d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	8013      	strh	r3, [r2, #0]
 8004d5e:	e0a3      	b.n	8004ea8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01b      	beq.n	8004db0 <USB_DeactivateEndpoint+0x2d4>
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004dbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <USB_DeactivateEndpoint+0x324>
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	853b      	strh	r3, [r7, #40]	; 0x28
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	441a      	add	r2, r3
 8004e22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	441a      	add	r2, r3
 8004e92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3734      	adds	r7, #52	; 0x34
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b0c4      	sub	sp, #272	; 0x110
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	6018      	str	r0, [r3, #0]
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	f040 8557 	bne.w	800597c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ece:	463b      	mov	r3, r7
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d905      	bls.n	8004eea <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004ede:	463b      	mov	r3, r7
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004ee8:	e004      	b.n	8004ef4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004eea:	463b      	mov	r3, r7
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	7b1b      	ldrb	r3, [r3, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d12c      	bne.n	8004f58 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004efe:	463b      	mov	r3, r7
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6959      	ldr	r1, [r3, #20]
 8004f04:	463b      	mov	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	88da      	ldrh	r2, [r3, #6]
 8004f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	1d38      	adds	r0, r7, #4
 8004f12:	6800      	ldr	r0, [r0, #0]
 8004f14:	f001 fa2c 	bl	8006370 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f18:	1d3b      	adds	r3, r7, #4
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	1d3b      	adds	r3, r7, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	463b      	mov	r3, r7
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	011a      	lsls	r2, r3, #4
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f40:	f107 0310 	add.w	r3, r7, #16
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	f000 bcdd 	b.w	8005912 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f58:	463b      	mov	r3, r7
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	78db      	ldrb	r3, [r3, #3]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	f040 8347 	bne.w	80055f2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f64:	463b      	mov	r3, r7
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a1a      	ldr	r2, [r3, #32]
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	f240 82eb 	bls.w	800554c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f90:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004f94:	1d3b      	adds	r3, r7, #4
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	463b      	mov	r3, r7
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fba:	463b      	mov	r3, r7
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc4:	1ad2      	subs	r2, r2, r3
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fcc:	1d3b      	adds	r3, r7, #4
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	463b      	mov	r3, r7
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8159 	beq.w	800529a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
 8004fee:	463b      	mov	r3, r7
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d164      	bne.n	80050c2 <USB_EPStartXfer+0x20e>
 8004ff8:	1d3b      	adds	r3, r7, #4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffe:	1d3b      	adds	r3, r7, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005006:	b29b      	uxth	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	4413      	add	r3, r2
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005010:	463b      	mov	r3, r7
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	011a      	lsls	r2, r3, #4
 8005018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501a:	4413      	add	r3, r2
 800501c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
 8005022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d112      	bne.n	8005050 <USB_EPStartXfer+0x19c>
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005034:	b29a      	uxth	r2, r3
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005048:	b29a      	uxth	r2, r3
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	e054      	b.n	80050fa <USB_EPStartXfer+0x246>
 8005050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005054:	2b3e      	cmp	r3, #62	; 0x3e
 8005056:	d817      	bhi.n	8005088 <USB_EPStartXfer+0x1d4>
 8005058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <USB_EPStartXfer+0x1c4>
 800506e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005072:	3301      	adds	r3, #1
 8005074:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800507c:	b29b      	uxth	r3, r3
 800507e:	029b      	lsls	r3, r3, #10
 8005080:	b29a      	uxth	r2, r3
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	801a      	strh	r2, [r3, #0]
 8005086:	e038      	b.n	80050fa <USB_EPStartXfer+0x246>
 8005088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <USB_EPStartXfer+0x1f4>
 800509e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a2:	3b01      	subs	r3, #1
 80050a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	029b      	lsls	r3, r3, #10
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	e01b      	b.n	80050fa <USB_EPStartXfer+0x246>
 80050c2:	463b      	mov	r3, r7
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d116      	bne.n	80050fa <USB_EPStartXfer+0x246>
 80050cc:	1d3b      	adds	r3, r7, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050da:	4413      	add	r3, r2
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
 80050de:	463b      	mov	r3, r7
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	011a      	lsls	r2, r3, #4
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e8:	4413      	add	r3, r2
 80050ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050ee:	633b      	str	r3, [r7, #48]	; 0x30
 80050f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050fa:	463b      	mov	r3, r7
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	895b      	ldrh	r3, [r3, #10]
 8005100:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005104:	463b      	mov	r3, r7
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6959      	ldr	r1, [r3, #20]
 800510a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800510e:	b29b      	uxth	r3, r3
 8005110:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005114:	1d38      	adds	r0, r7, #4
 8005116:	6800      	ldr	r0, [r0, #0]
 8005118:	f001 f92a 	bl	8006370 <USB_WritePMA>
            ep->xfer_buff += len;
 800511c:	463b      	mov	r3, r7
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695a      	ldr	r2, [r3, #20]
 8005122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005126:	441a      	add	r2, r3
 8005128:	463b      	mov	r3, r7
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800512e:	463b      	mov	r3, r7
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	463b      	mov	r3, r7
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	429a      	cmp	r2, r3
 800513c:	d909      	bls.n	8005152 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800513e:	463b      	mov	r3, r7
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a1a      	ldr	r2, [r3, #32]
 8005144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005148:	1ad2      	subs	r2, r2, r3
 800514a:	463b      	mov	r3, r7
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	621a      	str	r2, [r3, #32]
 8005150:	e008      	b.n	8005164 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005152:	463b      	mov	r3, r7
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2200      	movs	r2, #0
 8005162:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005164:	463b      	mov	r3, r7
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	785b      	ldrb	r3, [r3, #1]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d164      	bne.n	8005238 <USB_EPStartXfer+0x384>
 800516e:	1d3b      	adds	r3, r7, #4
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	1d3b      	adds	r3, r7, #4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517c:	b29b      	uxth	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	463b      	mov	r3, r7
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	011a      	lsls	r2, r3, #4
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d112      	bne.n	80051c6 <USB_EPStartXfer+0x312>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	801a      	strh	r2, [r3, #0]
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051be:	b29a      	uxth	r2, r3
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	801a      	strh	r2, [r3, #0]
 80051c4:	e057      	b.n	8005276 <USB_EPStartXfer+0x3c2>
 80051c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ca:	2b3e      	cmp	r3, #62	; 0x3e
 80051cc:	d817      	bhi.n	80051fe <USB_EPStartXfer+0x34a>
 80051ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <USB_EPStartXfer+0x33a>
 80051e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051e8:	3301      	adds	r3, #1
 80051ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	029b      	lsls	r3, r3, #10
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	801a      	strh	r2, [r3, #0]
 80051fc:	e03b      	b.n	8005276 <USB_EPStartXfer+0x3c2>
 80051fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <USB_EPStartXfer+0x36a>
 8005214:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005218:	3b01      	subs	r3, #1
 800521a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800521e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005222:	b29b      	uxth	r3, r3
 8005224:	029b      	lsls	r3, r3, #10
 8005226:	b29b      	uxth	r3, r3
 8005228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005230:	b29a      	uxth	r2, r3
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e01e      	b.n	8005276 <USB_EPStartXfer+0x3c2>
 8005238:	463b      	mov	r3, r7
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d119      	bne.n	8005276 <USB_EPStartXfer+0x3c2>
 8005242:	1d3b      	adds	r3, r7, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005250:	b29b      	uxth	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	4413      	add	r3, r2
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
 800525a:	463b      	mov	r3, r7
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	011a      	lsls	r2, r3, #4
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	4413      	add	r3, r2
 8005266:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800526a:	623b      	str	r3, [r7, #32]
 800526c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005270:	b29a      	uxth	r2, r3
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005276:	463b      	mov	r3, r7
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	891b      	ldrh	r3, [r3, #8]
 800527c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005280:	463b      	mov	r3, r7
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6959      	ldr	r1, [r3, #20]
 8005286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800528a:	b29b      	uxth	r3, r3
 800528c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005290:	1d38      	adds	r0, r7, #4
 8005292:	6800      	ldr	r0, [r0, #0]
 8005294:	f001 f86c 	bl	8006370 <USB_WritePMA>
 8005298:	e33b      	b.n	8005912 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800529a:	463b      	mov	r3, r7
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	785b      	ldrb	r3, [r3, #1]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d164      	bne.n	800536e <USB_EPStartXfer+0x4ba>
 80052a4:	1d3b      	adds	r3, r7, #4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052aa:	1d3b      	adds	r3, r7, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	4413      	add	r3, r2
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052bc:	463b      	mov	r3, r7
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	011a      	lsls	r2, r3, #4
 80052c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c6:	4413      	add	r3, r2
 80052c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d112      	bne.n	80052fc <USB_EPStartXfer+0x448>
 80052d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f8:	801a      	strh	r2, [r3, #0]
 80052fa:	e057      	b.n	80053ac <USB_EPStartXfer+0x4f8>
 80052fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005300:	2b3e      	cmp	r3, #62	; 0x3e
 8005302:	d817      	bhi.n	8005334 <USB_EPStartXfer+0x480>
 8005304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800530e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <USB_EPStartXfer+0x470>
 800531a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531e:	3301      	adds	r3, #1
 8005320:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005328:	b29b      	uxth	r3, r3
 800532a:	029b      	lsls	r3, r3, #10
 800532c:	b29a      	uxth	r2, r3
 800532e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e03b      	b.n	80053ac <USB_EPStartXfer+0x4f8>
 8005334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800533e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <USB_EPStartXfer+0x4a0>
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534e:	3b01      	subs	r3, #1
 8005350:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005358:	b29b      	uxth	r3, r3
 800535a:	029b      	lsls	r3, r3, #10
 800535c:	b29b      	uxth	r3, r3
 800535e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005366:	b29a      	uxth	r2, r3
 8005368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	e01e      	b.n	80053ac <USB_EPStartXfer+0x4f8>
 800536e:	463b      	mov	r3, r7
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d119      	bne.n	80053ac <USB_EPStartXfer+0x4f8>
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	657b      	str	r3, [r7, #84]	; 0x54
 800537e:	1d3b      	adds	r3, r7, #4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005386:	b29b      	uxth	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800538c:	4413      	add	r3, r2
 800538e:	657b      	str	r3, [r7, #84]	; 0x54
 8005390:	463b      	mov	r3, r7
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	011a      	lsls	r2, r3, #4
 8005398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800539a:	4413      	add	r3, r2
 800539c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053a0:	653b      	str	r3, [r7, #80]	; 0x50
 80053a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053ac:	463b      	mov	r3, r7
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	891b      	ldrh	r3, [r3, #8]
 80053b2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053b6:	463b      	mov	r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6959      	ldr	r1, [r3, #20]
 80053bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80053c6:	1d38      	adds	r0, r7, #4
 80053c8:	6800      	ldr	r0, [r0, #0]
 80053ca:	f000 ffd1 	bl	8006370 <USB_WritePMA>
            ep->xfer_buff += len;
 80053ce:	463b      	mov	r3, r7
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695a      	ldr	r2, [r3, #20]
 80053d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d8:	441a      	add	r2, r3
 80053da:	463b      	mov	r3, r7
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053e0:	463b      	mov	r3, r7
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a1a      	ldr	r2, [r3, #32]
 80053e6:	463b      	mov	r3, r7
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d909      	bls.n	8005404 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80053f0:	463b      	mov	r3, r7
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	463b      	mov	r3, r7
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	621a      	str	r2, [r3, #32]
 8005402:	e008      	b.n	8005416 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005404:	463b      	mov	r3, r7
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800540e:	463b      	mov	r3, r7
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005416:	1d3b      	adds	r3, r7, #4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	647b      	str	r3, [r7, #68]	; 0x44
 800541c:	463b      	mov	r3, r7
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d164      	bne.n	80054f0 <USB_EPStartXfer+0x63c>
 8005426:	1d3b      	adds	r3, r7, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800542c:	1d3b      	adds	r3, r7, #4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005434:	b29b      	uxth	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	4413      	add	r3, r2
 800543c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	011a      	lsls	r2, r3, #4
 8005446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005448:	4413      	add	r3, r2
 800544a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800544e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d112      	bne.n	800547e <USB_EPStartXfer+0x5ca>
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005462:	b29a      	uxth	r2, r3
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005476:	b29a      	uxth	r2, r3
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	e054      	b.n	8005528 <USB_EPStartXfer+0x674>
 800547e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005482:	2b3e      	cmp	r3, #62	; 0x3e
 8005484:	d817      	bhi.n	80054b6 <USB_EPStartXfer+0x602>
 8005486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800548a:	085b      	lsrs	r3, r3, #1
 800548c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <USB_EPStartXfer+0x5f2>
 800549c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054a0:	3301      	adds	r3, #1
 80054a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	e038      	b.n	8005528 <USB_EPStartXfer+0x674>
 80054b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <USB_EPStartXfer+0x622>
 80054cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054d0:	3b01      	subs	r3, #1
 80054d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29b      	uxth	r3, r3
 80054e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	e01b      	b.n	8005528 <USB_EPStartXfer+0x674>
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d116      	bne.n	8005528 <USB_EPStartXfer+0x674>
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005502:	b29b      	uxth	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005508:	4413      	add	r3, r2
 800550a:	647b      	str	r3, [r7, #68]	; 0x44
 800550c:	463b      	mov	r3, r7
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	011a      	lsls	r2, r3, #4
 8005514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005516:	4413      	add	r3, r2
 8005518:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800551c:	643b      	str	r3, [r7, #64]	; 0x40
 800551e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005522:	b29a      	uxth	r2, r3
 8005524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005526:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005528:	463b      	mov	r3, r7
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	895b      	ldrh	r3, [r3, #10]
 800552e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6959      	ldr	r1, [r3, #20]
 8005538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800553c:	b29b      	uxth	r3, r3
 800553e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005542:	1d38      	adds	r0, r7, #4
 8005544:	6800      	ldr	r0, [r0, #0]
 8005546:	f000 ff13 	bl	8006370 <USB_WritePMA>
 800554a:	e1e2      	b.n	8005912 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800554c:	463b      	mov	r3, r7
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	463b      	mov	r3, r7
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800556c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005570:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	463b      	mov	r3, r7
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800559a:	1d3b      	adds	r3, r7, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	663b      	str	r3, [r7, #96]	; 0x60
 80055a0:	1d3b      	adds	r3, r7, #4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055ae:	4413      	add	r3, r2
 80055b0:	663b      	str	r3, [r7, #96]	; 0x60
 80055b2:	463b      	mov	r3, r7
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055bc:	4413      	add	r3, r2
 80055be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055ce:	463b      	mov	r3, r7
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	891b      	ldrh	r3, [r3, #8]
 80055d4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6959      	ldr	r1, [r3, #20]
 80055de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80055e8:	1d38      	adds	r0, r7, #4
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	f000 fec0 	bl	8006370 <USB_WritePMA>
 80055f0:	e18f      	b.n	8005912 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	463b      	mov	r3, r7
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 808f 	beq.w	800572c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	67bb      	str	r3, [r7, #120]	; 0x78
 8005614:	463b      	mov	r3, r7
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d164      	bne.n	80056e8 <USB_EPStartXfer+0x834>
 800561e:	1d3b      	adds	r3, r7, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	673b      	str	r3, [r7, #112]	; 0x70
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562c:	b29b      	uxth	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005632:	4413      	add	r3, r2
 8005634:	673b      	str	r3, [r7, #112]	; 0x70
 8005636:	463b      	mov	r3, r7
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	011a      	lsls	r2, r3, #4
 800563e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005640:	4413      	add	r3, r2
 8005642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564c:	2b00      	cmp	r3, #0
 800564e:	d112      	bne.n	8005676 <USB_EPStartXfer+0x7c2>
 8005650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800565a:	b29a      	uxth	r2, r3
 800565c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	b29b      	uxth	r3, r3
 8005666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566e:	b29a      	uxth	r2, r3
 8005670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	e054      	b.n	8005720 <USB_EPStartXfer+0x86c>
 8005676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567a:	2b3e      	cmp	r3, #62	; 0x3e
 800567c:	d817      	bhi.n	80056ae <USB_EPStartXfer+0x7fa>
 800567e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <USB_EPStartXfer+0x7ea>
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	3301      	adds	r3, #1
 800569a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800569e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	029b      	lsls	r3, r3, #10
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e038      	b.n	8005720 <USB_EPStartXfer+0x86c>
 80056ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <USB_EPStartXfer+0x81a>
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	3b01      	subs	r3, #1
 80056ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	029b      	lsls	r3, r3, #10
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e01b      	b.n	8005720 <USB_EPStartXfer+0x86c>
 80056e8:	463b      	mov	r3, r7
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	785b      	ldrb	r3, [r3, #1]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d116      	bne.n	8005720 <USB_EPStartXfer+0x86c>
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005700:	4413      	add	r3, r2
 8005702:	67bb      	str	r3, [r7, #120]	; 0x78
 8005704:	463b      	mov	r3, r7
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	011a      	lsls	r2, r3, #4
 800570c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800570e:	4413      	add	r3, r2
 8005710:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005714:	677b      	str	r3, [r7, #116]	; 0x74
 8005716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800571a:	b29a      	uxth	r2, r3
 800571c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800571e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	895b      	ldrh	r3, [r3, #10]
 8005726:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800572a:	e097      	b.n	800585c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800572c:	463b      	mov	r3, r7
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d168      	bne.n	8005808 <USB_EPStartXfer+0x954>
 8005736:	1d3b      	adds	r3, r7, #4
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005746:	b29b      	uxth	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800574e:	4413      	add	r3, r2
 8005750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005754:	463b      	mov	r3, r7
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	011a      	lsls	r2, r3, #4
 800575c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005760:	4413      	add	r3, r2
 8005762:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005766:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d112      	bne.n	8005796 <USB_EPStartXfer+0x8e2>
 8005770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800577a:	b29a      	uxth	r2, r3
 800577c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578e:	b29a      	uxth	r2, r3
 8005790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	e05d      	b.n	8005852 <USB_EPStartXfer+0x99e>
 8005796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579a:	2b3e      	cmp	r3, #62	; 0x3e
 800579c:	d817      	bhi.n	80057ce <USB_EPStartXfer+0x91a>
 800579e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <USB_EPStartXfer+0x90a>
 80057b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057b8:	3301      	adds	r3, #1
 80057ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	e041      	b.n	8005852 <USB_EPStartXfer+0x99e>
 80057ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <USB_EPStartXfer+0x93a>
 80057e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057e8:	3b01      	subs	r3, #1
 80057ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	029b      	lsls	r3, r3, #10
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005800:	b29a      	uxth	r2, r3
 8005802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005804:	801a      	strh	r2, [r3, #0]
 8005806:	e024      	b.n	8005852 <USB_EPStartXfer+0x99e>
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d11f      	bne.n	8005852 <USB_EPStartXfer+0x99e>
 8005812:	1d3b      	adds	r3, r7, #4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005822:	b29b      	uxth	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800582a:	4413      	add	r3, r2
 800582c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005830:	463b      	mov	r3, r7
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	011a      	lsls	r2, r3, #4
 8005838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800583c:	4413      	add	r3, r2
 800583e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005842:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584a:	b29a      	uxth	r2, r3
 800584c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005850:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005852:	463b      	mov	r3, r7
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	891b      	ldrh	r3, [r3, #8]
 8005858:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800585c:	463b      	mov	r3, r7
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6959      	ldr	r1, [r3, #20]
 8005862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005866:	b29b      	uxth	r3, r3
 8005868:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800586c:	1d38      	adds	r0, r7, #4
 800586e:	6800      	ldr	r0, [r0, #0]
 8005870:	f000 fd7e 	bl	8006370 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005874:	463b      	mov	r3, r7
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d122      	bne.n	80058c4 <USB_EPStartXfer+0xa10>
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	463b      	mov	r3, r7
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005898:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80058ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058be:	b29b      	uxth	r3, r3
 80058c0:	8013      	strh	r3, [r2, #0]
 80058c2:	e026      	b.n	8005912 <USB_EPStartXfer+0xa5e>
 80058c4:	463b      	mov	r3, r7
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d121      	bne.n	8005912 <USB_EPStartXfer+0xa5e>
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	463b      	mov	r3, r7
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80058ec:	1d3b      	adds	r3, r7, #4
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	463b      	mov	r3, r7
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	441a      	add	r2, r3
 80058fa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80058fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800590a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590e:	b29b      	uxth	r3, r3
 8005910:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005912:	1d3b      	adds	r3, r7, #4
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	463b      	mov	r3, r7
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f107 020e 	add.w	r2, r7, #14
 8005928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005930:	8013      	strh	r3, [r2, #0]
 8005932:	f107 030e 	add.w	r3, r7, #14
 8005936:	f107 020e 	add.w	r2, r7, #14
 800593a:	8812      	ldrh	r2, [r2, #0]
 800593c:	f082 0210 	eor.w	r2, r2, #16
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	f107 030e 	add.w	r3, r7, #14
 8005946:	f107 020e 	add.w	r2, r7, #14
 800594a:	8812      	ldrh	r2, [r2, #0]
 800594c:	f082 0220 	eor.w	r2, r2, #32
 8005950:	801a      	strh	r2, [r3, #0]
 8005952:	1d3b      	adds	r3, r7, #4
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	463b      	mov	r3, r7
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	441a      	add	r2, r3
 8005960:	f107 030e 	add.w	r3, r7, #14
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]
 800597a:	e3b5      	b.n	80060e8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800597c:	463b      	mov	r3, r7
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	7b1b      	ldrb	r3, [r3, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 8090 	bne.w	8005aa8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005988:	463b      	mov	r3, r7
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	d90e      	bls.n	80059b6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005998:	463b      	mov	r3, r7
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80059a2:	463b      	mov	r3, r7
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699a      	ldr	r2, [r3, #24]
 80059a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ac:	1ad2      	subs	r2, r2, r3
 80059ae:	463b      	mov	r3, r7
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	619a      	str	r2, [r3, #24]
 80059b4:	e008      	b.n	80059c8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80059b6:	463b      	mov	r3, r7
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2200      	movs	r2, #0
 80059c6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059c8:	1d3b      	adds	r3, r7, #4
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059d0:	1d3b      	adds	r3, r7, #4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d8:	b29b      	uxth	r3, r3
 80059da:	461a      	mov	r2, r3
 80059dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059e0:	4413      	add	r3, r2
 80059e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059e6:	463b      	mov	r3, r7
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	011a      	lsls	r2, r3, #4
 80059ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059f2:	4413      	add	r3, r2
 80059f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d116      	bne.n	8005a32 <USB_EPStartXfer+0xb7e>
 8005a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	e32c      	b.n	800608c <USB_EPStartXfer+0x11d8>
 8005a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a36:	2b3e      	cmp	r3, #62	; 0x3e
 8005a38:	d818      	bhi.n	8005a6c <USB_EPStartXfer+0xbb8>
 8005a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <USB_EPStartXfer+0xba6>
 8005a50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a54:	3301      	adds	r3, #1
 8005a56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	029b      	lsls	r3, r3, #10
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	e30f      	b.n	800608c <USB_EPStartXfer+0x11d8>
 8005a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <USB_EPStartXfer+0xbd8>
 8005a82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a86:	3b01      	subs	r3, #1
 8005a88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	029b      	lsls	r3, r3, #10
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	e2f1      	b.n	800608c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	78db      	ldrb	r3, [r3, #3]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	f040 818f 	bne.w	8005dd2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	785b      	ldrb	r3, [r3, #1]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d175      	bne.n	8005baa <USB_EPStartXfer+0xcf6>
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005adc:	463b      	mov	r3, r7
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	011a      	lsls	r2, r3, #4
 8005ae4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ae8:	4413      	add	r3, r2
 8005aea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005af2:	463b      	mov	r3, r7
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d116      	bne.n	8005b2a <USB_EPStartXfer+0xc76>
 8005afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	e065      	b.n	8005bf6 <USB_EPStartXfer+0xd42>
 8005b2a:	463b      	mov	r3, r7
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b3e      	cmp	r3, #62	; 0x3e
 8005b32:	d81a      	bhi.n	8005b6a <USB_EPStartXfer+0xcb6>
 8005b34:	463b      	mov	r3, r7
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	085b      	lsrs	r3, r3, #1
 8005b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b40:	463b      	mov	r3, r7
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <USB_EPStartXfer+0xca4>
 8005b4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b52:	3301      	adds	r3, #1
 8005b54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	029b      	lsls	r3, r3, #10
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	e045      	b.n	8005bf6 <USB_EPStartXfer+0xd42>
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b76:	463b      	mov	r3, r7
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f003 031f 	and.w	r3, r3, #31
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <USB_EPStartXfer+0xcda>
 8005b84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	029b      	lsls	r3, r3, #10
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e025      	b.n	8005bf6 <USB_EPStartXfer+0xd42>
 8005baa:	463b      	mov	r3, r7
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d120      	bne.n	8005bf6 <USB_EPStartXfer+0xd42>
 8005bb4:	1d3b      	adds	r3, r7, #4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bbc:	1d3b      	adds	r3, r7, #4
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bcc:	4413      	add	r3, r2
 8005bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	011a      	lsls	r2, r3, #4
 8005bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	1d3b      	adds	r3, r7, #4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d175      	bne.n	8005cf4 <USB_EPStartXfer+0xe40>
 8005c08:	1d3b      	adds	r3, r7, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c10:	1d3b      	adds	r3, r7, #4
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c20:	4413      	add	r3, r2
 8005c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	011a      	lsls	r2, r3, #4
 8005c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c32:	4413      	add	r3, r2
 8005c34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d116      	bne.n	8005c74 <USB_EPStartXfer+0xdc0>
 8005c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c58:	801a      	strh	r2, [r3, #0]
 8005c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	e061      	b.n	8005d38 <USB_EPStartXfer+0xe84>
 8005c74:	463b      	mov	r3, r7
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c7c:	d81a      	bhi.n	8005cb4 <USB_EPStartXfer+0xe00>
 8005c7e:	463b      	mov	r3, r7
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <USB_EPStartXfer+0xdee>
 8005c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	029b      	lsls	r3, r3, #10
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	e041      	b.n	8005d38 <USB_EPStartXfer+0xe84>
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <USB_EPStartXfer+0xe24>
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	029b      	lsls	r3, r3, #10
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	e021      	b.n	8005d38 <USB_EPStartXfer+0xe84>
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d11c      	bne.n	8005d38 <USB_EPStartXfer+0xe84>
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d0e:	4413      	add	r3, r2
 8005d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d14:	463b      	mov	r3, r7
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	011a      	lsls	r2, r3, #4
 8005d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d20:	4413      	add	r3, r2
 8005d22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d36:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005d38:	463b      	mov	r3, r7
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 81a4 	beq.w	800608c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005d44:	1d3b      	adds	r3, r7, #4
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	463b      	mov	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d58:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <USB_EPStartXfer+0xebc>
 8005d64:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10d      	bne.n	8005d8c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d70:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f040 8187 	bne.w	800608c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d7e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f040 8180 	bne.w	800608c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005d8c:	1d3b      	adds	r3, r7, #4
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	463b      	mov	r3, r7
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005daa:	1d3b      	adds	r3, r7, #4
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	463b      	mov	r3, r7
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]
 8005dd0:	e15c      	b.n	800608c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	f040 8155 	bne.w	8006088 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005dde:	463b      	mov	r3, r7
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	699a      	ldr	r2, [r3, #24]
 8005de4:	463b      	mov	r3, r7
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d90e      	bls.n	8005e0c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005dee:	463b      	mov	r3, r7
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005df8:	463b      	mov	r3, r7
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e02:	1ad2      	subs	r2, r2, r3
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	619a      	str	r2, [r3, #24]
 8005e0a:	e008      	b.n	8005e1e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005e16:	463b      	mov	r3, r7
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e1e:	463b      	mov	r3, r7
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d16f      	bne.n	8005f08 <USB_EPStartXfer+0x1054>
 8005e28:	1d3b      	adds	r3, r7, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e30:	1d3b      	adds	r3, r7, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e40:	4413      	add	r3, r2
 8005e42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e46:	463b      	mov	r3, r7
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	011a      	lsls	r2, r3, #4
 8005e4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e52:	4413      	add	r3, r2
 8005e54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d116      	bne.n	8005e92 <USB_EPStartXfer+0xfde>
 8005e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e05f      	b.n	8005f52 <USB_EPStartXfer+0x109e>
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	2b3e      	cmp	r3, #62	; 0x3e
 8005e98:	d818      	bhi.n	8005ecc <USB_EPStartXfer+0x1018>
 8005e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <USB_EPStartXfer+0x1006>
 8005eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	e042      	b.n	8005f52 <USB_EPStartXfer+0x109e>
 8005ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eda:	f003 031f 	and.w	r3, r3, #31
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <USB_EPStartXfer+0x1038>
 8005ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	029b      	lsls	r3, r3, #10
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e024      	b.n	8005f52 <USB_EPStartXfer+0x109e>
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d11f      	bne.n	8005f52 <USB_EPStartXfer+0x109e>
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f1a:	1d3b      	adds	r3, r7, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f30:	463b      	mov	r3, r7
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	011a      	lsls	r2, r3, #4
 8005f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f50:	801a      	strh	r2, [r3, #0]
 8005f52:	1d3b      	adds	r3, r7, #4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	785b      	ldrb	r3, [r3, #1]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d16f      	bne.n	8006044 <USB_EPStartXfer+0x1190>
 8005f64:	1d3b      	adds	r3, r7, #4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f6c:	1d3b      	adds	r3, r7, #4
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f82:	463b      	mov	r3, r7
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	011a      	lsls	r2, r3, #4
 8005f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f8e:	4413      	add	r3, r2
 8005f90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d116      	bne.n	8005fce <USB_EPStartXfer+0x111a>
 8005fa0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	e05e      	b.n	800608c <USB_EPStartXfer+0x11d8>
 8005fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd2:	2b3e      	cmp	r3, #62	; 0x3e
 8005fd4:	d818      	bhi.n	8006008 <USB_EPStartXfer+0x1154>
 8005fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <USB_EPStartXfer+0x1142>
 8005fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	029b      	lsls	r3, r3, #10
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	e041      	b.n	800608c <USB_EPStartXfer+0x11d8>
 8006008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <USB_EPStartXfer+0x1174>
 800601e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006022:	3b01      	subs	r3, #1
 8006024:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800602c:	b29b      	uxth	r3, r3
 800602e:	029b      	lsls	r3, r3, #10
 8006030:	b29b      	uxth	r3, r3
 8006032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603a:	b29a      	uxth	r2, r3
 800603c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	e023      	b.n	800608c <USB_EPStartXfer+0x11d8>
 8006044:	463b      	mov	r3, r7
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d11e      	bne.n	800608c <USB_EPStartXfer+0x11d8>
 800604e:	1d3b      	adds	r3, r7, #4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006056:	b29b      	uxth	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800605e:	4413      	add	r3, r2
 8006060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006064:	463b      	mov	r3, r7
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	011a      	lsls	r2, r3, #4
 800606c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006070:	4413      	add	r3, r2
 8006072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800607a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800607e:	b29a      	uxth	r2, r3
 8006080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e001      	b.n	800608c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e02e      	b.n	80060ea <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800608c:	1d3b      	adds	r3, r7, #4
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	463b      	mov	r3, r7
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80060aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80060ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80060b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80060ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80060c2:	1d3b      	adds	r3, r7, #4
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	463b      	mov	r3, r7
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	441a      	add	r2, r3
 80060d0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80060d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d020      	beq.n	8006148 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611c:	81bb      	strh	r3, [r7, #12]
 800611e:	89bb      	ldrh	r3, [r7, #12]
 8006120:	f083 0310 	eor.w	r3, r3, #16
 8006124:	81bb      	strh	r3, [r7, #12]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	441a      	add	r2, r3
 8006130:	89bb      	ldrh	r3, [r7, #12]
 8006132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]
 8006146:	e01f      	b.n	8006188 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	81fb      	strh	r3, [r7, #14]
 8006160:	89fb      	ldrh	r3, [r7, #14]
 8006162:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006166:	81fb      	strh	r3, [r7, #14]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	441a      	add	r2, r3
 8006172:	89fb      	ldrh	r3, [r7, #14]
 8006174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006184:	b29b      	uxth	r3, r3
 8006186:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	7b1b      	ldrb	r3, [r3, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f040 809d 	bne.w	80062e2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d04c      	beq.n	800624a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	823b      	strh	r3, [r7, #16]
 80061be:	8a3b      	ldrh	r3, [r7, #16]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01b      	beq.n	8006200 <USB_EPClearStall+0x6c>
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061de:	81fb      	strh	r3, [r7, #14]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	441a      	add	r2, r3
 80061ea:	89fb      	ldrh	r3, [r7, #14]
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	78db      	ldrb	r3, [r3, #3]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d06c      	beq.n	80062e2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621e:	81bb      	strh	r3, [r7, #12]
 8006220:	89bb      	ldrh	r3, [r7, #12]
 8006222:	f083 0320 	eor.w	r3, r3, #32
 8006226:	81bb      	strh	r3, [r7, #12]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	441a      	add	r2, r3
 8006232:	89bb      	ldrh	r3, [r7, #12]
 8006234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006244:	b29b      	uxth	r3, r3
 8006246:	8013      	strh	r3, [r2, #0]
 8006248:	e04b      	b.n	80062e2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	82fb      	strh	r3, [r7, #22]
 8006258:	8afb      	ldrh	r3, [r7, #22]
 800625a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d01b      	beq.n	800629a <USB_EPClearStall+0x106>
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	b29b      	uxth	r3, r3
 8006270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006278:	82bb      	strh	r3, [r7, #20]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	441a      	add	r2, r3
 8006284:	8abb      	ldrh	r3, [r7, #20]
 8006286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006296:	b29b      	uxth	r3, r3
 8006298:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b0:	827b      	strh	r3, [r7, #18]
 80062b2:	8a7b      	ldrh	r3, [r7, #18]
 80062b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062b8:	827b      	strh	r3, [r7, #18]
 80062ba:	8a7b      	ldrh	r3, [r7, #18]
 80062bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062c0:	827b      	strh	r3, [r7, #18]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	8a7b      	ldrh	r3, [r7, #18]
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr

080062ee <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80062fa:	78fb      	ldrb	r3, [r7, #3]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2280      	movs	r2, #128	; 0x80
 8006304:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr

08006314 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800634a:	b29b      	uxth	r3, r3
 800634c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800634e:	68fb      	ldr	r3, [r7, #12]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr

0800635a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006370:	b480      	push	{r7}
 8006372:	b08d      	sub	sp, #52	; 0x34
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4611      	mov	r1, r2
 800637c:	461a      	mov	r2, r3
 800637e:	460b      	mov	r3, r1
 8006380:	80fb      	strh	r3, [r7, #6]
 8006382:	4613      	mov	r3, r2
 8006384:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006386:	88bb      	ldrh	r3, [r7, #4]
 8006388:	3301      	adds	r3, #1
 800638a:	085b      	lsrs	r3, r3, #1
 800638c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	005a      	lsls	r2, r3, #1
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a8:	e01e      	b.n	80063e8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	3301      	adds	r3, #1
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	b29b      	uxth	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	3302      	adds	r3, #2
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	3302      	adds	r3, #2
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	3301      	adds	r3, #1
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	3b01      	subs	r3, #1
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1dd      	bne.n	80063aa <USB_WritePMA+0x3a>
  }
}
 80063ee:	bf00      	nop
 80063f0:	bf00      	nop
 80063f2:	3734      	adds	r7, #52	; 0x34
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr

080063fa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b08b      	sub	sp, #44	; 0x2c
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	4611      	mov	r1, r2
 8006406:	461a      	mov	r2, r3
 8006408:	460b      	mov	r3, r1
 800640a:	80fb      	strh	r3, [r7, #6]
 800640c:	4613      	mov	r3, r2
 800640e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006410:	88bb      	ldrh	r3, [r7, #4]
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	b29b      	uxth	r3, r3
 8006416:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	005a      	lsls	r2, r3, #1
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800642c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
 8006432:	e01b      	b.n	800646c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	3302      	adds	r3, #2
 8006440:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	b2da      	uxtb	r2, r3
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	3301      	adds	r3, #1
 800644e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	0a1b      	lsrs	r3, r3, #8
 8006454:	b2da      	uxtb	r2, r3
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	3301      	adds	r3, #1
 800645e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	3302      	adds	r3, #2
 8006464:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	3b01      	subs	r3, #1
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e0      	bne.n	8006434 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006472:	88bb      	ldrh	r3, [r7, #4]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d007      	beq.n	800648e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	b2da      	uxtb	r2, r3
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	701a      	strb	r2, [r3, #0]
  }
}
 800648e:	bf00      	nop
 8006490:	372c      	adds	r7, #44	; 0x2c
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr

08006498 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	7c1b      	ldrb	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d115      	bne.n	80064dc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064b4:	2202      	movs	r2, #2
 80064b6:	2181      	movs	r1, #129	; 0x81
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7fa fcde 	bl	8000e7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064c8:	2202      	movs	r2, #2
 80064ca:	2101      	movs	r1, #1
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7fa fcd4 	bl	8000e7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80064da:	e012      	b.n	8006502 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064dc:	2340      	movs	r3, #64	; 0x40
 80064de:	2202      	movs	r2, #2
 80064e0:	2181      	movs	r1, #129	; 0x81
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fa fcc9 	bl	8000e7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064ee:	2340      	movs	r3, #64	; 0x40
 80064f0:	2202      	movs	r2, #2
 80064f2:	2101      	movs	r1, #1
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7fa fcc0 	bl	8000e7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006502:	2308      	movs	r3, #8
 8006504:	2203      	movs	r2, #3
 8006506:	2182      	movs	r1, #130	; 0x82
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7fa fcb6 	bl	8000e7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006514:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006518:	f7fa fdd6 	bl	80010c8 <USBD_static_malloc>
 800651c:	4602      	mov	r2, r0
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
 8006532:	e026      	b.n	8006582 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2200      	movs	r2, #0
 800654a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2200      	movs	r2, #0
 8006552:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	7c1b      	ldrb	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006568:	2101      	movs	r1, #1
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fa fd76 	bl	800105c <USBD_LL_PrepareReceive>
 8006570:	e007      	b.n	8006582 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006578:	2340      	movs	r3, #64	; 0x40
 800657a:	2101      	movs	r1, #1
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fa fd6d 	bl	800105c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800659c:	2181      	movs	r1, #129	; 0x81
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fa fc91 	bl	8000ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80065aa:	2101      	movs	r1, #1
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fa fc8a 	bl	8000ec6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80065ba:	2182      	movs	r1, #130	; 0x82
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7fa fc82 	bl	8000ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00e      	beq.n	80065f0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fa fd7c 	bl	80010e0 <USBD_static_free>
    pdev->pClassData = NULL;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b086      	sub	sp, #24
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006620:	2b00      	cmp	r3, #0
 8006622:	d039      	beq.n	8006698 <USBD_CDC_Setup+0x9e>
 8006624:	2b20      	cmp	r3, #32
 8006626:	d17f      	bne.n	8006728 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	88db      	ldrh	r3, [r3, #6]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d029      	beq.n	8006684 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	b25b      	sxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	da11      	bge.n	800665e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006646:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	88d2      	ldrh	r2, [r2, #6]
 800664c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800664e:	6939      	ldr	r1, [r7, #16]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	88db      	ldrh	r3, [r3, #6]
 8006654:	461a      	mov	r2, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 f9d9 	bl	8007a0e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800665c:	e06b      	b.n	8006736 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	785a      	ldrb	r2, [r3, #1]
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	88db      	ldrh	r3, [r3, #6]
 800666c:	b2da      	uxtb	r2, r3
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006674:	6939      	ldr	r1, [r7, #16]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	88db      	ldrh	r3, [r3, #6]
 800667a:	461a      	mov	r2, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 f9f4 	bl	8007a6a <USBD_CtlPrepareRx>
      break;
 8006682:	e058      	b.n	8006736 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	7850      	ldrb	r0, [r2, #1]
 8006690:	2200      	movs	r2, #0
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	4798      	blx	r3
      break;
 8006696:	e04e      	b.n	8006736 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b0b      	cmp	r3, #11
 800669e:	d02e      	beq.n	80066fe <USBD_CDC_Setup+0x104>
 80066a0:	2b0b      	cmp	r3, #11
 80066a2:	dc38      	bgt.n	8006716 <USBD_CDC_Setup+0x11c>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <USBD_CDC_Setup+0xb4>
 80066a8:	2b0a      	cmp	r3, #10
 80066aa:	d014      	beq.n	80066d6 <USBD_CDC_Setup+0xdc>
 80066ac:	e033      	b.n	8006716 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d107      	bne.n	80066c8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80066b8:	f107 030c 	add.w	r3, r7, #12
 80066bc:	2202      	movs	r2, #2
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 f9a4 	bl	8007a0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066c6:	e02e      	b.n	8006726 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 f935 	bl	800793a <USBD_CtlError>
            ret = USBD_FAIL;
 80066d0:	2302      	movs	r3, #2
 80066d2:	75fb      	strb	r3, [r7, #23]
          break;
 80066d4:	e027      	b.n	8006726 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d107      	bne.n	80066f0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80066e0:	f107 030f 	add.w	r3, r7, #15
 80066e4:	2201      	movs	r2, #1
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 f990 	bl	8007a0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066ee:	e01a      	b.n	8006726 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 f921 	bl	800793a <USBD_CtlError>
            ret = USBD_FAIL;
 80066f8:	2302      	movs	r3, #2
 80066fa:	75fb      	strb	r3, [r7, #23]
          break;
 80066fc:	e013      	b.n	8006726 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006704:	2b03      	cmp	r3, #3
 8006706:	d00d      	beq.n	8006724 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 f915 	bl	800793a <USBD_CtlError>
            ret = USBD_FAIL;
 8006710:	2302      	movs	r3, #2
 8006712:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006714:	e006      	b.n	8006724 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 f90e 	bl	800793a <USBD_CtlError>
          ret = USBD_FAIL;
 800671e:	2302      	movs	r3, #2
 8006720:	75fb      	strb	r3, [r7, #23]
          break;
 8006722:	e000      	b.n	8006726 <USBD_CDC_Setup+0x12c>
          break;
 8006724:	bf00      	nop
      }
      break;
 8006726:	e006      	b.n	8006736 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 f905 	bl	800793a <USBD_CtlError>
      ret = USBD_FAIL;
 8006730:	2302      	movs	r3, #2
 8006732:	75fb      	strb	r3, [r7, #23]
      break;
 8006734:	bf00      	nop
  }

  return ret;
 8006736:	7dfb      	ldrb	r3, [r7, #23]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006752:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800675a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d03a      	beq.n	80067dc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006766:	78fa      	ldrb	r2, [r7, #3]
 8006768:	6879      	ldr	r1, [r7, #4]
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	440b      	add	r3, r1
 8006774:	331c      	adds	r3, #28
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d029      	beq.n	80067d0 <USBD_CDC_DataIn+0x90>
 800677c:	78fa      	ldrb	r2, [r7, #3]
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	440b      	add	r3, r1
 800678a:	331c      	adds	r3, #28
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	78f9      	ldrb	r1, [r7, #3]
 8006790:	68b8      	ldr	r0, [r7, #8]
 8006792:	460b      	mov	r3, r1
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	4403      	add	r3, r0
 800679c:	3338      	adds	r3, #56	; 0x38
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80067a4:	fb03 f301 	mul.w	r3, r3, r1
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d110      	bne.n	80067d0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	331c      	adds	r3, #28
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067c2:	78f9      	ldrb	r1, [r7, #3]
 80067c4:	2300      	movs	r3, #0
 80067c6:	2200      	movs	r2, #0
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fa fc24 	bl	8001016 <USBD_LL_Transmit>
 80067ce:	e003      	b.n	80067d8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	e000      	b.n	80067de <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80067dc:	2302      	movs	r3, #2
  }
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fa fc4f 	bl	80010a2 <USBD_LL_GetRxDataSize>
 8006804:	4602      	mov	r2, r0
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00d      	beq.n	8006832 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800682a:	4611      	mov	r1, r2
 800682c:	4798      	blx	r3

    return USBD_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	e000      	b.n	8006834 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006832:	2302      	movs	r3, #2
  }
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006852:	2b00      	cmp	r3, #0
 8006854:	d015      	beq.n	8006882 <USBD_CDC_EP0_RxReady+0x46>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800685c:	2bff      	cmp	r3, #255	; 0xff
 800685e:	d010      	beq.n	8006882 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800686e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006876:	b292      	uxth	r2, r2
 8006878:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	22ff      	movs	r2, #255	; 0xff
 800687e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2243      	movs	r2, #67	; 0x43
 8006898:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800689a:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	200000f4 	.word	0x200000f4

080068ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2243      	movs	r2, #67	; 0x43
 80068b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80068ba:	4b03      	ldr	r3, [pc, #12]	; (80068c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80068bc:	4618      	mov	r0, r3
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bc80      	pop	{r7}
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	200000b0 	.word	0x200000b0

080068cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2243      	movs	r2, #67	; 0x43
 80068d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80068da:	4b03      	ldr	r3, [pc, #12]	; (80068e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20000138 	.word	0x20000138

080068ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	220a      	movs	r2, #10
 80068f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80068fa:	4b03      	ldr	r3, [pc, #12]	; (8006908 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	bc80      	pop	{r7}
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	2000006c 	.word	0x2000006c

0800690c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006916:	2302      	movs	r3, #2
 8006918:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr

08006938 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	4613      	mov	r3, r2
 8006944:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr

0800696a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr

08006990 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d017      	beq.n	80069da <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	7c1b      	ldrb	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d109      	bne.n	80069c6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069bc:	2101      	movs	r1, #1
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fa fb4c 	bl	800105c <USBD_LL_PrepareReceive>
 80069c4:	e007      	b.n	80069d6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069cc:	2340      	movs	r3, #64	; 0x40
 80069ce:	2101      	movs	r1, #1
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7fa fb43 	bl	800105c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e000      	b.n	80069dc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80069da:	2302      	movs	r3, #2
  }
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80069f8:	2302      	movs	r3, #2
 80069fa:	e01a      	b.n	8006a32 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	79fa      	ldrb	r2, [r7, #7]
 8006a28:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7fa f9b0 	bl	8000d90 <USBD_LL_Init>

  return USBD_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d006      	beq.n	8006a5c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
 8006a5a:	e001      	b.n	8006a60 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fa f9e5 	bl	8000e44 <USBD_LL_Start>

  return USBD_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00c      	beq.n	8006acc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	4611      	mov	r1, r2
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	78fa      	ldrb	r2, [r7, #3]
 8006aec:	4611      	mov	r1, r2
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3

  return USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fed7 	bl	80078c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b22:	461a      	mov	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d016      	beq.n	8006b66 <USBD_LL_SetupStage+0x6a>
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d81c      	bhi.n	8006b76 <USBD_LL_SetupStage+0x7a>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <USBD_LL_SetupStage+0x4a>
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d008      	beq.n	8006b56 <USBD_LL_SetupStage+0x5a>
 8006b44:	e017      	b.n	8006b76 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f9ca 	bl	8006ee8 <USBD_StdDevReq>
      break;
 8006b54:	e01a      	b.n	8006b8c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa2c 	bl	8006fbc <USBD_StdItfReq>
      break;
 8006b64:	e012      	b.n	8006b8c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa6c 	bl	800704c <USBD_StdEPReq>
      break;
 8006b74:	e00a      	b.n	8006b8c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7fa f9bd 	bl	8000f04 <USBD_LL_StallEP>
      break;
 8006b8a:	bf00      	nop
  }

  return USBD_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b086      	sub	sp, #24
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	60f8      	str	r0, [r7, #12]
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	607a      	str	r2, [r7, #4]
 8006ba2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d14b      	bne.n	8006c42 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bb0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d134      	bne.n	8006c26 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d919      	bls.n	8006bfc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	1ad2      	subs	r2, r2, r3
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d203      	bcs.n	8006bea <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	e002      	b.n	8006bf0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 ff56 	bl	8007aa6 <USBD_CtlContinueRx>
 8006bfa:	e038      	b.n	8006c6e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d105      	bne.n	8006c1e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 ff53 	bl	8007aca <USBD_CtlSendStatus>
 8006c24:	e023      	b.n	8006c6e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c2c:	2b05      	cmp	r3, #5
 8006c2e:	d11e      	bne.n	8006c6e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006c38:	2100      	movs	r1, #0
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7fa f962 	bl	8000f04 <USBD_LL_StallEP>
 8006c40:	e015      	b.n	8006c6e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00d      	beq.n	8006c6a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d108      	bne.n	8006c6a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	7afa      	ldrb	r2, [r7, #11]
 8006c62:	4611      	mov	r1, r2
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	4798      	blx	r3
 8006c68:	e001      	b.n	8006c6e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e000      	b.n	8006c70 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	460b      	mov	r3, r1
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c86:	7afb      	ldrb	r3, [r7, #11]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d17f      	bne.n	8006d8c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3314      	adds	r3, #20
 8006c90:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d15c      	bne.n	8006d56 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d915      	bls.n	8006cd4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 fec0 	bl	8007a46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2100      	movs	r1, #0
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7fa f9c5 	bl	800105c <USBD_LL_PrepareReceive>
 8006cd2:	e04e      	b.n	8006d72 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	6912      	ldr	r2, [r2, #16]
 8006cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ce0:	fb02 f201 	mul.w	r2, r2, r1
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d11c      	bne.n	8006d24 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d316      	bcc.n	8006d24 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d20f      	bcs.n	8006d24 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d04:	2200      	movs	r2, #0
 8006d06:	2100      	movs	r1, #0
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 fe9c 	bl	8007a46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d16:	2300      	movs	r3, #0
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7fa f99d 	bl	800105c <USBD_LL_PrepareReceive>
 8006d22:	e026      	b.n	8006d72 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d105      	bne.n	8006d46 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d46:	2180      	movs	r1, #128	; 0x80
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7fa f8db 	bl	8000f04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fece 	bl	8007af0 <USBD_CtlReceiveStatus>
 8006d54:	e00d      	b.n	8006d72 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d004      	beq.n	8006d6a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d103      	bne.n	8006d72 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d6a:	2180      	movs	r1, #128	; 0x80
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7fa f8c9 	bl	8000f04 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d11d      	bne.n	8006db8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fe81 	bl	8006a84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d8a:	e015      	b.n	8006db8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00d      	beq.n	8006db4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d108      	bne.n	8006db4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	7afa      	ldrb	r2, [r7, #11]
 8006dac:	4611      	mov	r1, r2
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	4798      	blx	r3
 8006db2:	e001      	b.n	8006db8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006db4:	2302      	movs	r3, #2
 8006db6:	e000      	b.n	8006dba <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dca:	2340      	movs	r3, #64	; 0x40
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2100      	movs	r1, #0
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fa f852 	bl	8000e7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2240      	movs	r2, #64	; 0x40
 8006de2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006de6:	2340      	movs	r3, #64	; 0x40
 8006de8:	2200      	movs	r2, #0
 8006dea:	2180      	movs	r1, #128	; 0x80
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7fa f844 	bl	8000e7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2240      	movs	r2, #64	; 0x40
 8006dfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d009      	beq.n	8006e3a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6852      	ldr	r2, [r2, #4]
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	4611      	mov	r1, r2
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
  }

  return USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	78fa      	ldrb	r2, [r7, #3]
 8006e54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc80      	pop	{r7}
 8006e60:	4770      	bx	lr

08006e62 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2204      	movs	r2, #4
 8006e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d105      	bne.n	8006ea8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr

08006eb4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d10b      	bne.n	8006ede <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d005      	beq.n	8006ede <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d005      	beq.n	8006f0e <USBD_StdDevReq+0x26>
 8006f02:	2b40      	cmp	r3, #64	; 0x40
 8006f04:	d84f      	bhi.n	8006fa6 <USBD_StdDevReq+0xbe>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <USBD_StdDevReq+0x36>
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d14b      	bne.n	8006fa6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
      break;
 8006f1c:	e048      	b.n	8006fb0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b09      	cmp	r3, #9
 8006f24:	d839      	bhi.n	8006f9a <USBD_StdDevReq+0xb2>
 8006f26:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <USBD_StdDevReq+0x44>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f7d 	.word	0x08006f7d
 8006f30:	08006f91 	.word	0x08006f91
 8006f34:	08006f9b 	.word	0x08006f9b
 8006f38:	08006f87 	.word	0x08006f87
 8006f3c:	08006f9b 	.word	0x08006f9b
 8006f40:	08006f5f 	.word	0x08006f5f
 8006f44:	08006f55 	.word	0x08006f55
 8006f48:	08006f9b 	.word	0x08006f9b
 8006f4c:	08006f73 	.word	0x08006f73
 8006f50:	08006f69 	.word	0x08006f69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f9dc 	bl	8007314 <USBD_GetDescriptor>
          break;
 8006f5c:	e022      	b.n	8006fa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fb3f 	bl	80075e4 <USBD_SetAddress>
          break;
 8006f66:	e01d      	b.n	8006fa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fb7e 	bl	800766c <USBD_SetConfig>
          break;
 8006f70:	e018      	b.n	8006fa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fc07 	bl	8007788 <USBD_GetConfig>
          break;
 8006f7a:	e013      	b.n	8006fa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fc37 	bl	80077f2 <USBD_GetStatus>
          break;
 8006f84:	e00e      	b.n	8006fa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fc65 	bl	8007858 <USBD_SetFeature>
          break;
 8006f8e:	e009      	b.n	8006fa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fc74 	bl	8007880 <USBD_ClrFeature>
          break;
 8006f98:	e004      	b.n	8006fa4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fccc 	bl	800793a <USBD_CtlError>
          break;
 8006fa2:	bf00      	nop
      }
      break;
 8006fa4:	e004      	b.n	8006fb0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fcc6 	bl	800793a <USBD_CtlError>
      break;
 8006fae:	bf00      	nop
  }

  return ret;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop

08006fbc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	d005      	beq.n	8006fe2 <USBD_StdItfReq+0x26>
 8006fd6:	2b40      	cmp	r3, #64	; 0x40
 8006fd8:	d82e      	bhi.n	8007038 <USBD_StdItfReq+0x7c>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <USBD_StdItfReq+0x26>
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d12a      	bne.n	8007038 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d81d      	bhi.n	800702a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	889b      	ldrh	r3, [r3, #4]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d813      	bhi.n	8007020 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	88db      	ldrh	r3, [r3, #6]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d110      	bne.n	8007034 <USBD_StdItfReq+0x78>
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10d      	bne.n	8007034 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fd56 	bl	8007aca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800701e:	e009      	b.n	8007034 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fc89 	bl	800793a <USBD_CtlError>
          break;
 8007028:	e004      	b.n	8007034 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fc84 	bl	800793a <USBD_CtlError>
          break;
 8007032:	e000      	b.n	8007036 <USBD_StdItfReq+0x7a>
          break;
 8007034:	bf00      	nop
      }
      break;
 8007036:	e004      	b.n	8007042 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fc7d 	bl	800793a <USBD_CtlError>
      break;
 8007040:	bf00      	nop
  }

  return USBD_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	889b      	ldrh	r3, [r3, #4]
 800705e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007068:	2b40      	cmp	r3, #64	; 0x40
 800706a:	d007      	beq.n	800707c <USBD_StdEPReq+0x30>
 800706c:	2b40      	cmp	r3, #64	; 0x40
 800706e:	f200 8146 	bhi.w	80072fe <USBD_StdEPReq+0x2b2>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <USBD_StdEPReq+0x40>
 8007076:	2b20      	cmp	r3, #32
 8007078:	f040 8141 	bne.w	80072fe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
      break;
 800708a:	e13d      	b.n	8007308 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007094:	2b20      	cmp	r3, #32
 8007096:	d10a      	bne.n	80070ae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	4798      	blx	r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	e12d      	b.n	800730a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	785b      	ldrb	r3, [r3, #1]
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d007      	beq.n	80070c6 <USBD_StdEPReq+0x7a>
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	f300 811b 	bgt.w	80072f2 <USBD_StdEPReq+0x2a6>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d072      	beq.n	80071a6 <USBD_StdEPReq+0x15a>
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d03a      	beq.n	800713a <USBD_StdEPReq+0xee>
 80070c4:	e115      	b.n	80072f2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d002      	beq.n	80070d6 <USBD_StdEPReq+0x8a>
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d015      	beq.n	8007100 <USBD_StdEPReq+0xb4>
 80070d4:	e02b      	b.n	800712e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00c      	beq.n	80070f6 <USBD_StdEPReq+0xaa>
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	2b80      	cmp	r3, #128	; 0x80
 80070e0:	d009      	beq.n	80070f6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7f9 ff0c 	bl	8000f04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80070ec:	2180      	movs	r1, #128	; 0x80
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7f9 ff08 	bl	8000f04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070f4:	e020      	b.n	8007138 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fc1e 	bl	800793a <USBD_CtlError>
              break;
 80070fe:	e01b      	b.n	8007138 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	885b      	ldrh	r3, [r3, #2]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10e      	bne.n	8007126 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00b      	beq.n	8007126 <USBD_StdEPReq+0xda>
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b80      	cmp	r3, #128	; 0x80
 8007112:	d008      	beq.n	8007126 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	88db      	ldrh	r3, [r3, #6]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7f9 feef 	bl	8000f04 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fccf 	bl	8007aca <USBD_CtlSendStatus>

              break;
 800712c:	e004      	b.n	8007138 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fc02 	bl	800793a <USBD_CtlError>
              break;
 8007136:	bf00      	nop
          }
          break;
 8007138:	e0e0      	b.n	80072fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007140:	2b02      	cmp	r3, #2
 8007142:	d002      	beq.n	800714a <USBD_StdEPReq+0xfe>
 8007144:	2b03      	cmp	r3, #3
 8007146:	d015      	beq.n	8007174 <USBD_StdEPReq+0x128>
 8007148:	e026      	b.n	8007198 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00c      	beq.n	800716a <USBD_StdEPReq+0x11e>
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d009      	beq.n	800716a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7f9 fed2 	bl	8000f04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007160:	2180      	movs	r1, #128	; 0x80
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7f9 fece 	bl	8000f04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007168:	e01c      	b.n	80071a4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fbe4 	bl	800793a <USBD_CtlError>
              break;
 8007172:	e017      	b.n	80071a4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	885b      	ldrh	r3, [r3, #2]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d112      	bne.n	80071a2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7f9 fed9 	bl	8000f42 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fc9a 	bl	8007aca <USBD_CtlSendStatus>
              }
              break;
 8007196:	e004      	b.n	80071a2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fbcd 	bl	800793a <USBD_CtlError>
              break;
 80071a0:	e000      	b.n	80071a4 <USBD_StdEPReq+0x158>
              break;
 80071a2:	bf00      	nop
          }
          break;
 80071a4:	e0aa      	b.n	80072fc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d002      	beq.n	80071b6 <USBD_StdEPReq+0x16a>
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d032      	beq.n	800721a <USBD_StdEPReq+0x1ce>
 80071b4:	e097      	b.n	80072e6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d007      	beq.n	80071cc <USBD_StdEPReq+0x180>
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	2b80      	cmp	r3, #128	; 0x80
 80071c0:	d004      	beq.n	80071cc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fbb8 	bl	800793a <USBD_CtlError>
                break;
 80071ca:	e091      	b.n	80072f0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	da0b      	bge.n	80071ec <USBD_StdEPReq+0x1a0>
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	3310      	adds	r3, #16
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4413      	add	r3, r2
 80071e8:	3304      	adds	r3, #4
 80071ea:	e00b      	b.n	8007204 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	4413      	add	r3, r2
 8007202:	3304      	adds	r3, #4
 8007204:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2202      	movs	r2, #2
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fbfb 	bl	8007a0e <USBD_CtlSendData>
              break;
 8007218:	e06a      	b.n	80072f0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800721a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	da11      	bge.n	8007246 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	f003 020f 	and.w	r2, r3, #15
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	3318      	adds	r3, #24
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d117      	bne.n	800726c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fb7b 	bl	800793a <USBD_CtlError>
                  break;
 8007244:	e054      	b.n	80072f0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	f003 020f 	and.w	r2, r3, #15
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	440b      	add	r3, r1
 8007258:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d104      	bne.n	800726c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fb68 	bl	800793a <USBD_CtlError>
                  break;
 800726a:	e041      	b.n	80072f0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800726c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007270:	2b00      	cmp	r3, #0
 8007272:	da0b      	bge.n	800728c <USBD_StdEPReq+0x240>
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800727a:	4613      	mov	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	3310      	adds	r3, #16
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	4413      	add	r3, r2
 8007288:	3304      	adds	r3, #4
 800728a:	e00b      	b.n	80072a4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	4413      	add	r3, r2
 80072a2:	3304      	adds	r3, #4
 80072a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <USBD_StdEPReq+0x266>
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	2b80      	cmp	r3, #128	; 0x80
 80072b0:	d103      	bne.n	80072ba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	e00e      	b.n	80072d8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7f9 fe5e 	bl	8000f80 <USBD_LL_IsStallEP>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2201      	movs	r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	e002      	b.n	80072d8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2202      	movs	r2, #2
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fb95 	bl	8007a0e <USBD_CtlSendData>
              break;
 80072e4:	e004      	b.n	80072f0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fb26 	bl	800793a <USBD_CtlError>
              break;
 80072ee:	bf00      	nop
          }
          break;
 80072f0:	e004      	b.n	80072fc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fb20 	bl	800793a <USBD_CtlError>
          break;
 80072fa:	bf00      	nop
      }
      break;
 80072fc:	e004      	b.n	8007308 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fb1a 	bl	800793a <USBD_CtlError>
      break;
 8007306:	bf00      	nop
  }

  return ret;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	885b      	ldrh	r3, [r3, #2]
 800732e:	0a1b      	lsrs	r3, r3, #8
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	2b06      	cmp	r3, #6
 8007336:	f200 8128 	bhi.w	800758a <USBD_GetDescriptor+0x276>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <USBD_GetDescriptor+0x2c>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	0800735d 	.word	0x0800735d
 8007344:	08007375 	.word	0x08007375
 8007348:	080073b5 	.word	0x080073b5
 800734c:	0800758b 	.word	0x0800758b
 8007350:	0800758b 	.word	0x0800758b
 8007354:	0800752b 	.word	0x0800752b
 8007358:	08007557 	.word	0x08007557
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	7c12      	ldrb	r2, [r2, #16]
 8007368:	f107 0108 	add.w	r1, r7, #8
 800736c:	4610      	mov	r0, r2
 800736e:	4798      	blx	r3
 8007370:	60f8      	str	r0, [r7, #12]
      break;
 8007372:	e112      	b.n	800759a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	7c1b      	ldrb	r3, [r3, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10d      	bne.n	8007398 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007384:	f107 0208 	add.w	r2, r7, #8
 8007388:	4610      	mov	r0, r2
 800738a:	4798      	blx	r3
 800738c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	2202      	movs	r2, #2
 8007394:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007396:	e100      	b.n	800759a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	f107 0208 	add.w	r2, r7, #8
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
 80073a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	2202      	movs	r2, #2
 80073b0:	701a      	strb	r2, [r3, #0]
      break;
 80073b2:	e0f2      	b.n	800759a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	885b      	ldrh	r3, [r3, #2]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	f200 80ac 	bhi.w	8007518 <USBD_GetDescriptor+0x204>
 80073c0:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <USBD_GetDescriptor+0xb4>)
 80073c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	080073e1 	.word	0x080073e1
 80073cc:	08007415 	.word	0x08007415
 80073d0:	08007449 	.word	0x08007449
 80073d4:	0800747d 	.word	0x0800747d
 80073d8:	080074b1 	.word	0x080074b1
 80073dc:	080074e5 	.word	0x080074e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00b      	beq.n	8007404 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	7c12      	ldrb	r2, [r2, #16]
 80073f8:	f107 0108 	add.w	r1, r7, #8
 80073fc:	4610      	mov	r0, r2
 80073fe:	4798      	blx	r3
 8007400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007402:	e091      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa97 	bl	800793a <USBD_CtlError>
            err++;
 800740c:	7afb      	ldrb	r3, [r7, #11]
 800740e:	3301      	adds	r3, #1
 8007410:	72fb      	strb	r3, [r7, #11]
          break;
 8007412:	e089      	b.n	8007528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00b      	beq.n	8007438 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	7c12      	ldrb	r2, [r2, #16]
 800742c:	f107 0108 	add.w	r1, r7, #8
 8007430:	4610      	mov	r0, r2
 8007432:	4798      	blx	r3
 8007434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007436:	e077      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa7d 	bl	800793a <USBD_CtlError>
            err++;
 8007440:	7afb      	ldrb	r3, [r7, #11]
 8007442:	3301      	adds	r3, #1
 8007444:	72fb      	strb	r3, [r7, #11]
          break;
 8007446:	e06f      	b.n	8007528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00b      	beq.n	800746c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	7c12      	ldrb	r2, [r2, #16]
 8007460:	f107 0108 	add.w	r1, r7, #8
 8007464:	4610      	mov	r0, r2
 8007466:	4798      	blx	r3
 8007468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800746a:	e05d      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fa63 	bl	800793a <USBD_CtlError>
            err++;
 8007474:	7afb      	ldrb	r3, [r7, #11]
 8007476:	3301      	adds	r3, #1
 8007478:	72fb      	strb	r3, [r7, #11]
          break;
 800747a:	e055      	b.n	8007528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	7c12      	ldrb	r2, [r2, #16]
 8007494:	f107 0108 	add.w	r1, r7, #8
 8007498:	4610      	mov	r0, r2
 800749a:	4798      	blx	r3
 800749c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800749e:	e043      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fa49 	bl	800793a <USBD_CtlError>
            err++;
 80074a8:	7afb      	ldrb	r3, [r7, #11]
 80074aa:	3301      	adds	r3, #1
 80074ac:	72fb      	strb	r3, [r7, #11]
          break;
 80074ae:	e03b      	b.n	8007528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	7c12      	ldrb	r2, [r2, #16]
 80074c8:	f107 0108 	add.w	r1, r7, #8
 80074cc:	4610      	mov	r0, r2
 80074ce:	4798      	blx	r3
 80074d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074d2:	e029      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fa2f 	bl	800793a <USBD_CtlError>
            err++;
 80074dc:	7afb      	ldrb	r3, [r7, #11]
 80074de:	3301      	adds	r3, #1
 80074e0:	72fb      	strb	r3, [r7, #11]
          break;
 80074e2:	e021      	b.n	8007528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7c12      	ldrb	r2, [r2, #16]
 80074fc:	f107 0108 	add.w	r1, r7, #8
 8007500:	4610      	mov	r0, r2
 8007502:	4798      	blx	r3
 8007504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007506:	e00f      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa15 	bl	800793a <USBD_CtlError>
            err++;
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	3301      	adds	r3, #1
 8007514:	72fb      	strb	r3, [r7, #11]
          break;
 8007516:	e007      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fa0d 	bl	800793a <USBD_CtlError>
          err++;
 8007520:	7afb      	ldrb	r3, [r7, #11]
 8007522:	3301      	adds	r3, #1
 8007524:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007526:	e038      	b.n	800759a <USBD_GetDescriptor+0x286>
 8007528:	e037      	b.n	800759a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7c1b      	ldrb	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753a:	f107 0208 	add.w	r2, r7, #8
 800753e:	4610      	mov	r0, r2
 8007540:	4798      	blx	r3
 8007542:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007544:	e029      	b.n	800759a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f9f6 	bl	800793a <USBD_CtlError>
        err++;
 800754e:	7afb      	ldrb	r3, [r7, #11]
 8007550:	3301      	adds	r3, #1
 8007552:	72fb      	strb	r3, [r7, #11]
      break;
 8007554:	e021      	b.n	800759a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	7c1b      	ldrb	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10d      	bne.n	800757a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	f107 0208 	add.w	r2, r7, #8
 800756a:	4610      	mov	r0, r2
 800756c:	4798      	blx	r3
 800756e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3301      	adds	r3, #1
 8007574:	2207      	movs	r2, #7
 8007576:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007578:	e00f      	b.n	800759a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f9dc 	bl	800793a <USBD_CtlError>
        err++;
 8007582:	7afb      	ldrb	r3, [r7, #11]
 8007584:	3301      	adds	r3, #1
 8007586:	72fb      	strb	r3, [r7, #11]
      break;
 8007588:	e007      	b.n	800759a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f9d4 	bl	800793a <USBD_CtlError>
      err++;
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	3301      	adds	r3, #1
 8007596:	72fb      	strb	r3, [r7, #11]
      break;
 8007598:	bf00      	nop
  }

  if (err != 0U)
 800759a:	7afb      	ldrb	r3, [r7, #11]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d11c      	bne.n	80075da <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80075a0:	893b      	ldrh	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d011      	beq.n	80075ca <USBD_GetDescriptor+0x2b6>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	88db      	ldrh	r3, [r3, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00d      	beq.n	80075ca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	88da      	ldrh	r2, [r3, #6]
 80075b2:	893b      	ldrh	r3, [r7, #8]
 80075b4:	4293      	cmp	r3, r2
 80075b6:	bf28      	it	cs
 80075b8:	4613      	movcs	r3, r2
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075be:	893b      	ldrh	r3, [r7, #8]
 80075c0:	461a      	mov	r2, r3
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fa22 	bl	8007a0e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	88db      	ldrh	r3, [r3, #6]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d104      	bne.n	80075dc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa79 	bl	8007aca <USBD_CtlSendStatus>
 80075d8:	e000      	b.n	80075dc <USBD_GetDescriptor+0x2c8>
    return;
 80075da:	bf00      	nop
    }
  }
}
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop

080075e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	889b      	ldrh	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d130      	bne.n	8007658 <USBD_SetAddress+0x74>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	88db      	ldrh	r3, [r3, #6]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d12c      	bne.n	8007658 <USBD_SetAddress+0x74>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	885b      	ldrh	r3, [r3, #2]
 8007602:	2b7f      	cmp	r3, #127	; 0x7f
 8007604:	d828      	bhi.n	8007658 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	885b      	ldrh	r3, [r3, #2]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007610:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007618:	2b03      	cmp	r3, #3
 800761a:	d104      	bne.n	8007626 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f98b 	bl	800793a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007624:	e01d      	b.n	8007662 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7bfa      	ldrb	r2, [r7, #15]
 800762a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7f9 fcd0 	bl	8000fd8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fa46 	bl	8007aca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764c:	e009      	b.n	8007662 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007656:	e004      	b.n	8007662 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f96d 	bl	800793a <USBD_CtlError>
  }
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	885b      	ldrh	r3, [r3, #2]
 800767a:	b2da      	uxtb	r2, r3
 800767c:	4b41      	ldr	r3, [pc, #260]	; (8007784 <USBD_SetConfig+0x118>)
 800767e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007680:	4b40      	ldr	r3, [pc, #256]	; (8007784 <USBD_SetConfig+0x118>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d904      	bls.n	8007692 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f955 	bl	800793a <USBD_CtlError>
 8007690:	e075      	b.n	800777e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007698:	2b02      	cmp	r3, #2
 800769a:	d002      	beq.n	80076a2 <USBD_SetConfig+0x36>
 800769c:	2b03      	cmp	r3, #3
 800769e:	d023      	beq.n	80076e8 <USBD_SetConfig+0x7c>
 80076a0:	e062      	b.n	8007768 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80076a2:	4b38      	ldr	r3, [pc, #224]	; (8007784 <USBD_SetConfig+0x118>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d01a      	beq.n	80076e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80076aa:	4b36      	ldr	r3, [pc, #216]	; (8007784 <USBD_SetConfig+0x118>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2203      	movs	r2, #3
 80076b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076bc:	4b31      	ldr	r3, [pc, #196]	; (8007784 <USBD_SetConfig+0x118>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff f9e8 	bl	8006a98 <USBD_SetClassConfig>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d104      	bne.n	80076d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f932 	bl	800793a <USBD_CtlError>
            return;
 80076d6:	e052      	b.n	800777e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f9f6 	bl	8007aca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076de:	e04e      	b.n	800777e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f9f2 	bl	8007aca <USBD_CtlSendStatus>
        break;
 80076e6:	e04a      	b.n	800777e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80076e8:	4b26      	ldr	r3, [pc, #152]	; (8007784 <USBD_SetConfig+0x118>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d112      	bne.n	8007716 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80076f8:	4b22      	ldr	r3, [pc, #136]	; (8007784 <USBD_SetConfig+0x118>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007702:	4b20      	ldr	r3, [pc, #128]	; (8007784 <USBD_SetConfig+0x118>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff f9e4 	bl	8006ad6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f9db 	bl	8007aca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007714:	e033      	b.n	800777e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007716:	4b1b      	ldr	r3, [pc, #108]	; (8007784 <USBD_SetConfig+0x118>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	429a      	cmp	r2, r3
 8007722:	d01d      	beq.n	8007760 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7ff f9d2 	bl	8006ad6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007732:	4b14      	ldr	r3, [pc, #80]	; (8007784 <USBD_SetConfig+0x118>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800773c:	4b11      	ldr	r3, [pc, #68]	; (8007784 <USBD_SetConfig+0x118>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff f9a8 	bl	8006a98 <USBD_SetClassConfig>
 8007748:	4603      	mov	r3, r0
 800774a:	2b02      	cmp	r3, #2
 800774c:	d104      	bne.n	8007758 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f8f2 	bl	800793a <USBD_CtlError>
            return;
 8007756:	e012      	b.n	800777e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f9b6 	bl	8007aca <USBD_CtlSendStatus>
        break;
 800775e:	e00e      	b.n	800777e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f9b2 	bl	8007aca <USBD_CtlSendStatus>
        break;
 8007766:	e00a      	b.n	800777e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f8e5 	bl	800793a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007770:	4b04      	ldr	r3, [pc, #16]	; (8007784 <USBD_SetConfig+0x118>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff f9ad 	bl	8006ad6 <USBD_ClrClassConfig>
        break;
 800777c:	bf00      	nop
    }
  }
}
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20000420 	.word	0x20000420

08007788 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	88db      	ldrh	r3, [r3, #6]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d004      	beq.n	80077a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f8cc 	bl	800793a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077a2:	e022      	b.n	80077ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	dc02      	bgt.n	80077b4 <USBD_GetConfig+0x2c>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dc03      	bgt.n	80077ba <USBD_GetConfig+0x32>
 80077b2:	e015      	b.n	80077e0 <USBD_GetConfig+0x58>
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d00b      	beq.n	80077d0 <USBD_GetConfig+0x48>
 80077b8:	e012      	b.n	80077e0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3308      	adds	r3, #8
 80077c4:	2201      	movs	r2, #1
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f920 	bl	8007a0e <USBD_CtlSendData>
        break;
 80077ce:	e00c      	b.n	80077ea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3304      	adds	r3, #4
 80077d4:	2201      	movs	r2, #1
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f918 	bl	8007a0e <USBD_CtlSendData>
        break;
 80077de:	e004      	b.n	80077ea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f8a9 	bl	800793a <USBD_CtlError>
        break;
 80077e8:	bf00      	nop
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007802:	3b01      	subs	r3, #1
 8007804:	2b02      	cmp	r3, #2
 8007806:	d81e      	bhi.n	8007846 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	88db      	ldrh	r3, [r3, #6]
 800780c:	2b02      	cmp	r3, #2
 800780e:	d004      	beq.n	800781a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f891 	bl	800793a <USBD_CtlError>
        break;
 8007818:	e01a      	b.n	8007850 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f043 0202 	orr.w	r2, r3, #2
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	330c      	adds	r3, #12
 800783a:	2202      	movs	r2, #2
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f8e5 	bl	8007a0e <USBD_CtlSendData>
      break;
 8007844:	e004      	b.n	8007850 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f876 	bl	800793a <USBD_CtlError>
      break;
 800784e:	bf00      	nop
  }
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	885b      	ldrh	r3, [r3, #2]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d106      	bne.n	8007878 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f929 	bl	8007aca <USBD_CtlSendStatus>
  }
}
 8007878:	bf00      	nop
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007890:	3b01      	subs	r3, #1
 8007892:	2b02      	cmp	r3, #2
 8007894:	d80b      	bhi.n	80078ae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	885b      	ldrh	r3, [r3, #2]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d10c      	bne.n	80078b8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f90f 	bl	8007aca <USBD_CtlSendStatus>
      }
      break;
 80078ac:	e004      	b.n	80078b8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f842 	bl	800793a <USBD_CtlError>
      break;
 80078b6:	e000      	b.n	80078ba <USBD_ClrFeature+0x3a>
      break;
 80078b8:	bf00      	nop
  }
}
 80078ba:	bf00      	nop
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781a      	ldrb	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	785a      	ldrb	r2, [r3, #1]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	3302      	adds	r3, #2
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	3303      	adds	r3, #3
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	4413      	add	r3, r2
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	3304      	adds	r3, #4
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b29a      	uxth	r2, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	3305      	adds	r3, #5
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	021b      	lsls	r3, r3, #8
 800790a:	b29b      	uxth	r3, r3
 800790c:	4413      	add	r3, r2
 800790e:	b29a      	uxth	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	3306      	adds	r3, #6
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b29a      	uxth	r2, r3
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	3307      	adds	r3, #7
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	b29b      	uxth	r3, r3
 8007928:	4413      	add	r3, r2
 800792a:	b29a      	uxth	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	80da      	strh	r2, [r3, #6]

}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	bc80      	pop	{r7}
 8007938:	4770      	bx	lr

0800793a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007944:	2180      	movs	r1, #128	; 0x80
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7f9 fadc 	bl	8000f04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800794c:	2100      	movs	r1, #0
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7f9 fad8 	bl	8000f04 <USBD_LL_StallEP>
}
 8007954:	bf00      	nop
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d032      	beq.n	80079d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 f834 	bl	80079e0 <USBD_GetLen>
 8007978:	4603      	mov	r3, r0
 800797a:	3301      	adds	r3, #1
 800797c:	b29b      	uxth	r3, r3
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	b29a      	uxth	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	75fa      	strb	r2, [r7, #23]
 800798c:	461a      	mov	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4413      	add	r3, r2
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	7812      	ldrb	r2, [r2, #0]
 8007996:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	75fa      	strb	r2, [r7, #23]
 800799e:	461a      	mov	r2, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4413      	add	r3, r2
 80079a4:	2203      	movs	r2, #3
 80079a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80079a8:	e012      	b.n	80079d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	60fa      	str	r2, [r7, #12]
 80079b0:	7dfa      	ldrb	r2, [r7, #23]
 80079b2:	1c51      	adds	r1, r2, #1
 80079b4:	75f9      	strb	r1, [r7, #23]
 80079b6:	4611      	mov	r1, r2
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	440a      	add	r2, r1
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	75fa      	strb	r2, [r7, #23]
 80079c6:	461a      	mov	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4413      	add	r3, r2
 80079cc:	2200      	movs	r2, #0
 80079ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e8      	bne.n	80079aa <USBD_GetString+0x4e>
    }
  }
}
 80079d8:	bf00      	nop
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80079ec:	e005      	b.n	80079fa <USBD_GetLen+0x1a>
  {
    len++;
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	3301      	adds	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3301      	adds	r3, #1
 80079f8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f5      	bne.n	80079ee <USBD_GetLen+0xe>
  }

  return len;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr

08007a0e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a24:	88fa      	ldrh	r2, [r7, #6]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007a2a:	88fa      	ldrh	r2, [r7, #6]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	2100      	movs	r1, #0
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7f9 faed 	bl	8001016 <USBD_LL_Transmit>

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	4613      	mov	r3, r2
 8007a52:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a54:	88fb      	ldrh	r3, [r7, #6]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f7f9 fadb 	bl	8001016 <USBD_LL_Transmit>

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	4613      	mov	r3, r2
 8007a76:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2203      	movs	r2, #3
 8007a7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007a80:	88fa      	ldrh	r2, [r7, #6]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007a88:	88fa      	ldrh	r2, [r7, #6]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a90:	88fb      	ldrh	r3, [r7, #6]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	2100      	movs	r1, #0
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7f9 fae0 	bl	800105c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ab4:	88fb      	ldrh	r3, [r7, #6]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	2100      	movs	r1, #0
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7f9 face 	bl	800105c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2204      	movs	r2, #4
 8007ad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ada:	2300      	movs	r3, #0
 8007adc:	2200      	movs	r2, #0
 8007ade:	2100      	movs	r1, #0
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7f9 fa98 	bl	8001016 <USBD_LL_Transmit>

  return USBD_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2205      	movs	r2, #5
 8007afc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b00:	2300      	movs	r3, #0
 8007b02:	2200      	movs	r2, #0
 8007b04:	2100      	movs	r1, #0
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7f9 faa8 	bl	800105c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <Hal_Regist_ISR>:
void timer2_callback(void);
void BTN1_PRESS_DOWN_Handler(void* btn);
void BTN2_PRESS_DOWN_Handler(void* btn);

void Hal_Regist_ISR(ISR_TYPE isr, SYSTICK_ISR_IDX index, pFun pf)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	603a      	str	r2, [r7, #0]
 8007b22:	71fb      	strb	r3, [r7, #7]
 8007b24:	460b      	mov	r3, r1
 8007b26:	71bb      	strb	r3, [r7, #6]
    if(pf == NULL) return;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d017      	beq.n	8007b5e <Hal_Regist_ISR+0x46>

    if(isr ==  SYSTICK_ISR && index < ALL_IDXS)
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d108      	bne.n	8007b46 <Hal_Regist_ISR+0x2e>
 8007b34:	79bb      	ldrb	r3, [r7, #6]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d805      	bhi.n	8007b46 <Hal_Regist_ISR+0x2e>
    {
    	pfSYSTICK_ISR[index] = pf;
 8007b3a:	79bb      	ldrb	r3, [r7, #6]
 8007b3c:	490a      	ldr	r1, [pc, #40]	; (8007b68 <Hal_Regist_ISR+0x50>)
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007b44:	e00c      	b.n	8007b60 <Hal_Regist_ISR+0x48>
    }
    else if(isr !=  SYSTICK_ISR && isr < ALL_ISRS)
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d009      	beq.n	8007b60 <Hal_Regist_ISR+0x48>
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d806      	bhi.n	8007b60 <Hal_Regist_ISR+0x48>
    {
        pfISR[isr] = pf;
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	4905      	ldr	r1, [pc, #20]	; (8007b6c <Hal_Regist_ISR+0x54>)
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007b5c:	e000      	b.n	8007b60 <Hal_Regist_ISR+0x48>
    if(pf == NULL) return;
 8007b5e:	bf00      	nop
    }
}
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bc80      	pop	{r7}
 8007b66:	4770      	bx	lr
 8007b68:	20001444 	.word	0x20001444
 8007b6c:	20001430 	.word	0x20001430

08007b70 <SysTick_Handler_Callback>:

void SysTick_Handler_Callback(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < ALL_IDXS; i++)
 8007b76:	2300      	movs	r3, #0
 8007b78:	71fb      	strb	r3, [r7, #7]
 8007b7a:	e00d      	b.n	8007b98 <SysTick_Handler_Callback+0x28>
	{
		if(pfSYSTICK_ISR[i] != NULL)
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ba8 <SysTick_Handler_Callback+0x38>)
 8007b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <SysTick_Handler_Callback+0x22>
			(*pfSYSTICK_ISR[i])();
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	4a07      	ldr	r2, [pc, #28]	; (8007ba8 <SysTick_Handler_Callback+0x38>)
 8007b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b90:	4798      	blx	r3
	for(uint8_t i = 0; i < ALL_IDXS; i++)
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	3301      	adds	r3, #1
 8007b96:	71fb      	strb	r3, [r7, #7]
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d9ee      	bls.n	8007b7c <SysTick_Handler_Callback+0xc>
	}
}
 8007b9e:	bf00      	nop
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20001444 	.word	0x20001444

08007bac <Multi_Timer_Init>:

void Multi_Timer_Init(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	af00      	add	r7, sp, #0
	Hal_Regist_ISR(SYSTICK_ISR,MULTITIMER_ISR_IDX,timer_ticks);
 8007bb0:	4a0d      	ldr	r2, [pc, #52]	; (8007be8 <Multi_Timer_Init+0x3c>)
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f7ff ffaf 	bl	8007b18 <Hal_Regist_ISR>

	timer_init(&Multi_Timer[DELAY5S_TIMER_IDX], timer1_callback, 5000, 1); //1s loop
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc0:	490a      	ldr	r1, [pc, #40]	; (8007bec <Multi_Timer_Init+0x40>)
 8007bc2:	480b      	ldr	r0, [pc, #44]	; (8007bf0 <Multi_Timer_Init+0x44>)
 8007bc4:	f000 fad0 	bl	8008168 <timer_init>
	timer_init(&Multi_Timer[LOOP500MS_TIMER_IDX], timer2_callback, 500, Timer_Loop); //50ms delay
 8007bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bcc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007bd0:	4908      	ldr	r1, [pc, #32]	; (8007bf4 <Multi_Timer_Init+0x48>)
 8007bd2:	4809      	ldr	r0, [pc, #36]	; (8007bf8 <Multi_Timer_Init+0x4c>)
 8007bd4:	f000 fac8 	bl	8008168 <timer_init>

	timer_start(&Multi_Timer[DELAY5S_TIMER_IDX]);
 8007bd8:	4805      	ldr	r0, [pc, #20]	; (8007bf0 <Multi_Timer_Init+0x44>)
 8007bda:	f000 fadd 	bl	8008198 <timer_start>
	timer_start(&Multi_Timer[LOOP500MS_TIMER_IDX]);
 8007bde:	4806      	ldr	r0, [pc, #24]	; (8007bf8 <Multi_Timer_Init+0x4c>)
 8007be0:	f000 fada 	bl	8008198 <timer_start>
}
 8007be4:	bf00      	nop
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	080082b9 	.word	0x080082b9
 8007bec:	08007c91 	.word	0x08007c91
 8007bf0:	20000444 	.word	0x20000444
 8007bf4:	08007cb1 	.word	0x08007cb1
 8007bf8:	20000458 	.word	0x20000458

08007bfc <read_button1_GPIO>:

uint8_t read_button1_GPIO()
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 8007c00:	2110      	movs	r1, #16
 8007c02:	4803      	ldr	r0, [pc, #12]	; (8007c10 <read_button1_GPIO+0x14>)
 8007c04:	f7f9 fefe 	bl	8001a04 <HAL_GPIO_ReadPin>
 8007c08:	4603      	mov	r3, r0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	40011800 	.word	0x40011800

08007c14 <read_button2_GPIO>:

uint8_t read_button2_GPIO()
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 8007c18:	2108      	movs	r1, #8
 8007c1a:	4803      	ldr	r0, [pc, #12]	; (8007c28 <read_button2_GPIO+0x14>)
 8007c1c:	f7f9 fef2 	bl	8001a04 <HAL_GPIO_ReadPin>
 8007c20:	4603      	mov	r3, r0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40011800 	.word	0x40011800

08007c2c <Multi_Button_Init>:

void Multi_Button_Init(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
	Hal_Regist_ISR(SYSTICK_ISR,MULTIBUTTON_ISR_IDX,button_ticks);
 8007c30:	4a10      	ldr	r2, [pc, #64]	; (8007c74 <Multi_Button_Init+0x48>)
 8007c32:	2101      	movs	r1, #1
 8007c34:	2000      	movs	r0, #0
 8007c36:	f7ff ff6f 	bl	8007b18 <Hal_Regist_ISR>
	button_init(&btn1, read_button1_GPIO, 0);
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	490e      	ldr	r1, [pc, #56]	; (8007c78 <Multi_Button_Init+0x4c>)
 8007c3e:	480f      	ldr	r0, [pc, #60]	; (8007c7c <Multi_Button_Init+0x50>)
 8007c40:	f000 f862 	bl	8007d08 <button_init>
	button_init(&btn2, read_button2_GPIO, 0);
 8007c44:	2200      	movs	r2, #0
 8007c46:	490e      	ldr	r1, [pc, #56]	; (8007c80 <Multi_Button_Init+0x54>)
 8007c48:	480e      	ldr	r0, [pc, #56]	; (8007c84 <Multi_Button_Init+0x58>)
 8007c4a:	f000 f85d 	bl	8007d08 <button_init>

	button_attach(&btn1, PRESS_DOWN,       BTN1_PRESS_DOWN_Handler);
 8007c4e:	4a0e      	ldr	r2, [pc, #56]	; (8007c88 <Multi_Button_Init+0x5c>)
 8007c50:	2100      	movs	r1, #0
 8007c52:	480a      	ldr	r0, [pc, #40]	; (8007c7c <Multi_Button_Init+0x50>)
 8007c54:	f000 f886 	bl	8007d64 <button_attach>
	button_attach(&btn1, DOUBLE_CLICK,     BTN1_DOUBLE_Click_Handler);
	button_attach(&btn1, LONG_PRESS_START, BTN1_LONG_PRESS_START_Handler);
	button_attach(&btn1, LONG_PRESS_HOLD,  BTN1_LONG_PRESS_HOLD_Handler);
	*/

	button_attach(&btn2, PRESS_DOWN,       BTN2_PRESS_DOWN_Handler);
 8007c58:	4a0c      	ldr	r2, [pc, #48]	; (8007c8c <Multi_Button_Init+0x60>)
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4809      	ldr	r0, [pc, #36]	; (8007c84 <Multi_Button_Init+0x58>)
 8007c5e:	f000 f881 	bl	8007d64 <button_attach>
	button_attach(&btn2, DOUBLE_CLICK,     BTN2_DOUBLE_Click_Handler);
	button_attach(&btn2, LONG_PRESS_START, BTN2_LONG_PRESS_START_Handler);
	button_attach(&btn2, LONG_PRESS_HOLD,  BTN2_LONG_PRESS_HOLD_Handler);
	*/

	button_start(&btn1);
 8007c62:	4806      	ldr	r0, [pc, #24]	; (8007c7c <Multi_Button_Init+0x50>)
 8007c64:	f000 fa36 	bl	80080d4 <button_start>
	button_start(&btn2);
 8007c68:	4806      	ldr	r0, [pc, #24]	; (8007c84 <Multi_Button_Init+0x58>)
 8007c6a:	f000 fa33 	bl	80080d4 <button_start>
}
 8007c6e:	bf00      	nop
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	0800811d 	.word	0x0800811d
 8007c78:	08007bfd 	.word	0x08007bfd
 8007c7c:	20001474 	.word	0x20001474
 8007c80:	08007c15 	.word	0x08007c15
 8007c84:	2000144c 	.word	0x2000144c
 8007c88:	08007cd1 	.word	0x08007cd1
 8007c8c:	08007ced 	.word	0x08007ced

08007c90 <timer1_callback>:

void timer1_callback(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8007c94:	2120      	movs	r1, #32
 8007c96:	4804      	ldr	r0, [pc, #16]	; (8007ca8 <timer1_callback+0x18>)
 8007c98:	f7f9 fee3 	bl	8001a62 <HAL_GPIO_TogglePin>
	printf("timer1\r\n");
 8007c9c:	4803      	ldr	r0, [pc, #12]	; (8007cac <timer1_callback+0x1c>)
 8007c9e:	f000 fbb9 	bl	8008414 <puts>
}
 8007ca2:	bf00      	nop
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40010c00 	.word	0x40010c00
 8007cac:	08008d34 	.word	0x08008d34

08007cb0 <timer2_callback>:

void timer2_callback(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007cb4:	2120      	movs	r1, #32
 8007cb6:	4804      	ldr	r0, [pc, #16]	; (8007cc8 <timer2_callback+0x18>)
 8007cb8:	f7f9 fed3 	bl	8001a62 <HAL_GPIO_TogglePin>
	printf("timer2\r\n");
 8007cbc:	4803      	ldr	r0, [pc, #12]	; (8007ccc <timer2_callback+0x1c>)
 8007cbe:	f000 fba9 	bl	8008414 <puts>
}
 8007cc2:	bf00      	nop
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40011800 	.word	0x40011800
 8007ccc:	08008d3c 	.word	0x08008d3c

08007cd0 <BTN1_PRESS_DOWN_Handler>:

void BTN1_PRESS_DOWN_Handler(void* btn)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	printf("BTN1_PRESS_DOWN\r\n");
 8007cd8:	4803      	ldr	r0, [pc, #12]	; (8007ce8 <BTN1_PRESS_DOWN_Handler+0x18>)
 8007cda:	f000 fb9b 	bl	8008414 <puts>
}
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	08008d44 	.word	0x08008d44

08007cec <BTN2_PRESS_DOWN_Handler>:

void BTN2_PRESS_DOWN_Handler(void* btn)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	printf("BTN2_PRESS_DOWN_Handler\r\n");
 8007cf4:	4803      	ldr	r0, [pc, #12]	; (8007d04 <BTN2_PRESS_DOWN_Handler+0x18>)
 8007cf6:	f000 fb8d 	bl	8008414 <puts>
}
 8007cfa:	bf00      	nop
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	08008d58 	.word	0x08008d58

08007d08 <button_init>:
  * @param  pin_level: read the HAL GPIO of the connet button level.
  * @param  active_level: pressed GPIO level.
  * @retval None
  */
void button_init(struct Button* handle, uint8_t(*pin_level)(), uint8_t active_level)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	4613      	mov	r3, r2
 8007d14:	71fb      	strb	r3, [r7, #7]
	memset(handle, 0, sizeof(struct Button));
 8007d16:	2228      	movs	r2, #40	; 0x28
 8007d18:	2100      	movs	r1, #0
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 fb04 	bl	8008328 <memset>
	handle->event = (uint8_t)NONE_PRESS;
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	7893      	ldrb	r3, [r2, #2]
 8007d24:	2108      	movs	r1, #8
 8007d26:	f361 1307 	bfi	r3, r1, #4, #4
 8007d2a:	7093      	strb	r3, [r2, #2]
	handle->hal_button_Level = pin_level;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	605a      	str	r2, [r3, #4]
	handle->button_level = handle->hal_button_Level();
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	4798      	blx	r3
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	b2d9      	uxtb	r1, r3
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	78d3      	ldrb	r3, [r2, #3]
 8007d44:	f361 13c7 	bfi	r3, r1, #7, #1
 8007d48:	70d3      	strb	r3, [r2, #3]
	handle->active_level = active_level;
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	b2d9      	uxtb	r1, r3
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	78d3      	ldrb	r3, [r2, #3]
 8007d56:	f361 1386 	bfi	r3, r1, #6, #1
 8007d5a:	70d3      	strb	r3, [r2, #3]
}
 8007d5c:	bf00      	nop
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <button_attach>:
  * @param  event: trigger event type.
  * @param  cb: callback function.
  * @retval None
  */
void button_attach(struct Button* handle, PressEvent event, BtnCallback cb)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	72fb      	strb	r3, [r7, #11]
	handle->cb[event] = cb;
 8007d72:	7afa      	ldrb	r2, [r7, #11]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3202      	adds	r2, #2
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <button_handler>:
  * @brief  Button driver core function, driver state machine.
  * @param  handle: the button handle strcut.
  * @retval None
  */
void button_handler(struct Button* handle)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
	uint8_t read_gpio_level = handle->hal_button_Level();
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	4798      	blx	r3
 8007d96:	4603      	mov	r3, r0
 8007d98:	73fb      	strb	r3, [r7, #15]

	//ticks counter working..
	if((handle->state) > 0) handle->ticks++;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	78db      	ldrb	r3, [r3, #3]
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <button_handler+0x2c>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	3301      	adds	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	801a      	strh	r2, [r3, #0]

	/*------------button debounce handle---------------*/
	if(read_gpio_level != handle->button_level) { //not equal to prev one
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	78db      	ldrb	r3, [r3, #3]
 8007db8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d023      	beq.n	8007e0e <button_handler+0x86>
		//continue read 3 times same new level change
		if(++(handle->debounce_cnt) >= DEBOUNCE_TICKS) {
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	78db      	ldrb	r3, [r3, #3]
 8007dca:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	b2d9      	uxtb	r1, r3
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	78d3      	ldrb	r3, [r2, #3]
 8007ddc:	f361 03c5 	bfi	r3, r1, #3, #3
 8007de0:	70d3      	strb	r3, [r2, #3]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	78db      	ldrb	r3, [r3, #3]
 8007de6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d913      	bls.n	8007e18 <button_handler+0x90>
			handle->button_level = read_gpio_level;
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	b2d9      	uxtb	r1, r3
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	78d3      	ldrb	r3, [r2, #3]
 8007dfc:	f361 13c7 	bfi	r3, r1, #7, #1
 8007e00:	70d3      	strb	r3, [r2, #3]
			handle->debounce_cnt = 0;
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	78d3      	ldrb	r3, [r2, #3]
 8007e06:	f36f 03c5 	bfc	r3, #3, #3
 8007e0a:	70d3      	strb	r3, [r2, #3]
 8007e0c:	e004      	b.n	8007e18 <button_handler+0x90>
		}
	} else { //leved not change ,counter reset.
		handle->debounce_cnt = 0;
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	78d3      	ldrb	r3, [r2, #3]
 8007e12:	f36f 03c5 	bfc	r3, #3, #3
 8007e16:	70d3      	strb	r3, [r2, #3]
	}

	/*-----------------State machine-------------------*/
	switch (handle->state) {
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	78db      	ldrb	r3, [r3, #3]
 8007e1c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b05      	cmp	r3, #5
 8007e24:	f200 8151 	bhi.w	80080ca <button_handler+0x342>
 8007e28:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <button_handler+0xa8>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e49 	.word	0x08007e49
 8007e34:	08007ea9 	.word	0x08007ea9
 8007e38:	08007f25 	.word	0x08007f25
 8007e3c:	08008003 	.word	0x08008003
 8007e40:	080080cb 	.word	0x080080cb
 8007e44:	0800805f 	.word	0x0800805f
	case 0:
		if(handle->button_level == handle->active_level) {	//start press down
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	78db      	ldrb	r3, [r3, #3]
 8007e4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	78db      	ldrb	r3, [r3, #3]
 8007e56:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d11c      	bne.n	8007e9a <button_handler+0x112>
			handle->event = (uint8_t)PRESS_DOWN;
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	7893      	ldrb	r3, [r2, #2]
 8007e64:	f36f 1307 	bfc	r3, #4, #4
 8007e68:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_DOWN);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <button_handler+0xf2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
			handle->ticks = 0;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	801a      	strh	r2, [r3, #0]
			handle->repeat = 1;
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	7893      	ldrb	r3, [r2, #2]
 8007e84:	2101      	movs	r1, #1
 8007e86:	f361 0303 	bfi	r3, r1, #0, #4
 8007e8a:	7093      	strb	r3, [r2, #2]
			handle->state = 1;
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	78d3      	ldrb	r3, [r2, #3]
 8007e90:	2101      	movs	r1, #1
 8007e92:	f361 0302 	bfi	r3, r1, #0, #3
 8007e96:	70d3      	strb	r3, [r2, #3]
		} else {
			handle->event = (uint8_t)NONE_PRESS;
		}
		break;
 8007e98:	e117      	b.n	80080ca <button_handler+0x342>
			handle->event = (uint8_t)NONE_PRESS;
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	7893      	ldrb	r3, [r2, #2]
 8007e9e:	2108      	movs	r1, #8
 8007ea0:	f361 1307 	bfi	r3, r1, #4, #4
 8007ea4:	7093      	strb	r3, [r2, #2]
		break;
 8007ea6:	e110      	b.n	80080ca <button_handler+0x342>

	case 1:
		if(handle->button_level != handle->active_level) { //released press up
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	78db      	ldrb	r3, [r3, #3]
 8007eac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	78db      	ldrb	r3, [r3, #3]
 8007eb6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d017      	beq.n	8007ef0 <button_handler+0x168>
			handle->event = (uint8_t)PRESS_UP;
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	7893      	ldrb	r3, [r2, #2]
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	f361 1307 	bfi	r3, r1, #4, #4
 8007eca:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_UP);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <button_handler+0x154>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	4798      	blx	r3
			handle->ticks = 0;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	801a      	strh	r2, [r3, #0]
			handle->state = 2;
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	78d3      	ldrb	r3, [r2, #3]
 8007ee6:	2102      	movs	r1, #2
 8007ee8:	f361 0302 	bfi	r3, r1, #0, #3
 8007eec:	70d3      	strb	r3, [r2, #3]
		} else if(handle->ticks > LONG_TICKS) {
			handle->event = (uint8_t)LONG_PRESS_START;
			EVENT_CB(LONG_PRESS_START);
			handle->state = 5;
		}
		break;
 8007eee:	e0e5      	b.n	80080bc <button_handler+0x334>
		} else if(handle->ticks > LONG_TICKS) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	2bc8      	cmp	r3, #200	; 0xc8
 8007ef6:	f240 80e1 	bls.w	80080bc <button_handler+0x334>
			handle->event = (uint8_t)LONG_PRESS_START;
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	7893      	ldrb	r3, [r2, #2]
 8007efe:	2105      	movs	r1, #5
 8007f00:	f361 1307 	bfi	r3, r1, #4, #4
 8007f04:	7093      	strb	r3, [r2, #2]
			EVENT_CB(LONG_PRESS_START);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <button_handler+0x18e>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3
			handle->state = 5;
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	78d3      	ldrb	r3, [r2, #3]
 8007f1a:	2105      	movs	r1, #5
 8007f1c:	f361 0302 	bfi	r3, r1, #0, #3
 8007f20:	70d3      	strb	r3, [r2, #3]
		break;
 8007f22:	e0cb      	b.n	80080bc <button_handler+0x334>

	case 2:
		if(handle->button_level == handle->active_level) { //press down again
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	78db      	ldrb	r3, [r3, #3]
 8007f28:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	78db      	ldrb	r3, [r3, #3]
 8007f32:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d12c      	bne.n	8007f96 <button_handler+0x20e>
			handle->event = (uint8_t)PRESS_DOWN;
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	7893      	ldrb	r3, [r2, #2]
 8007f40:	f36f 1307 	bfc	r3, #4, #4
 8007f44:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_DOWN);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <button_handler+0x1ce>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
			handle->repeat++;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	789b      	ldrb	r3, [r3, #2]
 8007f5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	3301      	adds	r3, #1
 8007f62:	f003 030f 	and.w	r3, r3, #15
 8007f66:	b2d9      	uxtb	r1, r3
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	7893      	ldrb	r3, [r2, #2]
 8007f6c:	f361 0303 	bfi	r3, r1, #0, #4
 8007f70:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_REPEAT); // repeat hit
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <button_handler+0x1fa>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	4798      	blx	r3
			handle->ticks = 0;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	801a      	strh	r2, [r3, #0]
			handle->state = 3;
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	78d3      	ldrb	r3, [r2, #3]
 8007f8c:	2103      	movs	r1, #3
 8007f8e:	f361 0302 	bfi	r3, r1, #0, #3
 8007f92:	70d3      	strb	r3, [r2, #3]
				handle->event = (uint8_t)DOUBLE_CLICK;
				EVENT_CB(DOUBLE_CLICK); // repeat hit
			}
			handle->state = 0;
		}
		break;
 8007f94:	e094      	b.n	80080c0 <button_handler+0x338>
		} else if(handle->ticks > SHORT_TICKS) { //released timeout
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	2b3c      	cmp	r3, #60	; 0x3c
 8007f9c:	f240 8090 	bls.w	80080c0 <button_handler+0x338>
			if(handle->repeat == 1) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	789b      	ldrb	r3, [r3, #2]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d10e      	bne.n	8007fcc <button_handler+0x244>
				handle->event = (uint8_t)SINGLE_CLICK;
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	7893      	ldrb	r3, [r2, #2]
 8007fb2:	2103      	movs	r1, #3
 8007fb4:	f361 1307 	bfi	r3, r1, #4, #4
 8007fb8:	7093      	strb	r3, [r2, #2]
				EVENT_CB(SINGLE_CLICK);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d019      	beq.n	8007ff6 <button_handler+0x26e>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	4798      	blx	r3
 8007fca:	e014      	b.n	8007ff6 <button_handler+0x26e>
			} else if(handle->repeat == 2) {
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	789b      	ldrb	r3, [r3, #2]
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d10d      	bne.n	8007ff6 <button_handler+0x26e>
				handle->event = (uint8_t)DOUBLE_CLICK;
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	7893      	ldrb	r3, [r2, #2]
 8007fde:	2104      	movs	r1, #4
 8007fe0:	f361 1307 	bfi	r3, r1, #4, #4
 8007fe4:	7093      	strb	r3, [r2, #2]
				EVENT_CB(DOUBLE_CLICK); // repeat hit
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <button_handler+0x26e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	4798      	blx	r3
			handle->state = 0;
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	78d3      	ldrb	r3, [r2, #3]
 8007ffa:	f36f 0302 	bfc	r3, #0, #3
 8007ffe:	70d3      	strb	r3, [r2, #3]
		break;
 8008000:	e05e      	b.n	80080c0 <button_handler+0x338>

	case 3:
		if(handle->button_level != handle->active_level) { //released press up
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	78db      	ldrb	r3, [r3, #3]
 8008006:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800800a:	b2da      	uxtb	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	78db      	ldrb	r3, [r3, #3]
 8008010:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008014:	b2db      	uxtb	r3, r3
 8008016:	429a      	cmp	r2, r3
 8008018:	d054      	beq.n	80080c4 <button_handler+0x33c>
			handle->event = (uint8_t)PRESS_UP;
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	7893      	ldrb	r3, [r2, #2]
 800801e:	2101      	movs	r1, #1
 8008020:	f361 1307 	bfi	r3, r1, #4, #4
 8008024:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_UP);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <button_handler+0x2ae>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	4798      	blx	r3
			if(handle->ticks < SHORT_TICKS) {
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	2b3b      	cmp	r3, #59	; 0x3b
 800803c:	d809      	bhi.n	8008052 <button_handler+0x2ca>
				handle->ticks = 0;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	801a      	strh	r2, [r3, #0]
				handle->state = 2; //repeat press
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	78d3      	ldrb	r3, [r2, #3]
 8008048:	2102      	movs	r1, #2
 800804a:	f361 0302 	bfi	r3, r1, #0, #3
 800804e:	70d3      	strb	r3, [r2, #3]
			} else {
				handle->state = 0;
			}
		}
		break;
 8008050:	e038      	b.n	80080c4 <button_handler+0x33c>
				handle->state = 0;
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	78d3      	ldrb	r3, [r2, #3]
 8008056:	f36f 0302 	bfc	r3, #0, #3
 800805a:	70d3      	strb	r3, [r2, #3]
		break;
 800805c:	e032      	b.n	80080c4 <button_handler+0x33c>

	case 5:
		if(handle->button_level == handle->active_level) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	78db      	ldrb	r3, [r3, #3]
 8008062:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008066:	b2da      	uxtb	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	78db      	ldrb	r3, [r3, #3]
 800806c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008070:	b2db      	uxtb	r3, r3
 8008072:	429a      	cmp	r2, r3
 8008074:	d10e      	bne.n	8008094 <button_handler+0x30c>
			//continue hold trigger
			handle->event = (uint8_t)LONG_PRESS_HOLD;
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	7893      	ldrb	r3, [r2, #2]
 800807a:	2106      	movs	r1, #6
 800807c:	f361 1307 	bfi	r3, r1, #4, #4
 8008080:	7093      	strb	r3, [r2, #2]
			EVENT_CB(LONG_PRESS_HOLD);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d01e      	beq.n	80080c8 <button_handler+0x340>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
		} else { //releasd
			handle->event = (uint8_t)PRESS_UP;
			EVENT_CB(PRESS_UP);
			handle->state = 0; //reset
		}
		break;
 8008092:	e019      	b.n	80080c8 <button_handler+0x340>
			handle->event = (uint8_t)PRESS_UP;
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	7893      	ldrb	r3, [r2, #2]
 8008098:	2101      	movs	r1, #1
 800809a:	f361 1307 	bfi	r3, r1, #4, #4
 800809e:	7093      	strb	r3, [r2, #2]
			EVENT_CB(PRESS_UP);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <button_handler+0x328>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	4798      	blx	r3
			handle->state = 0; //reset
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	78d3      	ldrb	r3, [r2, #3]
 80080b4:	f36f 0302 	bfc	r3, #0, #3
 80080b8:	70d3      	strb	r3, [r2, #3]
		break;
 80080ba:	e005      	b.n	80080c8 <button_handler+0x340>
		break;
 80080bc:	bf00      	nop
 80080be:	e004      	b.n	80080ca <button_handler+0x342>
		break;
 80080c0:	bf00      	nop
 80080c2:	e002      	b.n	80080ca <button_handler+0x342>
		break;
 80080c4:	bf00      	nop
 80080c6:	e000      	b.n	80080ca <button_handler+0x342>
		break;
 80080c8:	bf00      	nop
	}
}
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop

080080d4 <button_start>:
  * @brief  Start the button work, add the handle into work list.
  * @param  handle: target handle strcut.
  * @retval 0: succeed. -1: already exist.
  */
int button_start(struct Button* handle)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
	struct Button* target = head_handle;
 80080dc:	4b0e      	ldr	r3, [pc, #56]	; (8008118 <button_start+0x44>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	60fb      	str	r3, [r7, #12]
	while(target) {
 80080e2:	e009      	b.n	80080f8 <button_start+0x24>
		if(target == handle) return -1;	//already exist.
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d102      	bne.n	80080f2 <button_start+0x1e>
 80080ec:	f04f 33ff 	mov.w	r3, #4294967295
 80080f0:	e00d      	b.n	800810e <button_start+0x3a>
		target = target->next;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	60fb      	str	r3, [r7, #12]
	while(target) {
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1f2      	bne.n	80080e4 <button_start+0x10>
	}
	handle->next = head_handle;
 80080fe:	4b06      	ldr	r3, [pc, #24]	; (8008118 <button_start+0x44>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	625a      	str	r2, [r3, #36]	; 0x24
	head_handle = handle;
 8008106:	4a04      	ldr	r2, [pc, #16]	; (8008118 <button_start+0x44>)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6013      	str	r3, [r2, #0]
	return 0;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr
 8008118:	20000424 	.word	0x20000424

0800811c <button_ticks>:
  * @brief  background ticks, timer repeat invoking interval 5ms.
  * @param  None.
  * @retval None
  */
void button_ticks(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
	_timer_ticks++;
 8008122:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <button_ticks+0x44>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	3301      	adds	r3, #1
 8008128:	b2da      	uxtb	r2, r3
 800812a:	4b0d      	ldr	r3, [pc, #52]	; (8008160 <button_ticks+0x44>)
 800812c:	701a      	strb	r2, [r3, #0]
	if(_timer_ticks >= 5)
 800812e:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <button_ticks+0x44>)
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b04      	cmp	r3, #4
 8008134:	d90f      	bls.n	8008156 <button_ticks+0x3a>
	{
		_timer_ticks = 0;
 8008136:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <button_ticks+0x44>)
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
		struct Button* target;
		for(target=head_handle; target; target=target->next) {
 800813c:	4b09      	ldr	r3, [pc, #36]	; (8008164 <button_ticks+0x48>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	e005      	b.n	8008150 <button_ticks+0x34>
			button_handler(target);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fe1f 	bl	8007d88 <button_handler>
		for(target=head_handle; target; target=target->next) {
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	607b      	str	r3, [r7, #4]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1f6      	bne.n	8008144 <button_ticks+0x28>
		}
	}
}
 8008156:	bf00      	nop
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	20000428 	.word	0x20000428
 8008164:	20000424 	.word	0x20000424

08008168 <timer_init>:
  * @param  repeat: repeat interval time.
  * @param  counter: Cycle timing times.
  * @retval None
  */
void timer_init(Timer_TypeDef* handle, void (*timeout_cb)(), uint32_t timeout, uint32_t counter)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]
    // memset(handle, sizeof(struct Timer), 0);
    handle->timeout_cb = timeout_cb;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	60da      	str	r2, [r3, #12]
    handle->repeat     = timeout;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	605a      	str	r2, [r3, #4]
    handle->timeout    = 0;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	601a      	str	r2, [r3, #0]
    handle->counter    = counter;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	609a      	str	r2, [r3, #8]
}
 800818e:	bf00      	nop
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	bc80      	pop	{r7}
 8008196:	4770      	bx	lr

08008198 <timer_start>:
  * @brief  Start the timer work, add the handle into work list.
  * @param  btn: target handle strcut.
  * @retval 0: succeed. -1: already exist.
  */
int timer_start(Timer_TypeDef* handle)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
	Timer_TypeDef* target = head_handle;
 80081a0:	4b12      	ldr	r3, [pc, #72]	; (80081ec <timer_start+0x54>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60fb      	str	r3, [r7, #12]
    while(target)
 80081a6:	e009      	b.n	80081bc <timer_start+0x24>
    {
        if(target == handle)
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d102      	bne.n	80081b6 <timer_start+0x1e>
            return -1;  //already exist.
 80081b0:	f04f 33ff 	mov.w	r3, #4294967295
 80081b4:	e014      	b.n	80081e0 <timer_start+0x48>
        target = target->next;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	60fb      	str	r3, [r7, #12]
    while(target)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1f2      	bne.n	80081a8 <timer_start+0x10>
    }
    handle->timeout = _timer_ticks + handle->repeat;  //start ticks++
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	4b0a      	ldr	r3, [pc, #40]	; (80081f0 <timer_start+0x58>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	441a      	add	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	601a      	str	r2, [r3, #0]
    handle->next 	= head_handle;
 80081d0:	4b06      	ldr	r3, [pc, #24]	; (80081ec <timer_start+0x54>)
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	611a      	str	r2, [r3, #16]
    head_handle     = handle;
 80081d8:	4a04      	ldr	r2, [pc, #16]	; (80081ec <timer_start+0x54>)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6013      	str	r3, [r2, #0]
    return 0;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	2000042c 	.word	0x2000042c
 80081f0:	20000430 	.word	0x20000430

080081f4 <timer_stop>:
  * @brief  Stop the timer work, remove the handle off work list.
  * @param  handle: target handle strcut.
  * @retval None
  */
void timer_stop(Timer_TypeDef* handle)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	Timer_TypeDef** curr;
    for(curr = &head_handle; *curr;)
 80081fc:	4b0d      	ldr	r3, [pc, #52]	; (8008234 <timer_stop+0x40>)
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	e00e      	b.n	8008220 <timer_stop+0x2c>
    {
    	Timer_TypeDef* entry = *curr;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60bb      	str	r3, [r7, #8]
        if(entry == handle)
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d104      	bne.n	800821a <timer_stop+0x26>
        {
            *curr = entry->next;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	e002      	b.n	8008220 <timer_stop+0x2c>
            //			free(entry);
        }
        else
            curr = &entry->next;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	3310      	adds	r3, #16
 800821e:	60fb      	str	r3, [r7, #12]
    for(curr = &head_handle; *curr;)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1ec      	bne.n	8008202 <timer_stop+0xe>
    }
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr
 8008234:	2000042c 	.word	0x2000042c

08008238 <timer_loop>:
  * @brief  main loop.
  * @param  None.
  * @retval None
  */
void timer_loop(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
	Timer_TypeDef* target;
    for(target = head_handle; target; target = target->next)
 800823e:	4b1c      	ldr	r3, [pc, #112]	; (80082b0 <timer_loop+0x78>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	607b      	str	r3, [r7, #4]
 8008244:	e02c      	b.n	80082a0 <timer_loop+0x68>
    {
        if(_timer_ticks >= target->timeout)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b1a      	ldr	r3, [pc, #104]	; (80082b4 <timer_loop+0x7c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d823      	bhi.n	800829a <timer_loop+0x62>
        {
        	if(target->counter == Timer_Loop)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825a:	d107      	bne.n	800826c <timer_loop+0x34>
        	{
        		target->timeout = _timer_ticks + target->repeat;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	4b14      	ldr	r3, [pc, #80]	; (80082b4 <timer_loop+0x7c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	441a      	add	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	e013      	b.n	8008294 <timer_loop+0x5c>
        	}
        	else
        	{
        		target->counter = target->counter - 1;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	1e5a      	subs	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	609a      	str	r2, [r3, #8]

				if(target->counter == 0)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d103      	bne.n	8008286 <timer_loop+0x4e>
				{
					timer_stop(target);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff ffb8 	bl	80081f4 <timer_stop>
 8008284:	e006      	b.n	8008294 <timer_loop+0x5c>
				}
				else
				{
					target->timeout = _timer_ticks + target->repeat;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <timer_loop+0x7c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	441a      	add	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	601a      	str	r2, [r3, #0]
				}
        	}
        	target->timeout_cb();
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	4798      	blx	r3
    for(target = head_handle; target; target = target->next)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	607b      	str	r3, [r7, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1cf      	bne.n	8008246 <timer_loop+0xe>
        }
    }
}
 80082a6:	bf00      	nop
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	2000042c 	.word	0x2000042c
 80082b4:	20000430 	.word	0x20000430

080082b8 <timer_ticks>:
  * @brief  background ticks, timer repeat invoking interval 1ms.
  * @param  None.
  * @retval None.
  */
void timer_ticks(void)
{
 80082b8:	b480      	push	{r7}
 80082ba:	af00      	add	r7, sp, #0
    _timer_ticks++;
 80082bc:	4b04      	ldr	r3, [pc, #16]	; (80082d0 <timer_ticks+0x18>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3301      	adds	r3, #1
 80082c2:	4a03      	ldr	r2, [pc, #12]	; (80082d0 <timer_ticks+0x18>)
 80082c4:	6013      	str	r3, [r2, #0]
}
 80082c6:	bf00      	nop
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	20000430 	.word	0x20000430

080082d4 <__errno>:
 80082d4:	4b01      	ldr	r3, [pc, #4]	; (80082dc <__errno+0x8>)
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	2000017c 	.word	0x2000017c

080082e0 <__libc_init_array>:
 80082e0:	b570      	push	{r4, r5, r6, lr}
 80082e2:	2600      	movs	r6, #0
 80082e4:	4d0c      	ldr	r5, [pc, #48]	; (8008318 <__libc_init_array+0x38>)
 80082e6:	4c0d      	ldr	r4, [pc, #52]	; (800831c <__libc_init_array+0x3c>)
 80082e8:	1b64      	subs	r4, r4, r5
 80082ea:	10a4      	asrs	r4, r4, #2
 80082ec:	42a6      	cmp	r6, r4
 80082ee:	d109      	bne.n	8008304 <__libc_init_array+0x24>
 80082f0:	f000 fce4 	bl	8008cbc <_init>
 80082f4:	2600      	movs	r6, #0
 80082f6:	4d0a      	ldr	r5, [pc, #40]	; (8008320 <__libc_init_array+0x40>)
 80082f8:	4c0a      	ldr	r4, [pc, #40]	; (8008324 <__libc_init_array+0x44>)
 80082fa:	1b64      	subs	r4, r4, r5
 80082fc:	10a4      	asrs	r4, r4, #2
 80082fe:	42a6      	cmp	r6, r4
 8008300:	d105      	bne.n	800830e <__libc_init_array+0x2e>
 8008302:	bd70      	pop	{r4, r5, r6, pc}
 8008304:	f855 3b04 	ldr.w	r3, [r5], #4
 8008308:	4798      	blx	r3
 800830a:	3601      	adds	r6, #1
 800830c:	e7ee      	b.n	80082ec <__libc_init_array+0xc>
 800830e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008312:	4798      	blx	r3
 8008314:	3601      	adds	r6, #1
 8008316:	e7f2      	b.n	80082fe <__libc_init_array+0x1e>
 8008318:	08008df0 	.word	0x08008df0
 800831c:	08008df0 	.word	0x08008df0
 8008320:	08008df0 	.word	0x08008df0
 8008324:	08008df4 	.word	0x08008df4

08008328 <memset>:
 8008328:	4603      	mov	r3, r0
 800832a:	4402      	add	r2, r0
 800832c:	4293      	cmp	r3, r2
 800832e:	d100      	bne.n	8008332 <memset+0xa>
 8008330:	4770      	bx	lr
 8008332:	f803 1b01 	strb.w	r1, [r3], #1
 8008336:	e7f9      	b.n	800832c <memset+0x4>

08008338 <_puts_r>:
 8008338:	b570      	push	{r4, r5, r6, lr}
 800833a:	460e      	mov	r6, r1
 800833c:	4605      	mov	r5, r0
 800833e:	b118      	cbz	r0, 8008348 <_puts_r+0x10>
 8008340:	6983      	ldr	r3, [r0, #24]
 8008342:	b90b      	cbnz	r3, 8008348 <_puts_r+0x10>
 8008344:	f000 fa48 	bl	80087d8 <__sinit>
 8008348:	69ab      	ldr	r3, [r5, #24]
 800834a:	68ac      	ldr	r4, [r5, #8]
 800834c:	b913      	cbnz	r3, 8008354 <_puts_r+0x1c>
 800834e:	4628      	mov	r0, r5
 8008350:	f000 fa42 	bl	80087d8 <__sinit>
 8008354:	4b2c      	ldr	r3, [pc, #176]	; (8008408 <_puts_r+0xd0>)
 8008356:	429c      	cmp	r4, r3
 8008358:	d120      	bne.n	800839c <_puts_r+0x64>
 800835a:	686c      	ldr	r4, [r5, #4]
 800835c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800835e:	07db      	lsls	r3, r3, #31
 8008360:	d405      	bmi.n	800836e <_puts_r+0x36>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	0598      	lsls	r0, r3, #22
 8008366:	d402      	bmi.n	800836e <_puts_r+0x36>
 8008368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836a:	f000 fad3 	bl	8008914 <__retarget_lock_acquire_recursive>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	0719      	lsls	r1, r3, #28
 8008372:	d51d      	bpl.n	80083b0 <_puts_r+0x78>
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	b1db      	cbz	r3, 80083b0 <_puts_r+0x78>
 8008378:	3e01      	subs	r6, #1
 800837a:	68a3      	ldr	r3, [r4, #8]
 800837c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008380:	3b01      	subs	r3, #1
 8008382:	60a3      	str	r3, [r4, #8]
 8008384:	bb39      	cbnz	r1, 80083d6 <_puts_r+0x9e>
 8008386:	2b00      	cmp	r3, #0
 8008388:	da38      	bge.n	80083fc <_puts_r+0xc4>
 800838a:	4622      	mov	r2, r4
 800838c:	210a      	movs	r1, #10
 800838e:	4628      	mov	r0, r5
 8008390:	f000 f848 	bl	8008424 <__swbuf_r>
 8008394:	3001      	adds	r0, #1
 8008396:	d011      	beq.n	80083bc <_puts_r+0x84>
 8008398:	250a      	movs	r5, #10
 800839a:	e011      	b.n	80083c0 <_puts_r+0x88>
 800839c:	4b1b      	ldr	r3, [pc, #108]	; (800840c <_puts_r+0xd4>)
 800839e:	429c      	cmp	r4, r3
 80083a0:	d101      	bne.n	80083a6 <_puts_r+0x6e>
 80083a2:	68ac      	ldr	r4, [r5, #8]
 80083a4:	e7da      	b.n	800835c <_puts_r+0x24>
 80083a6:	4b1a      	ldr	r3, [pc, #104]	; (8008410 <_puts_r+0xd8>)
 80083a8:	429c      	cmp	r4, r3
 80083aa:	bf08      	it	eq
 80083ac:	68ec      	ldreq	r4, [r5, #12]
 80083ae:	e7d5      	b.n	800835c <_puts_r+0x24>
 80083b0:	4621      	mov	r1, r4
 80083b2:	4628      	mov	r0, r5
 80083b4:	f000 f888 	bl	80084c8 <__swsetup_r>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d0dd      	beq.n	8008378 <_puts_r+0x40>
 80083bc:	f04f 35ff 	mov.w	r5, #4294967295
 80083c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083c2:	07da      	lsls	r2, r3, #31
 80083c4:	d405      	bmi.n	80083d2 <_puts_r+0x9a>
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	059b      	lsls	r3, r3, #22
 80083ca:	d402      	bmi.n	80083d2 <_puts_r+0x9a>
 80083cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ce:	f000 faa2 	bl	8008916 <__retarget_lock_release_recursive>
 80083d2:	4628      	mov	r0, r5
 80083d4:	bd70      	pop	{r4, r5, r6, pc}
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da04      	bge.n	80083e4 <_puts_r+0xac>
 80083da:	69a2      	ldr	r2, [r4, #24]
 80083dc:	429a      	cmp	r2, r3
 80083de:	dc06      	bgt.n	80083ee <_puts_r+0xb6>
 80083e0:	290a      	cmp	r1, #10
 80083e2:	d004      	beq.n	80083ee <_puts_r+0xb6>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	6022      	str	r2, [r4, #0]
 80083ea:	7019      	strb	r1, [r3, #0]
 80083ec:	e7c5      	b.n	800837a <_puts_r+0x42>
 80083ee:	4622      	mov	r2, r4
 80083f0:	4628      	mov	r0, r5
 80083f2:	f000 f817 	bl	8008424 <__swbuf_r>
 80083f6:	3001      	adds	r0, #1
 80083f8:	d1bf      	bne.n	800837a <_puts_r+0x42>
 80083fa:	e7df      	b.n	80083bc <_puts_r+0x84>
 80083fc:	250a      	movs	r5, #10
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	6022      	str	r2, [r4, #0]
 8008404:	701d      	strb	r5, [r3, #0]
 8008406:	e7db      	b.n	80083c0 <_puts_r+0x88>
 8008408:	08008db0 	.word	0x08008db0
 800840c:	08008dd0 	.word	0x08008dd0
 8008410:	08008d90 	.word	0x08008d90

08008414 <puts>:
 8008414:	4b02      	ldr	r3, [pc, #8]	; (8008420 <puts+0xc>)
 8008416:	4601      	mov	r1, r0
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	f7ff bf8d 	b.w	8008338 <_puts_r>
 800841e:	bf00      	nop
 8008420:	2000017c 	.word	0x2000017c

08008424 <__swbuf_r>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	460e      	mov	r6, r1
 8008428:	4614      	mov	r4, r2
 800842a:	4605      	mov	r5, r0
 800842c:	b118      	cbz	r0, 8008436 <__swbuf_r+0x12>
 800842e:	6983      	ldr	r3, [r0, #24]
 8008430:	b90b      	cbnz	r3, 8008436 <__swbuf_r+0x12>
 8008432:	f000 f9d1 	bl	80087d8 <__sinit>
 8008436:	4b21      	ldr	r3, [pc, #132]	; (80084bc <__swbuf_r+0x98>)
 8008438:	429c      	cmp	r4, r3
 800843a:	d12b      	bne.n	8008494 <__swbuf_r+0x70>
 800843c:	686c      	ldr	r4, [r5, #4]
 800843e:	69a3      	ldr	r3, [r4, #24]
 8008440:	60a3      	str	r3, [r4, #8]
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	071a      	lsls	r2, r3, #28
 8008446:	d52f      	bpl.n	80084a8 <__swbuf_r+0x84>
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	b36b      	cbz	r3, 80084a8 <__swbuf_r+0x84>
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	6820      	ldr	r0, [r4, #0]
 8008450:	b2f6      	uxtb	r6, r6
 8008452:	1ac0      	subs	r0, r0, r3
 8008454:	6963      	ldr	r3, [r4, #20]
 8008456:	4637      	mov	r7, r6
 8008458:	4283      	cmp	r3, r0
 800845a:	dc04      	bgt.n	8008466 <__swbuf_r+0x42>
 800845c:	4621      	mov	r1, r4
 800845e:	4628      	mov	r0, r5
 8008460:	f000 f926 	bl	80086b0 <_fflush_r>
 8008464:	bb30      	cbnz	r0, 80084b4 <__swbuf_r+0x90>
 8008466:	68a3      	ldr	r3, [r4, #8]
 8008468:	3001      	adds	r0, #1
 800846a:	3b01      	subs	r3, #1
 800846c:	60a3      	str	r3, [r4, #8]
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	6022      	str	r2, [r4, #0]
 8008474:	701e      	strb	r6, [r3, #0]
 8008476:	6963      	ldr	r3, [r4, #20]
 8008478:	4283      	cmp	r3, r0
 800847a:	d004      	beq.n	8008486 <__swbuf_r+0x62>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	07db      	lsls	r3, r3, #31
 8008480:	d506      	bpl.n	8008490 <__swbuf_r+0x6c>
 8008482:	2e0a      	cmp	r6, #10
 8008484:	d104      	bne.n	8008490 <__swbuf_r+0x6c>
 8008486:	4621      	mov	r1, r4
 8008488:	4628      	mov	r0, r5
 800848a:	f000 f911 	bl	80086b0 <_fflush_r>
 800848e:	b988      	cbnz	r0, 80084b4 <__swbuf_r+0x90>
 8008490:	4638      	mov	r0, r7
 8008492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <__swbuf_r+0x9c>)
 8008496:	429c      	cmp	r4, r3
 8008498:	d101      	bne.n	800849e <__swbuf_r+0x7a>
 800849a:	68ac      	ldr	r4, [r5, #8]
 800849c:	e7cf      	b.n	800843e <__swbuf_r+0x1a>
 800849e:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <__swbuf_r+0xa0>)
 80084a0:	429c      	cmp	r4, r3
 80084a2:	bf08      	it	eq
 80084a4:	68ec      	ldreq	r4, [r5, #12]
 80084a6:	e7ca      	b.n	800843e <__swbuf_r+0x1a>
 80084a8:	4621      	mov	r1, r4
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 f80c 	bl	80084c8 <__swsetup_r>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d0cb      	beq.n	800844c <__swbuf_r+0x28>
 80084b4:	f04f 37ff 	mov.w	r7, #4294967295
 80084b8:	e7ea      	b.n	8008490 <__swbuf_r+0x6c>
 80084ba:	bf00      	nop
 80084bc:	08008db0 	.word	0x08008db0
 80084c0:	08008dd0 	.word	0x08008dd0
 80084c4:	08008d90 	.word	0x08008d90

080084c8 <__swsetup_r>:
 80084c8:	4b32      	ldr	r3, [pc, #200]	; (8008594 <__swsetup_r+0xcc>)
 80084ca:	b570      	push	{r4, r5, r6, lr}
 80084cc:	681d      	ldr	r5, [r3, #0]
 80084ce:	4606      	mov	r6, r0
 80084d0:	460c      	mov	r4, r1
 80084d2:	b125      	cbz	r5, 80084de <__swsetup_r+0x16>
 80084d4:	69ab      	ldr	r3, [r5, #24]
 80084d6:	b913      	cbnz	r3, 80084de <__swsetup_r+0x16>
 80084d8:	4628      	mov	r0, r5
 80084da:	f000 f97d 	bl	80087d8 <__sinit>
 80084de:	4b2e      	ldr	r3, [pc, #184]	; (8008598 <__swsetup_r+0xd0>)
 80084e0:	429c      	cmp	r4, r3
 80084e2:	d10f      	bne.n	8008504 <__swsetup_r+0x3c>
 80084e4:	686c      	ldr	r4, [r5, #4]
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084ec:	0719      	lsls	r1, r3, #28
 80084ee:	d42c      	bmi.n	800854a <__swsetup_r+0x82>
 80084f0:	06dd      	lsls	r5, r3, #27
 80084f2:	d411      	bmi.n	8008518 <__swsetup_r+0x50>
 80084f4:	2309      	movs	r3, #9
 80084f6:	6033      	str	r3, [r6, #0]
 80084f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	e03e      	b.n	8008582 <__swsetup_r+0xba>
 8008504:	4b25      	ldr	r3, [pc, #148]	; (800859c <__swsetup_r+0xd4>)
 8008506:	429c      	cmp	r4, r3
 8008508:	d101      	bne.n	800850e <__swsetup_r+0x46>
 800850a:	68ac      	ldr	r4, [r5, #8]
 800850c:	e7eb      	b.n	80084e6 <__swsetup_r+0x1e>
 800850e:	4b24      	ldr	r3, [pc, #144]	; (80085a0 <__swsetup_r+0xd8>)
 8008510:	429c      	cmp	r4, r3
 8008512:	bf08      	it	eq
 8008514:	68ec      	ldreq	r4, [r5, #12]
 8008516:	e7e6      	b.n	80084e6 <__swsetup_r+0x1e>
 8008518:	0758      	lsls	r0, r3, #29
 800851a:	d512      	bpl.n	8008542 <__swsetup_r+0x7a>
 800851c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800851e:	b141      	cbz	r1, 8008532 <__swsetup_r+0x6a>
 8008520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008524:	4299      	cmp	r1, r3
 8008526:	d002      	beq.n	800852e <__swsetup_r+0x66>
 8008528:	4630      	mov	r0, r6
 800852a:	f000 fa59 	bl	80089e0 <_free_r>
 800852e:	2300      	movs	r3, #0
 8008530:	6363      	str	r3, [r4, #52]	; 0x34
 8008532:	89a3      	ldrh	r3, [r4, #12]
 8008534:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008538:	81a3      	strh	r3, [r4, #12]
 800853a:	2300      	movs	r3, #0
 800853c:	6063      	str	r3, [r4, #4]
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f043 0308 	orr.w	r3, r3, #8
 8008548:	81a3      	strh	r3, [r4, #12]
 800854a:	6923      	ldr	r3, [r4, #16]
 800854c:	b94b      	cbnz	r3, 8008562 <__swsetup_r+0x9a>
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008558:	d003      	beq.n	8008562 <__swsetup_r+0x9a>
 800855a:	4621      	mov	r1, r4
 800855c:	4630      	mov	r0, r6
 800855e:	f000 f9ff 	bl	8008960 <__smakebuf_r>
 8008562:	89a0      	ldrh	r0, [r4, #12]
 8008564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008568:	f010 0301 	ands.w	r3, r0, #1
 800856c:	d00a      	beq.n	8008584 <__swsetup_r+0xbc>
 800856e:	2300      	movs	r3, #0
 8008570:	60a3      	str	r3, [r4, #8]
 8008572:	6963      	ldr	r3, [r4, #20]
 8008574:	425b      	negs	r3, r3
 8008576:	61a3      	str	r3, [r4, #24]
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	b943      	cbnz	r3, 800858e <__swsetup_r+0xc6>
 800857c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008580:	d1ba      	bne.n	80084f8 <__swsetup_r+0x30>
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	0781      	lsls	r1, r0, #30
 8008586:	bf58      	it	pl
 8008588:	6963      	ldrpl	r3, [r4, #20]
 800858a:	60a3      	str	r3, [r4, #8]
 800858c:	e7f4      	b.n	8008578 <__swsetup_r+0xb0>
 800858e:	2000      	movs	r0, #0
 8008590:	e7f7      	b.n	8008582 <__swsetup_r+0xba>
 8008592:	bf00      	nop
 8008594:	2000017c 	.word	0x2000017c
 8008598:	08008db0 	.word	0x08008db0
 800859c:	08008dd0 	.word	0x08008dd0
 80085a0:	08008d90 	.word	0x08008d90

080085a4 <__sflush_r>:
 80085a4:	898a      	ldrh	r2, [r1, #12]
 80085a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085aa:	4605      	mov	r5, r0
 80085ac:	0710      	lsls	r0, r2, #28
 80085ae:	460c      	mov	r4, r1
 80085b0:	d458      	bmi.n	8008664 <__sflush_r+0xc0>
 80085b2:	684b      	ldr	r3, [r1, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dc05      	bgt.n	80085c4 <__sflush_r+0x20>
 80085b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	dc02      	bgt.n	80085c4 <__sflush_r+0x20>
 80085be:	2000      	movs	r0, #0
 80085c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	d0f9      	beq.n	80085be <__sflush_r+0x1a>
 80085ca:	2300      	movs	r3, #0
 80085cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085d0:	682f      	ldr	r7, [r5, #0]
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	d032      	beq.n	800863c <__sflush_r+0x98>
 80085d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	075a      	lsls	r2, r3, #29
 80085dc:	d505      	bpl.n	80085ea <__sflush_r+0x46>
 80085de:	6863      	ldr	r3, [r4, #4]
 80085e0:	1ac0      	subs	r0, r0, r3
 80085e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085e4:	b10b      	cbz	r3, 80085ea <__sflush_r+0x46>
 80085e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085e8:	1ac0      	subs	r0, r0, r3
 80085ea:	2300      	movs	r3, #0
 80085ec:	4602      	mov	r2, r0
 80085ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085f0:	4628      	mov	r0, r5
 80085f2:	6a21      	ldr	r1, [r4, #32]
 80085f4:	47b0      	blx	r6
 80085f6:	1c43      	adds	r3, r0, #1
 80085f8:	89a3      	ldrh	r3, [r4, #12]
 80085fa:	d106      	bne.n	800860a <__sflush_r+0x66>
 80085fc:	6829      	ldr	r1, [r5, #0]
 80085fe:	291d      	cmp	r1, #29
 8008600:	d82c      	bhi.n	800865c <__sflush_r+0xb8>
 8008602:	4a2a      	ldr	r2, [pc, #168]	; (80086ac <__sflush_r+0x108>)
 8008604:	40ca      	lsrs	r2, r1
 8008606:	07d6      	lsls	r6, r2, #31
 8008608:	d528      	bpl.n	800865c <__sflush_r+0xb8>
 800860a:	2200      	movs	r2, #0
 800860c:	6062      	str	r2, [r4, #4]
 800860e:	6922      	ldr	r2, [r4, #16]
 8008610:	04d9      	lsls	r1, r3, #19
 8008612:	6022      	str	r2, [r4, #0]
 8008614:	d504      	bpl.n	8008620 <__sflush_r+0x7c>
 8008616:	1c42      	adds	r2, r0, #1
 8008618:	d101      	bne.n	800861e <__sflush_r+0x7a>
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	b903      	cbnz	r3, 8008620 <__sflush_r+0x7c>
 800861e:	6560      	str	r0, [r4, #84]	; 0x54
 8008620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008622:	602f      	str	r7, [r5, #0]
 8008624:	2900      	cmp	r1, #0
 8008626:	d0ca      	beq.n	80085be <__sflush_r+0x1a>
 8008628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800862c:	4299      	cmp	r1, r3
 800862e:	d002      	beq.n	8008636 <__sflush_r+0x92>
 8008630:	4628      	mov	r0, r5
 8008632:	f000 f9d5 	bl	80089e0 <_free_r>
 8008636:	2000      	movs	r0, #0
 8008638:	6360      	str	r0, [r4, #52]	; 0x34
 800863a:	e7c1      	b.n	80085c0 <__sflush_r+0x1c>
 800863c:	6a21      	ldr	r1, [r4, #32]
 800863e:	2301      	movs	r3, #1
 8008640:	4628      	mov	r0, r5
 8008642:	47b0      	blx	r6
 8008644:	1c41      	adds	r1, r0, #1
 8008646:	d1c7      	bne.n	80085d8 <__sflush_r+0x34>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0c4      	beq.n	80085d8 <__sflush_r+0x34>
 800864e:	2b1d      	cmp	r3, #29
 8008650:	d001      	beq.n	8008656 <__sflush_r+0xb2>
 8008652:	2b16      	cmp	r3, #22
 8008654:	d101      	bne.n	800865a <__sflush_r+0xb6>
 8008656:	602f      	str	r7, [r5, #0]
 8008658:	e7b1      	b.n	80085be <__sflush_r+0x1a>
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008660:	81a3      	strh	r3, [r4, #12]
 8008662:	e7ad      	b.n	80085c0 <__sflush_r+0x1c>
 8008664:	690f      	ldr	r7, [r1, #16]
 8008666:	2f00      	cmp	r7, #0
 8008668:	d0a9      	beq.n	80085be <__sflush_r+0x1a>
 800866a:	0793      	lsls	r3, r2, #30
 800866c:	bf18      	it	ne
 800866e:	2300      	movne	r3, #0
 8008670:	680e      	ldr	r6, [r1, #0]
 8008672:	bf08      	it	eq
 8008674:	694b      	ldreq	r3, [r1, #20]
 8008676:	eba6 0807 	sub.w	r8, r6, r7
 800867a:	600f      	str	r7, [r1, #0]
 800867c:	608b      	str	r3, [r1, #8]
 800867e:	f1b8 0f00 	cmp.w	r8, #0
 8008682:	dd9c      	ble.n	80085be <__sflush_r+0x1a>
 8008684:	4643      	mov	r3, r8
 8008686:	463a      	mov	r2, r7
 8008688:	4628      	mov	r0, r5
 800868a:	6a21      	ldr	r1, [r4, #32]
 800868c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800868e:	47b0      	blx	r6
 8008690:	2800      	cmp	r0, #0
 8008692:	dc06      	bgt.n	80086a2 <__sflush_r+0xfe>
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	f04f 30ff 	mov.w	r0, #4294967295
 800869a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869e:	81a3      	strh	r3, [r4, #12]
 80086a0:	e78e      	b.n	80085c0 <__sflush_r+0x1c>
 80086a2:	4407      	add	r7, r0
 80086a4:	eba8 0800 	sub.w	r8, r8, r0
 80086a8:	e7e9      	b.n	800867e <__sflush_r+0xda>
 80086aa:	bf00      	nop
 80086ac:	20400001 	.word	0x20400001

080086b0 <_fflush_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	690b      	ldr	r3, [r1, #16]
 80086b4:	4605      	mov	r5, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	b913      	cbnz	r3, 80086c0 <_fflush_r+0x10>
 80086ba:	2500      	movs	r5, #0
 80086bc:	4628      	mov	r0, r5
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	b118      	cbz	r0, 80086ca <_fflush_r+0x1a>
 80086c2:	6983      	ldr	r3, [r0, #24]
 80086c4:	b90b      	cbnz	r3, 80086ca <_fflush_r+0x1a>
 80086c6:	f000 f887 	bl	80087d8 <__sinit>
 80086ca:	4b14      	ldr	r3, [pc, #80]	; (800871c <_fflush_r+0x6c>)
 80086cc:	429c      	cmp	r4, r3
 80086ce:	d11b      	bne.n	8008708 <_fflush_r+0x58>
 80086d0:	686c      	ldr	r4, [r5, #4]
 80086d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0ef      	beq.n	80086ba <_fflush_r+0xa>
 80086da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086dc:	07d0      	lsls	r0, r2, #31
 80086de:	d404      	bmi.n	80086ea <_fflush_r+0x3a>
 80086e0:	0599      	lsls	r1, r3, #22
 80086e2:	d402      	bmi.n	80086ea <_fflush_r+0x3a>
 80086e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086e6:	f000 f915 	bl	8008914 <__retarget_lock_acquire_recursive>
 80086ea:	4628      	mov	r0, r5
 80086ec:	4621      	mov	r1, r4
 80086ee:	f7ff ff59 	bl	80085a4 <__sflush_r>
 80086f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086f4:	4605      	mov	r5, r0
 80086f6:	07da      	lsls	r2, r3, #31
 80086f8:	d4e0      	bmi.n	80086bc <_fflush_r+0xc>
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	059b      	lsls	r3, r3, #22
 80086fe:	d4dd      	bmi.n	80086bc <_fflush_r+0xc>
 8008700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008702:	f000 f908 	bl	8008916 <__retarget_lock_release_recursive>
 8008706:	e7d9      	b.n	80086bc <_fflush_r+0xc>
 8008708:	4b05      	ldr	r3, [pc, #20]	; (8008720 <_fflush_r+0x70>)
 800870a:	429c      	cmp	r4, r3
 800870c:	d101      	bne.n	8008712 <_fflush_r+0x62>
 800870e:	68ac      	ldr	r4, [r5, #8]
 8008710:	e7df      	b.n	80086d2 <_fflush_r+0x22>
 8008712:	4b04      	ldr	r3, [pc, #16]	; (8008724 <_fflush_r+0x74>)
 8008714:	429c      	cmp	r4, r3
 8008716:	bf08      	it	eq
 8008718:	68ec      	ldreq	r4, [r5, #12]
 800871a:	e7da      	b.n	80086d2 <_fflush_r+0x22>
 800871c:	08008db0 	.word	0x08008db0
 8008720:	08008dd0 	.word	0x08008dd0
 8008724:	08008d90 	.word	0x08008d90

08008728 <std>:
 8008728:	2300      	movs	r3, #0
 800872a:	b510      	push	{r4, lr}
 800872c:	4604      	mov	r4, r0
 800872e:	e9c0 3300 	strd	r3, r3, [r0]
 8008732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008736:	6083      	str	r3, [r0, #8]
 8008738:	8181      	strh	r1, [r0, #12]
 800873a:	6643      	str	r3, [r0, #100]	; 0x64
 800873c:	81c2      	strh	r2, [r0, #14]
 800873e:	6183      	str	r3, [r0, #24]
 8008740:	4619      	mov	r1, r3
 8008742:	2208      	movs	r2, #8
 8008744:	305c      	adds	r0, #92	; 0x5c
 8008746:	f7ff fdef 	bl	8008328 <memset>
 800874a:	4b05      	ldr	r3, [pc, #20]	; (8008760 <std+0x38>)
 800874c:	6224      	str	r4, [r4, #32]
 800874e:	6263      	str	r3, [r4, #36]	; 0x24
 8008750:	4b04      	ldr	r3, [pc, #16]	; (8008764 <std+0x3c>)
 8008752:	62a3      	str	r3, [r4, #40]	; 0x28
 8008754:	4b04      	ldr	r3, [pc, #16]	; (8008768 <std+0x40>)
 8008756:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008758:	4b04      	ldr	r3, [pc, #16]	; (800876c <std+0x44>)
 800875a:	6323      	str	r3, [r4, #48]	; 0x30
 800875c:	bd10      	pop	{r4, pc}
 800875e:	bf00      	nop
 8008760:	08008b4d 	.word	0x08008b4d
 8008764:	08008b6f 	.word	0x08008b6f
 8008768:	08008ba7 	.word	0x08008ba7
 800876c:	08008bcb 	.word	0x08008bcb

08008770 <_cleanup_r>:
 8008770:	4901      	ldr	r1, [pc, #4]	; (8008778 <_cleanup_r+0x8>)
 8008772:	f000 b8af 	b.w	80088d4 <_fwalk_reent>
 8008776:	bf00      	nop
 8008778:	080086b1 	.word	0x080086b1

0800877c <__sfmoreglue>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	2568      	movs	r5, #104	; 0x68
 8008780:	1e4a      	subs	r2, r1, #1
 8008782:	4355      	muls	r5, r2
 8008784:	460e      	mov	r6, r1
 8008786:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800878a:	f000 f975 	bl	8008a78 <_malloc_r>
 800878e:	4604      	mov	r4, r0
 8008790:	b140      	cbz	r0, 80087a4 <__sfmoreglue+0x28>
 8008792:	2100      	movs	r1, #0
 8008794:	e9c0 1600 	strd	r1, r6, [r0]
 8008798:	300c      	adds	r0, #12
 800879a:	60a0      	str	r0, [r4, #8]
 800879c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087a0:	f7ff fdc2 	bl	8008328 <memset>
 80087a4:	4620      	mov	r0, r4
 80087a6:	bd70      	pop	{r4, r5, r6, pc}

080087a8 <__sfp_lock_acquire>:
 80087a8:	4801      	ldr	r0, [pc, #4]	; (80087b0 <__sfp_lock_acquire+0x8>)
 80087aa:	f000 b8b3 	b.w	8008914 <__retarget_lock_acquire_recursive>
 80087ae:	bf00      	nop
 80087b0:	200014a4 	.word	0x200014a4

080087b4 <__sfp_lock_release>:
 80087b4:	4801      	ldr	r0, [pc, #4]	; (80087bc <__sfp_lock_release+0x8>)
 80087b6:	f000 b8ae 	b.w	8008916 <__retarget_lock_release_recursive>
 80087ba:	bf00      	nop
 80087bc:	200014a4 	.word	0x200014a4

080087c0 <__sinit_lock_acquire>:
 80087c0:	4801      	ldr	r0, [pc, #4]	; (80087c8 <__sinit_lock_acquire+0x8>)
 80087c2:	f000 b8a7 	b.w	8008914 <__retarget_lock_acquire_recursive>
 80087c6:	bf00      	nop
 80087c8:	2000149f 	.word	0x2000149f

080087cc <__sinit_lock_release>:
 80087cc:	4801      	ldr	r0, [pc, #4]	; (80087d4 <__sinit_lock_release+0x8>)
 80087ce:	f000 b8a2 	b.w	8008916 <__retarget_lock_release_recursive>
 80087d2:	bf00      	nop
 80087d4:	2000149f 	.word	0x2000149f

080087d8 <__sinit>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	4604      	mov	r4, r0
 80087dc:	f7ff fff0 	bl	80087c0 <__sinit_lock_acquire>
 80087e0:	69a3      	ldr	r3, [r4, #24]
 80087e2:	b11b      	cbz	r3, 80087ec <__sinit+0x14>
 80087e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e8:	f7ff bff0 	b.w	80087cc <__sinit_lock_release>
 80087ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087f0:	6523      	str	r3, [r4, #80]	; 0x50
 80087f2:	4b13      	ldr	r3, [pc, #76]	; (8008840 <__sinit+0x68>)
 80087f4:	4a13      	ldr	r2, [pc, #76]	; (8008844 <__sinit+0x6c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80087fa:	42a3      	cmp	r3, r4
 80087fc:	bf08      	it	eq
 80087fe:	2301      	moveq	r3, #1
 8008800:	4620      	mov	r0, r4
 8008802:	bf08      	it	eq
 8008804:	61a3      	streq	r3, [r4, #24]
 8008806:	f000 f81f 	bl	8008848 <__sfp>
 800880a:	6060      	str	r0, [r4, #4]
 800880c:	4620      	mov	r0, r4
 800880e:	f000 f81b 	bl	8008848 <__sfp>
 8008812:	60a0      	str	r0, [r4, #8]
 8008814:	4620      	mov	r0, r4
 8008816:	f000 f817 	bl	8008848 <__sfp>
 800881a:	2200      	movs	r2, #0
 800881c:	2104      	movs	r1, #4
 800881e:	60e0      	str	r0, [r4, #12]
 8008820:	6860      	ldr	r0, [r4, #4]
 8008822:	f7ff ff81 	bl	8008728 <std>
 8008826:	2201      	movs	r2, #1
 8008828:	2109      	movs	r1, #9
 800882a:	68a0      	ldr	r0, [r4, #8]
 800882c:	f7ff ff7c 	bl	8008728 <std>
 8008830:	2202      	movs	r2, #2
 8008832:	2112      	movs	r1, #18
 8008834:	68e0      	ldr	r0, [r4, #12]
 8008836:	f7ff ff77 	bl	8008728 <std>
 800883a:	2301      	movs	r3, #1
 800883c:	61a3      	str	r3, [r4, #24]
 800883e:	e7d1      	b.n	80087e4 <__sinit+0xc>
 8008840:	08008d8c 	.word	0x08008d8c
 8008844:	08008771 	.word	0x08008771

08008848 <__sfp>:
 8008848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884a:	4607      	mov	r7, r0
 800884c:	f7ff ffac 	bl	80087a8 <__sfp_lock_acquire>
 8008850:	4b1e      	ldr	r3, [pc, #120]	; (80088cc <__sfp+0x84>)
 8008852:	681e      	ldr	r6, [r3, #0]
 8008854:	69b3      	ldr	r3, [r6, #24]
 8008856:	b913      	cbnz	r3, 800885e <__sfp+0x16>
 8008858:	4630      	mov	r0, r6
 800885a:	f7ff ffbd 	bl	80087d8 <__sinit>
 800885e:	3648      	adds	r6, #72	; 0x48
 8008860:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008864:	3b01      	subs	r3, #1
 8008866:	d503      	bpl.n	8008870 <__sfp+0x28>
 8008868:	6833      	ldr	r3, [r6, #0]
 800886a:	b30b      	cbz	r3, 80088b0 <__sfp+0x68>
 800886c:	6836      	ldr	r6, [r6, #0]
 800886e:	e7f7      	b.n	8008860 <__sfp+0x18>
 8008870:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008874:	b9d5      	cbnz	r5, 80088ac <__sfp+0x64>
 8008876:	4b16      	ldr	r3, [pc, #88]	; (80088d0 <__sfp+0x88>)
 8008878:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800887c:	60e3      	str	r3, [r4, #12]
 800887e:	6665      	str	r5, [r4, #100]	; 0x64
 8008880:	f000 f847 	bl	8008912 <__retarget_lock_init_recursive>
 8008884:	f7ff ff96 	bl	80087b4 <__sfp_lock_release>
 8008888:	2208      	movs	r2, #8
 800888a:	4629      	mov	r1, r5
 800888c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008894:	6025      	str	r5, [r4, #0]
 8008896:	61a5      	str	r5, [r4, #24]
 8008898:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800889c:	f7ff fd44 	bl	8008328 <memset>
 80088a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088a8:	4620      	mov	r0, r4
 80088aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ac:	3468      	adds	r4, #104	; 0x68
 80088ae:	e7d9      	b.n	8008864 <__sfp+0x1c>
 80088b0:	2104      	movs	r1, #4
 80088b2:	4638      	mov	r0, r7
 80088b4:	f7ff ff62 	bl	800877c <__sfmoreglue>
 80088b8:	4604      	mov	r4, r0
 80088ba:	6030      	str	r0, [r6, #0]
 80088bc:	2800      	cmp	r0, #0
 80088be:	d1d5      	bne.n	800886c <__sfp+0x24>
 80088c0:	f7ff ff78 	bl	80087b4 <__sfp_lock_release>
 80088c4:	230c      	movs	r3, #12
 80088c6:	603b      	str	r3, [r7, #0]
 80088c8:	e7ee      	b.n	80088a8 <__sfp+0x60>
 80088ca:	bf00      	nop
 80088cc:	08008d8c 	.word	0x08008d8c
 80088d0:	ffff0001 	.word	0xffff0001

080088d4 <_fwalk_reent>:
 80088d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d8:	4606      	mov	r6, r0
 80088da:	4688      	mov	r8, r1
 80088dc:	2700      	movs	r7, #0
 80088de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088e6:	f1b9 0901 	subs.w	r9, r9, #1
 80088ea:	d505      	bpl.n	80088f8 <_fwalk_reent+0x24>
 80088ec:	6824      	ldr	r4, [r4, #0]
 80088ee:	2c00      	cmp	r4, #0
 80088f0:	d1f7      	bne.n	80088e2 <_fwalk_reent+0xe>
 80088f2:	4638      	mov	r0, r7
 80088f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f8:	89ab      	ldrh	r3, [r5, #12]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d907      	bls.n	800890e <_fwalk_reent+0x3a>
 80088fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008902:	3301      	adds	r3, #1
 8008904:	d003      	beq.n	800890e <_fwalk_reent+0x3a>
 8008906:	4629      	mov	r1, r5
 8008908:	4630      	mov	r0, r6
 800890a:	47c0      	blx	r8
 800890c:	4307      	orrs	r7, r0
 800890e:	3568      	adds	r5, #104	; 0x68
 8008910:	e7e9      	b.n	80088e6 <_fwalk_reent+0x12>

08008912 <__retarget_lock_init_recursive>:
 8008912:	4770      	bx	lr

08008914 <__retarget_lock_acquire_recursive>:
 8008914:	4770      	bx	lr

08008916 <__retarget_lock_release_recursive>:
 8008916:	4770      	bx	lr

08008918 <__swhatbuf_r>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	460e      	mov	r6, r1
 800891c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008920:	4614      	mov	r4, r2
 8008922:	2900      	cmp	r1, #0
 8008924:	461d      	mov	r5, r3
 8008926:	b096      	sub	sp, #88	; 0x58
 8008928:	da07      	bge.n	800893a <__swhatbuf_r+0x22>
 800892a:	2300      	movs	r3, #0
 800892c:	602b      	str	r3, [r5, #0]
 800892e:	89b3      	ldrh	r3, [r6, #12]
 8008930:	061a      	lsls	r2, r3, #24
 8008932:	d410      	bmi.n	8008956 <__swhatbuf_r+0x3e>
 8008934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008938:	e00e      	b.n	8008958 <__swhatbuf_r+0x40>
 800893a:	466a      	mov	r2, sp
 800893c:	f000 f96c 	bl	8008c18 <_fstat_r>
 8008940:	2800      	cmp	r0, #0
 8008942:	dbf2      	blt.n	800892a <__swhatbuf_r+0x12>
 8008944:	9a01      	ldr	r2, [sp, #4]
 8008946:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800894a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800894e:	425a      	negs	r2, r3
 8008950:	415a      	adcs	r2, r3
 8008952:	602a      	str	r2, [r5, #0]
 8008954:	e7ee      	b.n	8008934 <__swhatbuf_r+0x1c>
 8008956:	2340      	movs	r3, #64	; 0x40
 8008958:	2000      	movs	r0, #0
 800895a:	6023      	str	r3, [r4, #0]
 800895c:	b016      	add	sp, #88	; 0x58
 800895e:	bd70      	pop	{r4, r5, r6, pc}

08008960 <__smakebuf_r>:
 8008960:	898b      	ldrh	r3, [r1, #12]
 8008962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008964:	079d      	lsls	r5, r3, #30
 8008966:	4606      	mov	r6, r0
 8008968:	460c      	mov	r4, r1
 800896a:	d507      	bpl.n	800897c <__smakebuf_r+0x1c>
 800896c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	6123      	str	r3, [r4, #16]
 8008974:	2301      	movs	r3, #1
 8008976:	6163      	str	r3, [r4, #20]
 8008978:	b002      	add	sp, #8
 800897a:	bd70      	pop	{r4, r5, r6, pc}
 800897c:	466a      	mov	r2, sp
 800897e:	ab01      	add	r3, sp, #4
 8008980:	f7ff ffca 	bl	8008918 <__swhatbuf_r>
 8008984:	9900      	ldr	r1, [sp, #0]
 8008986:	4605      	mov	r5, r0
 8008988:	4630      	mov	r0, r6
 800898a:	f000 f875 	bl	8008a78 <_malloc_r>
 800898e:	b948      	cbnz	r0, 80089a4 <__smakebuf_r+0x44>
 8008990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008994:	059a      	lsls	r2, r3, #22
 8008996:	d4ef      	bmi.n	8008978 <__smakebuf_r+0x18>
 8008998:	f023 0303 	bic.w	r3, r3, #3
 800899c:	f043 0302 	orr.w	r3, r3, #2
 80089a0:	81a3      	strh	r3, [r4, #12]
 80089a2:	e7e3      	b.n	800896c <__smakebuf_r+0xc>
 80089a4:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <__smakebuf_r+0x7c>)
 80089a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	6020      	str	r0, [r4, #0]
 80089ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b0:	81a3      	strh	r3, [r4, #12]
 80089b2:	9b00      	ldr	r3, [sp, #0]
 80089b4:	6120      	str	r0, [r4, #16]
 80089b6:	6163      	str	r3, [r4, #20]
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	b15b      	cbz	r3, 80089d4 <__smakebuf_r+0x74>
 80089bc:	4630      	mov	r0, r6
 80089be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089c2:	f000 f93b 	bl	8008c3c <_isatty_r>
 80089c6:	b128      	cbz	r0, 80089d4 <__smakebuf_r+0x74>
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	f023 0303 	bic.w	r3, r3, #3
 80089ce:	f043 0301 	orr.w	r3, r3, #1
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	89a0      	ldrh	r0, [r4, #12]
 80089d6:	4305      	orrs	r5, r0
 80089d8:	81a5      	strh	r5, [r4, #12]
 80089da:	e7cd      	b.n	8008978 <__smakebuf_r+0x18>
 80089dc:	08008771 	.word	0x08008771

080089e0 <_free_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4605      	mov	r5, r0
 80089e4:	2900      	cmp	r1, #0
 80089e6:	d043      	beq.n	8008a70 <_free_r+0x90>
 80089e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ec:	1f0c      	subs	r4, r1, #4
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	bfb8      	it	lt
 80089f2:	18e4      	addlt	r4, r4, r3
 80089f4:	f000 f944 	bl	8008c80 <__malloc_lock>
 80089f8:	4a1e      	ldr	r2, [pc, #120]	; (8008a74 <_free_r+0x94>)
 80089fa:	6813      	ldr	r3, [r2, #0]
 80089fc:	4610      	mov	r0, r2
 80089fe:	b933      	cbnz	r3, 8008a0e <_free_r+0x2e>
 8008a00:	6063      	str	r3, [r4, #4]
 8008a02:	6014      	str	r4, [r2, #0]
 8008a04:	4628      	mov	r0, r5
 8008a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a0a:	f000 b93f 	b.w	8008c8c <__malloc_unlock>
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	d90a      	bls.n	8008a28 <_free_r+0x48>
 8008a12:	6821      	ldr	r1, [r4, #0]
 8008a14:	1862      	adds	r2, r4, r1
 8008a16:	4293      	cmp	r3, r2
 8008a18:	bf01      	itttt	eq
 8008a1a:	681a      	ldreq	r2, [r3, #0]
 8008a1c:	685b      	ldreq	r3, [r3, #4]
 8008a1e:	1852      	addeq	r2, r2, r1
 8008a20:	6022      	streq	r2, [r4, #0]
 8008a22:	6063      	str	r3, [r4, #4]
 8008a24:	6004      	str	r4, [r0, #0]
 8008a26:	e7ed      	b.n	8008a04 <_free_r+0x24>
 8008a28:	461a      	mov	r2, r3
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	b10b      	cbz	r3, 8008a32 <_free_r+0x52>
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	d9fa      	bls.n	8008a28 <_free_r+0x48>
 8008a32:	6811      	ldr	r1, [r2, #0]
 8008a34:	1850      	adds	r0, r2, r1
 8008a36:	42a0      	cmp	r0, r4
 8008a38:	d10b      	bne.n	8008a52 <_free_r+0x72>
 8008a3a:	6820      	ldr	r0, [r4, #0]
 8008a3c:	4401      	add	r1, r0
 8008a3e:	1850      	adds	r0, r2, r1
 8008a40:	4283      	cmp	r3, r0
 8008a42:	6011      	str	r1, [r2, #0]
 8008a44:	d1de      	bne.n	8008a04 <_free_r+0x24>
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	4401      	add	r1, r0
 8008a4c:	6011      	str	r1, [r2, #0]
 8008a4e:	6053      	str	r3, [r2, #4]
 8008a50:	e7d8      	b.n	8008a04 <_free_r+0x24>
 8008a52:	d902      	bls.n	8008a5a <_free_r+0x7a>
 8008a54:	230c      	movs	r3, #12
 8008a56:	602b      	str	r3, [r5, #0]
 8008a58:	e7d4      	b.n	8008a04 <_free_r+0x24>
 8008a5a:	6820      	ldr	r0, [r4, #0]
 8008a5c:	1821      	adds	r1, r4, r0
 8008a5e:	428b      	cmp	r3, r1
 8008a60:	bf01      	itttt	eq
 8008a62:	6819      	ldreq	r1, [r3, #0]
 8008a64:	685b      	ldreq	r3, [r3, #4]
 8008a66:	1809      	addeq	r1, r1, r0
 8008a68:	6021      	streq	r1, [r4, #0]
 8008a6a:	6063      	str	r3, [r4, #4]
 8008a6c:	6054      	str	r4, [r2, #4]
 8008a6e:	e7c9      	b.n	8008a04 <_free_r+0x24>
 8008a70:	bd38      	pop	{r3, r4, r5, pc}
 8008a72:	bf00      	nop
 8008a74:	20000434 	.word	0x20000434

08008a78 <_malloc_r>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	1ccd      	adds	r5, r1, #3
 8008a7c:	f025 0503 	bic.w	r5, r5, #3
 8008a80:	3508      	adds	r5, #8
 8008a82:	2d0c      	cmp	r5, #12
 8008a84:	bf38      	it	cc
 8008a86:	250c      	movcc	r5, #12
 8008a88:	2d00      	cmp	r5, #0
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	db01      	blt.n	8008a92 <_malloc_r+0x1a>
 8008a8e:	42a9      	cmp	r1, r5
 8008a90:	d903      	bls.n	8008a9a <_malloc_r+0x22>
 8008a92:	230c      	movs	r3, #12
 8008a94:	6033      	str	r3, [r6, #0]
 8008a96:	2000      	movs	r0, #0
 8008a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9a:	f000 f8f1 	bl	8008c80 <__malloc_lock>
 8008a9e:	4921      	ldr	r1, [pc, #132]	; (8008b24 <_malloc_r+0xac>)
 8008aa0:	680a      	ldr	r2, [r1, #0]
 8008aa2:	4614      	mov	r4, r2
 8008aa4:	b99c      	cbnz	r4, 8008ace <_malloc_r+0x56>
 8008aa6:	4f20      	ldr	r7, [pc, #128]	; (8008b28 <_malloc_r+0xb0>)
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	b923      	cbnz	r3, 8008ab6 <_malloc_r+0x3e>
 8008aac:	4621      	mov	r1, r4
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f000 f83c 	bl	8008b2c <_sbrk_r>
 8008ab4:	6038      	str	r0, [r7, #0]
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f000 f837 	bl	8008b2c <_sbrk_r>
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	d123      	bne.n	8008b0a <_malloc_r+0x92>
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	6033      	str	r3, [r6, #0]
 8008ac8:	f000 f8e0 	bl	8008c8c <__malloc_unlock>
 8008acc:	e7e3      	b.n	8008a96 <_malloc_r+0x1e>
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	1b5b      	subs	r3, r3, r5
 8008ad2:	d417      	bmi.n	8008b04 <_malloc_r+0x8c>
 8008ad4:	2b0b      	cmp	r3, #11
 8008ad6:	d903      	bls.n	8008ae0 <_malloc_r+0x68>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	441c      	add	r4, r3
 8008adc:	6025      	str	r5, [r4, #0]
 8008ade:	e004      	b.n	8008aea <_malloc_r+0x72>
 8008ae0:	6863      	ldr	r3, [r4, #4]
 8008ae2:	42a2      	cmp	r2, r4
 8008ae4:	bf0c      	ite	eq
 8008ae6:	600b      	streq	r3, [r1, #0]
 8008ae8:	6053      	strne	r3, [r2, #4]
 8008aea:	4630      	mov	r0, r6
 8008aec:	f000 f8ce 	bl	8008c8c <__malloc_unlock>
 8008af0:	f104 000b 	add.w	r0, r4, #11
 8008af4:	1d23      	adds	r3, r4, #4
 8008af6:	f020 0007 	bic.w	r0, r0, #7
 8008afa:	1ac2      	subs	r2, r0, r3
 8008afc:	d0cc      	beq.n	8008a98 <_malloc_r+0x20>
 8008afe:	1a1b      	subs	r3, r3, r0
 8008b00:	50a3      	str	r3, [r4, r2]
 8008b02:	e7c9      	b.n	8008a98 <_malloc_r+0x20>
 8008b04:	4622      	mov	r2, r4
 8008b06:	6864      	ldr	r4, [r4, #4]
 8008b08:	e7cc      	b.n	8008aa4 <_malloc_r+0x2c>
 8008b0a:	1cc4      	adds	r4, r0, #3
 8008b0c:	f024 0403 	bic.w	r4, r4, #3
 8008b10:	42a0      	cmp	r0, r4
 8008b12:	d0e3      	beq.n	8008adc <_malloc_r+0x64>
 8008b14:	1a21      	subs	r1, r4, r0
 8008b16:	4630      	mov	r0, r6
 8008b18:	f000 f808 	bl	8008b2c <_sbrk_r>
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d1dd      	bne.n	8008adc <_malloc_r+0x64>
 8008b20:	e7cf      	b.n	8008ac2 <_malloc_r+0x4a>
 8008b22:	bf00      	nop
 8008b24:	20000434 	.word	0x20000434
 8008b28:	20000438 	.word	0x20000438

08008b2c <_sbrk_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	2300      	movs	r3, #0
 8008b30:	4d05      	ldr	r5, [pc, #20]	; (8008b48 <_sbrk_r+0x1c>)
 8008b32:	4604      	mov	r4, r0
 8008b34:	4608      	mov	r0, r1
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	f7f7 fda8 	bl	800068c <_sbrk>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_sbrk_r+0x1a>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_sbrk_r+0x1a>
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	200014a8 	.word	0x200014a8

08008b4c <__sread>:
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	460c      	mov	r4, r1
 8008b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b54:	f000 f8a0 	bl	8008c98 <_read_r>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	bfab      	itete	ge
 8008b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b60:	181b      	addge	r3, r3, r0
 8008b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b66:	bfac      	ite	ge
 8008b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b6a:	81a3      	strhlt	r3, [r4, #12]
 8008b6c:	bd10      	pop	{r4, pc}

08008b6e <__swrite>:
 8008b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b72:	461f      	mov	r7, r3
 8008b74:	898b      	ldrh	r3, [r1, #12]
 8008b76:	4605      	mov	r5, r0
 8008b78:	05db      	lsls	r3, r3, #23
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	4616      	mov	r6, r2
 8008b7e:	d505      	bpl.n	8008b8c <__swrite+0x1e>
 8008b80:	2302      	movs	r3, #2
 8008b82:	2200      	movs	r2, #0
 8008b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b88:	f000 f868 	bl	8008c5c <_lseek_r>
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	4632      	mov	r2, r6
 8008b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	4628      	mov	r0, r5
 8008b98:	463b      	mov	r3, r7
 8008b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba2:	f000 b817 	b.w	8008bd4 <_write_r>

08008ba6 <__sseek>:
 8008ba6:	b510      	push	{r4, lr}
 8008ba8:	460c      	mov	r4, r1
 8008baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bae:	f000 f855 	bl	8008c5c <_lseek_r>
 8008bb2:	1c43      	adds	r3, r0, #1
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	bf15      	itete	ne
 8008bb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bc2:	81a3      	strheq	r3, [r4, #12]
 8008bc4:	bf18      	it	ne
 8008bc6:	81a3      	strhne	r3, [r4, #12]
 8008bc8:	bd10      	pop	{r4, pc}

08008bca <__sclose>:
 8008bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bce:	f000 b813 	b.w	8008bf8 <_close_r>
	...

08008bd4 <_write_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	4611      	mov	r1, r2
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4d05      	ldr	r5, [pc, #20]	; (8008bf4 <_write_r+0x20>)
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7f7 fd05 	bl	80005f2 <_write>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_write_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_write_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	200014a8 	.word	0x200014a8

08008bf8 <_close_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	4d05      	ldr	r5, [pc, #20]	; (8008c14 <_close_r+0x1c>)
 8008bfe:	4604      	mov	r4, r0
 8008c00:	4608      	mov	r0, r1
 8008c02:	602b      	str	r3, [r5, #0]
 8008c04:	f7f7 fd11 	bl	800062a <_close>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d102      	bne.n	8008c12 <_close_r+0x1a>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <_close_r+0x1a>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	200014a8 	.word	0x200014a8

08008c18 <_fstat_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4d06      	ldr	r5, [pc, #24]	; (8008c38 <_fstat_r+0x20>)
 8008c1e:	4604      	mov	r4, r0
 8008c20:	4608      	mov	r0, r1
 8008c22:	4611      	mov	r1, r2
 8008c24:	602b      	str	r3, [r5, #0]
 8008c26:	f7f7 fd0b 	bl	8000640 <_fstat>
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	d102      	bne.n	8008c34 <_fstat_r+0x1c>
 8008c2e:	682b      	ldr	r3, [r5, #0]
 8008c30:	b103      	cbz	r3, 8008c34 <_fstat_r+0x1c>
 8008c32:	6023      	str	r3, [r4, #0]
 8008c34:	bd38      	pop	{r3, r4, r5, pc}
 8008c36:	bf00      	nop
 8008c38:	200014a8 	.word	0x200014a8

08008c3c <_isatty_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4d05      	ldr	r5, [pc, #20]	; (8008c58 <_isatty_r+0x1c>)
 8008c42:	4604      	mov	r4, r0
 8008c44:	4608      	mov	r0, r1
 8008c46:	602b      	str	r3, [r5, #0]
 8008c48:	f7f7 fd09 	bl	800065e <_isatty>
 8008c4c:	1c43      	adds	r3, r0, #1
 8008c4e:	d102      	bne.n	8008c56 <_isatty_r+0x1a>
 8008c50:	682b      	ldr	r3, [r5, #0]
 8008c52:	b103      	cbz	r3, 8008c56 <_isatty_r+0x1a>
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	bd38      	pop	{r3, r4, r5, pc}
 8008c58:	200014a8 	.word	0x200014a8

08008c5c <_lseek_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4604      	mov	r4, r0
 8008c60:	4608      	mov	r0, r1
 8008c62:	4611      	mov	r1, r2
 8008c64:	2200      	movs	r2, #0
 8008c66:	4d05      	ldr	r5, [pc, #20]	; (8008c7c <_lseek_r+0x20>)
 8008c68:	602a      	str	r2, [r5, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f7f7 fd01 	bl	8000672 <_lseek>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_lseek_r+0x1e>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_lseek_r+0x1e>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	200014a8 	.word	0x200014a8

08008c80 <__malloc_lock>:
 8008c80:	4801      	ldr	r0, [pc, #4]	; (8008c88 <__malloc_lock+0x8>)
 8008c82:	f7ff be47 	b.w	8008914 <__retarget_lock_acquire_recursive>
 8008c86:	bf00      	nop
 8008c88:	200014a0 	.word	0x200014a0

08008c8c <__malloc_unlock>:
 8008c8c:	4801      	ldr	r0, [pc, #4]	; (8008c94 <__malloc_unlock+0x8>)
 8008c8e:	f7ff be42 	b.w	8008916 <__retarget_lock_release_recursive>
 8008c92:	bf00      	nop
 8008c94:	200014a0 	.word	0x200014a0

08008c98 <_read_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4d05      	ldr	r5, [pc, #20]	; (8008cb8 <_read_r+0x20>)
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f7f7 fc86 	bl	80005b8 <_read>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d102      	bne.n	8008cb6 <_read_r+0x1e>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b103      	cbz	r3, 8008cb6 <_read_r+0x1e>
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	200014a8 	.word	0x200014a8

08008cbc <_init>:
 8008cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cbe:	bf00      	nop
 8008cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cc2:	bc08      	pop	{r3}
 8008cc4:	469e      	mov	lr, r3
 8008cc6:	4770      	bx	lr

08008cc8 <_fini>:
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	bf00      	nop
 8008ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cce:	bc08      	pop	{r3}
 8008cd0:	469e      	mov	lr, r3
 8008cd2:	4770      	bx	lr
